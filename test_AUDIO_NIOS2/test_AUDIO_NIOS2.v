
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module test_AUDIO_NIOS2(

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

//wire [31:0] sin, i;


//=======================================================
//  Structural coding
//=======================================================

NIOS_AUDIO nios
(
		.audio_ADCDAT(AUD_ADCDAT),
		.audio_ADCLRCK(AUD_ADCLRCK),
		.audio_BCLK(AUD_BCLK),
		.audio_DACDAT(AUD_DACDAT),
		.audio_DACLRCK(AUD_DACLRCK),
		.audio_clk_clk(AUD_XCK),
		
		.clk_clk(CLOCK_50),
		.reset_reset_n(KEY[0]),
		
		.i2c_sda_export(FPGA_I2C_SDAT),
		.i2c_scl_export(FPGA_I2C_SCLK),
		
		.sin_in_export(sin),
		
		.i_out_export(i)
);

SIN_in sinus
(
		.clock(CLOCK_50),
		.data(i),
		.result(sin)
);

endmodule
