
audio-test.elf:     file format elf32-littlenios2
audio-test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01008248

Program Header:
    LOAD off    0x00001000 vaddr 0x01008000 paddr 0x01008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01008020 paddr 0x01008020 align 2**12
         filesz 0x00004324 memsz 0x00004324 flags r-x
    LOAD off    0x00005344 vaddr 0x0100c344 paddr 0x0100d688 align 2**12
         filesz 0x00001344 memsz 0x00001344 flags rw-
    LOAD off    0x000069cc vaddr 0x0100e9cc paddr 0x0100e9cc align 2**12
         filesz 0x00000000 memsz 0x00000148 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01008000  01008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  01008020  01008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004074  01008248  01008248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000088  0100c2bc  0100c2bc  000052bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001344  0100c344  0100d688  00005344  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000148  0100e9cc  0100e9cc  000069cc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0100eb14  0100eb14  00006688  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006688  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000640  00000000  00000000  000066b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000089e4  00000000  00000000  00006cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002ec3  00000000  00000000  0000f6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000035d0  00000000  00000000  00012597  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001224  00000000  00000000  00015b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002185  00000000  00000000  00016d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a56  00000000  00000000  00018f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00019968  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000200  00000000  00000000  000199c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001bd8a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001bd8d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001bd99  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001bd9a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001bd9b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001bd9f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001bda3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001bda7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001bdb2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001bdbd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0001bdc8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000039  00000000  00000000  0001bdd2  2**0
                  CONTENTS, READONLY
 29 .jdi          000041f9  00000000  00000000  0001be0b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007c540  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01008000 l    d  .entry	00000000 .entry
01008020 l    d  .exceptions	00000000 .exceptions
01008248 l    d  .text	00000000 .text
0100c2bc l    d  .rodata	00000000 .rodata
0100c344 l    d  .rwdata	00000000 .rwdata
0100e9cc l    d  .bss	00000000 .bss
0100eb14 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../audio-test_bsp//obj/HAL/src/crt0.o
01008290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 AUDIO.c
0100e9ec l     O .bss	00000028 reg_file
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 main.c
0100958c l     F .text	00000038 alt_dev_reg
0100c344 l     O .rwdata	00001060 jtag_uart_0
0100d3a4 l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0100d3d4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_dev.c
01009978 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010099a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
01009a98 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
01009c20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01009fac l     F .text	00000210 altera_avalon_jtag_uart_irq
0100a1bc l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0100b240 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100b46c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0100b75c l     F .text	00000050 alt_get_errno
0100b7ac l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
0100e9e8 g     O .bss	00000004 alt_instruction_exception_handler
01008fa8 g     F .text	00000100 I2C_Read
01009b84 g     F .text	0000006c alt_main
010097b8 g     F .text	00000080 _puts_r
0100ea14 g     O .bss	00000100 alt_irq
0100d688 g       *ABS*	00000000 __flash_rwdata_start
0100aaa8 g     F .text	00000060 alt_up_audio_read_fifo_avail
01008294 g     F .text	00000150 AUDIO_Init
0100ab08 g     F .text	00000068 alt_up_audio_record_r
010084a4 g     F .text	00000078 AUDIO_AdcEnableHighPassFilter
0100aa14 g     F .text	00000094 alt_up_audio_reset_audio_core
01008ce0 g     F .text	000000bc aduio_RegWrite
01008ea4 g     F .text	0000002c AUDIO_FifoClear
01009d68 g     F .text	00000024 altera_nios2_gen2_irq_init
01008e54 g     F .text	00000050 AUDIO_AdcFifoGetData
01009304 g     F .text	00000130 i2c_write
01008000 g     F .entry	0000001c __reset
01008020 g       *ABS*	00000000 __flash_exceptions_start
0100e9cc g     O .bss	00000004 errno
0100a9d4 g     F .text	00000040 alt_up_audio_write_interrupt_pending
0100e9d4 g     O .bss	00000004 alt_argv
0101565c g       *ABS*	00000000 _gp
01009bf0 g     F .text	00000030 usleep
0100d4dc g     O .rwdata	00000180 alt_fd_list
0100b3a8 g     F .text	00000090 alt_find_dev
0100bf1c g     F .text	00000028 memcpy
0100b530 g     F .text	0000007c alt_io_redirect
01009838 g     F .text	00000014 puts
0100be30 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0100aef0 g     F .text	00000050 alt_up_audio_read_fifo_head
0100a3bc g     F .text	0000021c altera_avalon_jtag_uart_read
01008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100c1cc g     F .text	00000064 .hidden __udivsi3
01008bc8 g     F .text	0000008c AUDIO_EnableByPass
0100bda0 g     F .text	00000090 alt_icache_flush
010090a8 g     F .text	00000158 I2C_MultipleRead
01008a18 g     F .text	000000d8 AUDIO_SetLineInVol
0100d674 g     O .rwdata	00000004 alt_max_fd
0100af40 g     F .text	00000068 alt_up_audio_write_fifo_head
010085cc g     F .text	000000e0 AUDIO_DacEnableZeroCross
0100b5ac g     F .text	000001b0 alt_irq_register
0100d65c g     O .rwdata	00000004 _global_impure_ptr
0100eb14 g       *ABS*	00000000 __bss_end
0100bad0 g     F .text	00000108 alt_tick
0100842c g     F .text	00000078 AUDIO_MicBoost
0100a7fc g     F .text	00000040 alt_up_audio_open_dev
01008ed0 g     F .text	000000d8 I2C_Write
0100ac38 g     F .text	00000068 alt_up_audio_play_r
0100ba34 g     F .text	0000009c alt_alarm_stop
0100e9dc g     O .bss	00000004 alt_irq_active
010080fc g     F .exceptions	000000d8 alt_irq_handler
0100d4b4 g     O .rwdata	00000028 alt_dev_null
01009200 g     F .text	0000008c i2c_start
0100b360 g     F .text	00000048 alt_dcache_flush_all
0100d688 g       *ABS*	00000000 __ram_rwdata_end
0100d66c g     O .rwdata	00000008 alt_dev_list
01009c70 g     F .text	000000f8 write
0100c344 g       *ABS*	00000000 __ram_rodata_end
0100c230 g     F .text	00000058 .hidden __umodsi3
01008c54 g     F .text	0000008c AUDIO_EnableSiteTone
0100eb14 g       *ABS*	00000000 end
01009ef0 g     F .text	000000bc altera_avalon_jtag_uart_init
010081d4 g     F .exceptions	00000074 alt_instruction_exception_entry
01010000 g       *ABS*	00000000 __alt_stack_pointer
0100a5d8 g     F .text	00000224 altera_avalon_jtag_uart_write
0100bf44 g     F .text	00000190 __call_exitprocs
01008248 g     F .text	0000004c _start
0100e9e0 g     O .bss	00000004 _alt_tick_rate
0100ade8 g     F .text	00000108 alt_up_audio_write_fifo
0100e9e4 g     O .bss	00000004 _alt_nticks
010095fc g     F .text	00000058 alt_sys_init
0100ad08 g     F .text	000000e0 alt_up_audio_read_fifo
010086ac g     F .text	0000008c AUDIO_DacEnableSoftMute
0100a93c g     F .text	00000058 alt_up_audio_disable_write_interrupt
0100a264 g     F .text	00000068 altera_avalon_jtag_uart_close
0100c344 g       *ABS*	00000000 __ram_rwdata_start
0100c2bc g       *ABS*	00000000 __ram_rodata_start
01009d8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0100bcec g     F .text	000000b4 alt_get_fd
0100b0e8 g     F .text	00000158 alt_busy_sleep
0100a8e8 g     F .text	00000054 alt_up_audio_enable_write_interrupt
0100beec g     F .text	00000030 memcmp
01009e4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0100eb14 g       *ABS*	00000000 __alt_stack_base
01009e9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0100a890 g     F .text	00000058 alt_up_audio_disable_read_interrupt
0100851c g     F .text	000000b0 AUDIO_DacDeemphasisControl
0100928c g     F .text	00000078 i2c_stop
0100bbd8 g     F .text	00000114 alt_find_file
010099f4 g     F .text	000000a4 alt_dev_llist_insert
010088a4 g     F .text	00000090 AUDIO_SetInputSource
010083e4 g     F .text	00000048 AUDIO_InterfaceActive
01009868 g     F .text	000000b8 __sfvwrite_small_dev
0100e9cc g       *ABS*	00000000 __bss_start
01009654 g     F .text	00000164 main
0100abd8 g     F .text	00000060 alt_up_audio_write_fifo_space
0100e9d8 g     O .bss	00000004 alt_envp
01009dec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01009434 g     F .text	00000158 i2c_read
0100d678 g     O .rwdata	00000004 alt_errno
0100c0d4 g     F .text	00000084 .hidden __divsi3
010087c4 g     F .text	000000e0 AUDIO_LineInMute
01008738 g     F .text	0000008c AUDIO_MicMute
0100c2bc g       *ABS*	00000000 __flash_rodata_start
010095c4 g     F .text	00000038 alt_irq_init
0100b9d0 g     F .text	00000064 alt_release_fd
01009920 g     F .text	00000058 _write_r
0100d660 g     O .rwdata	00000004 _impure_ptr
0100e9d0 g     O .bss	00000004 alt_argc
01008e1c g     F .text	00000038 AUDIO_AdcFifoNotEmpty
01008020 g       .exceptions	00000000 alt_irq_entry
01008dd4 g     F .text	00000048 AUDIO_DacFifoSetData
0100d664 g     O .rwdata	00000008 alt_fs_list
0100ab70 g     F .text	00000068 alt_up_audio_record_l
01008020 g       *ABS*	00000000 __ram_exceptions_start
01008934 g     F .text	000000e4 AUDIO_SetSampleRate
0100d688 g       *ABS*	00000000 _edata
0100eb14 g       *ABS*	00000000 _end
01008af0 g     F .text	000000d8 AUDIO_SetLineOutVol
01008248 g       *ABS*	00000000 __ram_exceptions_end
0100a2cc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0100aca0 g     F .text	00000068 alt_up_audio_play_l
0100becc g     F .text	00000020 exit
0100c158 g     F .text	00000074 .hidden __modsi3
01010000 g       *ABS*	00000000 __alt_data_end
01008020 g     F .exceptions	00000000 alt_exception
0100c288 g     F .text	00000034 _exit
0100afa8 g     F .text	00000140 alt_alarm_start
0100984c g     F .text	0000001c strlen
0100b878 g     F .text	00000158 open
01008d9c g     F .text	00000038 AUDIO_DacFifoNotFull
0100b438 g     F .text	00000034 alt_icache_flush_all
0100d67c g     O .rwdata	00000004 alt_priority_mask
0100d680 g     O .rwdata	00000008 alt_alarm_list
0100b290 g     F .text	000000d0 close
01009b00 g     F .text	00000084 alt_load
0100a83c g     F .text	00000054 alt_up_audio_enable_read_interrupt
0100a994 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

01008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1008000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1008004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1008008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100800c:	00bffd16 	blt	zero,r2,1008004 <_gp+0xffff29a8>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1008010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1008014:	08609214 	ori	at,at,33352
    jmp r1
 1008018:	0800683a 	jmp	at
 100801c:	00000000 	call	0 <__reset-0x1008000>

Disassembly of section .exceptions:

01008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1008020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1008024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1008028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1008030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1008034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1008038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1008040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1008044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1008048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1008050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1008054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1008058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1008060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1008064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1008068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1008070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1008074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1008078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100807c:	10000326 	beq	r2,zero,100808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1008080:	20000226 	beq	r4,zero,100808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1008084:	10080fc0 	call	10080fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1008088:	00000706 	br	10080a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1008090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1008094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1008098:	10081d40 	call	10081d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100809c:	1000021e 	bne	r2,zero,10080a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10080a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10080a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10080a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10080ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10080b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10080b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10080b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10080bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10080c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10080c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10080c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10080cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10080d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10080d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10080d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10080dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10080e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10080e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10080e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10080ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10080f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10080f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10080f8:	ef80083a 	eret

010080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10080fc:	defff904 	addi	sp,sp,-28
 1008100:	dfc00615 	stw	ra,24(sp)
 1008104:	df000515 	stw	fp,20(sp)
 1008108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1008110:	0005313a 	rdctl	r2,ipending
 1008114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1008118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1008120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1008124:	00800044 	movi	r2,1
 1008128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100812c:	e0fffb17 	ldw	r3,-20(fp)
 1008130:	e0bffc17 	ldw	r2,-16(fp)
 1008134:	1884703a 	and	r2,r3,r2
 1008138:	10001526 	beq	r2,zero,1008190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100813c:	00804074 	movhi	r2,257
 1008140:	10ba8504 	addi	r2,r2,-5612
 1008144:	e0fffd17 	ldw	r3,-12(fp)
 1008148:	180690fa 	slli	r3,r3,3
 100814c:	10c5883a 	add	r2,r2,r3
 1008150:	10c00017 	ldw	r3,0(r2)
 1008154:	00804074 	movhi	r2,257
 1008158:	10ba8504 	addi	r2,r2,-5612
 100815c:	e13ffd17 	ldw	r4,-12(fp)
 1008160:	200890fa 	slli	r4,r4,3
 1008164:	1105883a 	add	r2,r2,r4
 1008168:	10800104 	addi	r2,r2,4
 100816c:	10800017 	ldw	r2,0(r2)
 1008170:	e17ffd17 	ldw	r5,-12(fp)
 1008174:	1009883a 	mov	r4,r2
 1008178:	183ee83a 	callr	r3
#endif
        break;
 100817c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1008180:	0005313a 	rdctl	r2,ipending
 1008184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1008188:	e0bfff17 	ldw	r2,-4(fp)
 100818c:	00000706 	br	10081ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 1008190:	e0bffc17 	ldw	r2,-16(fp)
 1008194:	1085883a 	add	r2,r2,r2
 1008198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 100819c:	e0bffd17 	ldw	r2,-12(fp)
 10081a0:	10800044 	addi	r2,r2,1
 10081a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10081a8:	003fe006 	br	100812c <_gp+0xffff2ad0>

    active = alt_irq_pending ();
 10081ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10081b0:	e0bffb17 	ldw	r2,-20(fp)
 10081b4:	103fda1e 	bne	r2,zero,1008120 <_gp+0xffff2ac4>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10081b8:	0001883a 	nop
}
 10081bc:	0001883a 	nop
 10081c0:	e037883a 	mov	sp,fp
 10081c4:	dfc00117 	ldw	ra,4(sp)
 10081c8:	df000017 	ldw	fp,0(sp)
 10081cc:	dec00204 	addi	sp,sp,8
 10081d0:	f800283a 	ret

010081d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10081d4:	defffb04 	addi	sp,sp,-20
 10081d8:	dfc00415 	stw	ra,16(sp)
 10081dc:	df000315 	stw	fp,12(sp)
 10081e0:	df000304 	addi	fp,sp,12
 10081e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10081e8:	000531fa 	rdctl	r2,exception
 10081ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10081f0:	e0bffd17 	ldw	r2,-12(fp)
 10081f4:	10801f0c 	andi	r2,r2,124
 10081f8:	1004d0ba 	srli	r2,r2,2
 10081fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1008200:	0005333a 	rdctl	r2,badaddr
 1008204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1008208:	d0a4e317 	ldw	r2,-27764(gp)
 100820c:	10000726 	beq	r2,zero,100822c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1008210:	d0a4e317 	ldw	r2,-27764(gp)
 1008214:	e0fffd17 	ldw	r3,-12(fp)
 1008218:	e1bffe17 	ldw	r6,-8(fp)
 100821c:	e17fff17 	ldw	r5,-4(fp)
 1008220:	1809883a 	mov	r4,r3
 1008224:	103ee83a 	callr	r2
 1008228:	00000206 	br	1008234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 100822c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1008230:	0005883a 	mov	r2,zero
}
 1008234:	e037883a 	mov	sp,fp
 1008238:	dfc00117 	ldw	ra,4(sp)
 100823c:	df000017 	ldw	fp,0(sp)
 1008240:	dec00204 	addi	sp,sp,8
 1008244:	f800283a 	ret

Disassembly of section .text:

01008248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1008248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 100824c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 1008250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1008254:	00bffd16 	blt	zero,r2,100824c <_gp+0xffff2bf0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1008258:	06c04074 	movhi	sp,257
    ori sp, sp, %lo(__alt_stack_pointer)
 100825c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 1008260:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 1008264:	d6959714 	ori	gp,gp,22108
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1008268:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 100826c:	10ba7314 	ori	r2,r2,59852

    movhi r3, %hi(__bss_end)
 1008270:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 1008274:	18fac514 	ori	r3,r3,60180

    beq r2, r3, 1f
 1008278:	10c00326 	beq	r2,r3,1008288 <_start+0x40>

0:
    stw zero, (r2)
 100827c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1008280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1008284:	10fffd36 	bltu	r2,r3,100827c <_gp+0xffff2c20>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1008288:	1009b000 	call	1009b00 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 100828c:	1009b840 	call	1009b84 <alt_main>

01008290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1008290:	003fff06 	br	1008290 <_gp+0xffff2c34>

01008294 <AUDIO_Init>:

/////////////////////////////////////////////////////////////////////////
///////////// External function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool AUDIO_Init(void) {
 1008294:	defffd04 	addi	sp,sp,-12
 1008298:	dfc00215 	stw	ra,8(sp)
 100829c:	df000115 	stw	fp,4(sp)
 10082a0:	df000104 	addi	fp,sp,4
	bool bSuccess = TRUE;
 10082a4:	00800044 	movi	r2,1
 10082a8:	e0bfff15 	stw	r2,-4(fp)
	AUDIO_DEBUG(("[AUDIO] AUDIO_Init...\r\n"));

	if (bSuccess)
 10082ac:	e0bfff17 	ldw	r2,-4(fp)
 10082b0:	10000426 	beq	r2,zero,10082c4 <AUDIO_Init+0x30>
		bSuccess = aduio_RegWrite(15, 0x0000);  // reset
 10082b4:	000b883a 	mov	r5,zero
 10082b8:	010003c4 	movi	r4,15
 10082bc:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 10082c0:	e0bfff15 	stw	r2,-4(fp)

	if (bSuccess)
 10082c4:	e0bfff17 	ldw	r2,-4(fp)
 10082c8:	10000426 	beq	r2,zero,10082dc <AUDIO_Init+0x48>
		bSuccess = aduio_RegWrite(9, 0x0000);  // inactive interface         
 10082cc:	000b883a 	mov	r5,zero
 10082d0:	01000244 	movi	r4,9
 10082d4:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 10082d8:	e0bfff15 	stw	r2,-4(fp)

	//usleep(20*1000);    
	if (bSuccess)
 10082dc:	e0bfff17 	ldw	r2,-4(fp)
 10082e0:	10000426 	beq	r2,zero,10082f4 <AUDIO_Init+0x60>
		bSuccess = aduio_RegWrite(0, 0x0017); // Left Line In: set left line in volume
 10082e4:	014005c4 	movi	r5,23
 10082e8:	0009883a 	mov	r4,zero
 10082ec:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 10082f0:	e0bfff15 	stw	r2,-4(fp)

	if (bSuccess)
 10082f4:	e0bfff17 	ldw	r2,-4(fp)
 10082f8:	10000426 	beq	r2,zero,100830c <AUDIO_Init+0x78>
		bSuccess = aduio_RegWrite(1, 0x0017); // Right Line In: set right line in volume
 10082fc:	014005c4 	movi	r5,23
 1008300:	01000044 	movi	r4,1
 1008304:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008308:	e0bfff15 	stw	r2,-4(fp)

	if (bSuccess)
 100830c:	e0bfff17 	ldw	r2,-4(fp)
 1008310:	10000426 	beq	r2,zero,1008324 <AUDIO_Init+0x90>
		bSuccess = aduio_RegWrite(2, 0x005B); // Left Headphone Out: set left line out volume
 1008314:	014016c4 	movi	r5,91
 1008318:	01000084 	movi	r4,2
 100831c:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008320:	e0bfff15 	stw	r2,-4(fp)

	if (bSuccess)
 1008324:	e0bfff17 	ldw	r2,-4(fp)
 1008328:	10000426 	beq	r2,zero,100833c <AUDIO_Init+0xa8>
		bSuccess = aduio_RegWrite(3, 0x005B); // Right Headphone Out: set right line out volume
 100832c:	014016c4 	movi	r5,91
 1008330:	010000c4 	movi	r4,3
 1008334:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008338:	e0bfff15 	stw	r2,-4(fp)

	if (bSuccess)
 100833c:	e0bfff17 	ldw	r2,-4(fp)
 1008340:	10000426 	beq	r2,zero,1008354 <AUDIO_Init+0xc0>
		bSuccess = aduio_RegWrite(4, 0x0015); // Analogue Audio Path Control: set mic as input and boost it, and enable dac         
 1008344:	01400544 	movi	r5,21
 1008348:	01000104 	movi	r4,4
 100834c:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008350:	e0bfff15 	stw	r2,-4(fp)

	if (bSuccess)
 1008354:	e0bfff17 	ldw	r2,-4(fp)
 1008358:	10000426 	beq	r2,zero,100836c <AUDIO_Init+0xd8>
		bSuccess = aduio_RegWrite(5, 0x0000); // Digital Audio Path Control: disable soft mute         
 100835c:	000b883a 	mov	r5,zero
 1008360:	01000144 	movi	r4,5
 1008364:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008368:	e0bfff15 	stw	r2,-4(fp)

	if (bSuccess)
 100836c:	e0bfff17 	ldw	r2,-4(fp)
 1008370:	10000426 	beq	r2,zero,1008384 <AUDIO_Init+0xf0>
		bSuccess = aduio_RegWrite(6, 0); // power down control: power on all         
 1008374:	000b883a 	mov	r5,zero
 1008378:	01000184 	movi	r4,6
 100837c:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008380:	e0bfff15 	stw	r2,-4(fp)

	if (bSuccess)
 1008384:	e0bfff17 	ldw	r2,-4(fp)
 1008388:	10000426 	beq	r2,zero,100839c <AUDIO_Init+0x108>
		bSuccess = aduio_RegWrite(7, 0x0042); // I2S, iwl=16-bits, Enable Master Mode         
 100838c:	01401084 	movi	r5,66
 1008390:	010001c4 	movi	r4,7
 1008394:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008398:	e0bfff15 	stw	r2,-4(fp)
//        bSuccess = aduio_RegWrite(7, 0x0041);  // MSB-First, left justified, iwl=16-bits, Enable Master Mode         

	if (bSuccess)
 100839c:	e0bfff17 	ldw	r2,-4(fp)
 10083a0:	10000426 	beq	r2,zero,10083b4 <AUDIO_Init+0x120>
		bSuccess = aduio_RegWrite(8, 0x0002); // Normal, Base OVer-Sampleing Rate 384 fs (BOSR=1)         
 10083a4:	01400084 	movi	r5,2
 10083a8:	01000204 	movi	r4,8
 10083ac:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 10083b0:	e0bfff15 	stw	r2,-4(fp)

	if (bSuccess)
 10083b4:	e0bfff17 	ldw	r2,-4(fp)
 10083b8:	10000426 	beq	r2,zero,10083cc <AUDIO_Init+0x138>
		bSuccess = aduio_RegWrite(9, 0x0001);  // active interface
 10083bc:	01400044 	movi	r5,1
 10083c0:	01000244 	movi	r4,9
 10083c4:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 10083c8:	e0bfff15 	stw	r2,-4(fp)

	AUDIO_DEBUG(("[AUDIO] AUDIO_Init %s\r\n", bSuccess?"success":"fail"));

	return bSuccess;
 10083cc:	e0bfff17 	ldw	r2,-4(fp)

}
 10083d0:	e037883a 	mov	sp,fp
 10083d4:	dfc00117 	ldw	ra,4(sp)
 10083d8:	df000017 	ldw	fp,0(sp)
 10083dc:	dec00204 	addi	sp,sp,8
 10083e0:	f800283a 	ret

010083e4 <AUDIO_InterfaceActive>:

bool AUDIO_InterfaceActive(bool bActive) {
 10083e4:	defffc04 	addi	sp,sp,-16
 10083e8:	dfc00315 	stw	ra,12(sp)
 10083ec:	df000215 	stw	fp,8(sp)
 10083f0:	df000204 	addi	fp,sp,8
 10083f4:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	bSuccess = aduio_RegWrite(9, bActive ? 0x0001 : 0x0000);
 10083f8:	e0bfff17 	ldw	r2,-4(fp)
 10083fc:	1004c03a 	cmpne	r2,r2,zero
 1008400:	10803fcc 	andi	r2,r2,255
 1008404:	100b883a 	mov	r5,r2
 1008408:	01000244 	movi	r4,9
 100840c:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008410:	e0bffe15 	stw	r2,-8(fp)
	return bSuccess;
 1008414:	e0bffe17 	ldw	r2,-8(fp)
}
 1008418:	e037883a 	mov	sp,fp
 100841c:	dfc00117 	ldw	ra,4(sp)
 1008420:	df000017 	ldw	fp,0(sp)
 1008424:	dec00204 	addi	sp,sp,8
 1008428:	f800283a 	ret

0100842c <AUDIO_MicBoost>:

bool AUDIO_MicBoost(bool bBoost) {
 100842c:	defffb04 	addi	sp,sp,-20
 1008430:	dfc00415 	stw	ra,16(sp)
 1008434:	df000315 	stw	fp,12(sp)
 1008438:	df000304 	addi	fp,sp,12
 100843c:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	alt_u16 control;
	control = reg_file[4];
 1008440:	00804074 	movhi	r2,257
 1008444:	10ba7b04 	addi	r2,r2,-5652
 1008448:	1080020b 	ldhu	r2,8(r2)
 100844c:	e0bffd0d 	sth	r2,-12(fp)
	if (bBoost)
 1008450:	e0bfff17 	ldw	r2,-4(fp)
 1008454:	10000426 	beq	r2,zero,1008468 <AUDIO_MicBoost+0x3c>
		control |= 0x0001;
 1008458:	e0bffd0b 	ldhu	r2,-12(fp)
 100845c:	10800054 	ori	r2,r2,1
 1008460:	e0bffd0d 	sth	r2,-12(fp)
 1008464:	00000406 	br	1008478 <AUDIO_MicBoost+0x4c>
	else
		control &= 0xFFFE;
 1008468:	e0fffd0b 	ldhu	r3,-12(fp)
 100846c:	00bfff84 	movi	r2,-2
 1008470:	1884703a 	and	r2,r3,r2
 1008474:	e0bffd0d 	sth	r2,-12(fp)
	bSuccess = aduio_RegWrite(4, control); // Left Line In: set left line in volume
 1008478:	e0bffd0b 	ldhu	r2,-12(fp)
 100847c:	100b883a 	mov	r5,r2
 1008480:	01000104 	movi	r4,4
 1008484:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008488:	e0bffe15 	stw	r2,-8(fp)
	return bSuccess;
 100848c:	e0bffe17 	ldw	r2,-8(fp)
}
 1008490:	e037883a 	mov	sp,fp
 1008494:	dfc00117 	ldw	ra,4(sp)
 1008498:	df000017 	ldw	fp,0(sp)
 100849c:	dec00204 	addi	sp,sp,8
 10084a0:	f800283a 	ret

010084a4 <AUDIO_AdcEnableHighPassFilter>:

bool AUDIO_AdcEnableHighPassFilter(bool bEnable) {
 10084a4:	defffb04 	addi	sp,sp,-20
 10084a8:	dfc00415 	stw	ra,16(sp)
 10084ac:	df000315 	stw	fp,12(sp)
 10084b0:	df000304 	addi	fp,sp,12
 10084b4:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	alt_u16 control;
	control = reg_file[5];
 10084b8:	00804074 	movhi	r2,257
 10084bc:	10ba7b04 	addi	r2,r2,-5652
 10084c0:	1080028b 	ldhu	r2,10(r2)
 10084c4:	e0bffd0d 	sth	r2,-12(fp)
	if (bEnable)
 10084c8:	e0bfff17 	ldw	r2,-4(fp)
 10084cc:	10000526 	beq	r2,zero,10084e4 <AUDIO_AdcEnableHighPassFilter+0x40>
		control &= 0xFFFE;
 10084d0:	e0fffd0b 	ldhu	r3,-12(fp)
 10084d4:	00bfff84 	movi	r2,-2
 10084d8:	1884703a 	and	r2,r3,r2
 10084dc:	e0bffd0d 	sth	r2,-12(fp)
 10084e0:	00000306 	br	10084f0 <AUDIO_AdcEnableHighPassFilter+0x4c>
	else
		control |= 0x0001;
 10084e4:	e0bffd0b 	ldhu	r2,-12(fp)
 10084e8:	10800054 	ori	r2,r2,1
 10084ec:	e0bffd0d 	sth	r2,-12(fp)
	bSuccess = aduio_RegWrite(5, control); // Left Line In: set left line in volume
 10084f0:	e0bffd0b 	ldhu	r2,-12(fp)
 10084f4:	100b883a 	mov	r5,r2
 10084f8:	01000144 	movi	r4,5
 10084fc:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008500:	e0bffe15 	stw	r2,-8(fp)
	return bSuccess;
 1008504:	e0bffe17 	ldw	r2,-8(fp)
}
 1008508:	e037883a 	mov	sp,fp
 100850c:	dfc00117 	ldw	ra,4(sp)
 1008510:	df000017 	ldw	fp,0(sp)
 1008514:	dec00204 	addi	sp,sp,8
 1008518:	f800283a 	ret

0100851c <AUDIO_DacDeemphasisControl>:

bool AUDIO_DacDeemphasisControl(alt_u8 deemphasis_type) {
 100851c:	defffb04 	addi	sp,sp,-20
 1008520:	dfc00415 	stw	ra,16(sp)
 1008524:	df000315 	stw	fp,12(sp)
 1008528:	df000304 	addi	fp,sp,12
 100852c:	2005883a 	mov	r2,r4
 1008530:	e0bfff05 	stb	r2,-4(fp)
	bool bSuccess;
	alt_u16 control;
	control = reg_file[5];
 1008534:	00804074 	movhi	r2,257
 1008538:	10ba7b04 	addi	r2,r2,-5652
 100853c:	1080028b 	ldhu	r2,10(r2)
 1008540:	e0bffd0d 	sth	r2,-12(fp)
	control &= 0xFFF9;
 1008544:	e0fffd0b 	ldhu	r3,-12(fp)
 1008548:	00bffe44 	movi	r2,-7
 100854c:	1884703a 	and	r2,r3,r2
 1008550:	e0bffd0d 	sth	r2,-12(fp)
	switch (deemphasis_type) {
 1008554:	e0bfff03 	ldbu	r2,-4(fp)
 1008558:	10c000a0 	cmpeqi	r3,r2,2
 100855c:	1800081e 	bne	r3,zero,1008580 <AUDIO_DacDeemphasisControl+0x64>
 1008560:	10c000e0 	cmpeqi	r3,r2,3
 1008564:	18000a1e 	bne	r3,zero,1008590 <AUDIO_DacDeemphasisControl+0x74>
 1008568:	10800060 	cmpeqi	r2,r2,1
 100856c:	10000c26 	beq	r2,zero,10085a0 <AUDIO_DacDeemphasisControl+0x84>
	case DEEMPHASIS_48K:
		control |= ((0x03) << 1);
 1008570:	e0bffd0b 	ldhu	r2,-12(fp)
 1008574:	10800194 	ori	r2,r2,6
 1008578:	e0bffd0d 	sth	r2,-12(fp)
		break;
 100857c:	00000806 	br	10085a0 <AUDIO_DacDeemphasisControl+0x84>
	case DEEMPHASIS_44K1:
		control |= ((0x02) << 1);
 1008580:	e0bffd0b 	ldhu	r2,-12(fp)
 1008584:	10800114 	ori	r2,r2,4
 1008588:	e0bffd0d 	sth	r2,-12(fp)
		break;
 100858c:	00000406 	br	10085a0 <AUDIO_DacDeemphasisControl+0x84>
	case DEEMPHASIS_32K:
		control |= ((0x01) << 1);
 1008590:	e0bffd0b 	ldhu	r2,-12(fp)
 1008594:	10800094 	ori	r2,r2,2
 1008598:	e0bffd0d 	sth	r2,-12(fp)
		break;
 100859c:	0001883a 	nop
	}
	bSuccess = aduio_RegWrite(5, control); // Left Line In: set left line in volume
 10085a0:	e0bffd0b 	ldhu	r2,-12(fp)
 10085a4:	100b883a 	mov	r5,r2
 10085a8:	01000144 	movi	r4,5
 10085ac:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 10085b0:	e0bffe15 	stw	r2,-8(fp)
	return bSuccess;
 10085b4:	e0bffe17 	ldw	r2,-8(fp)
}
 10085b8:	e037883a 	mov	sp,fp
 10085bc:	dfc00117 	ldw	ra,4(sp)
 10085c0:	df000017 	ldw	fp,0(sp)
 10085c4:	dec00204 	addi	sp,sp,8
 10085c8:	f800283a 	ret

010085cc <AUDIO_DacEnableZeroCross>:

bool AUDIO_DacEnableZeroCross(bool bEnable) {
 10085cc:	defffa04 	addi	sp,sp,-24
 10085d0:	dfc00515 	stw	ra,20(sp)
 10085d4:	df000415 	stw	fp,16(sp)
 10085d8:	df000404 	addi	fp,sp,16
 10085dc:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	alt_u16 control_l, control_r;
	alt_u16 mask;
	control_l = reg_file[2];
 10085e0:	00804074 	movhi	r2,257
 10085e4:	10ba7b04 	addi	r2,r2,-5652
 10085e8:	1080010b 	ldhu	r2,4(r2)
 10085ec:	e0bffd0d 	sth	r2,-12(fp)
	control_r = reg_file[3];
 10085f0:	00804074 	movhi	r2,257
 10085f4:	10ba7b04 	addi	r2,r2,-5652
 10085f8:	1080018b 	ldhu	r2,6(r2)
 10085fc:	e0bffd8d 	sth	r2,-10(fp)
	mask = 0x01 << 7;
 1008600:	00802004 	movi	r2,128
 1008604:	e0bffe0d 	sth	r2,-8(fp)
	if (bEnable) {
 1008608:	e0bfff17 	ldw	r2,-4(fp)
 100860c:	10000926 	beq	r2,zero,1008634 <AUDIO_DacEnableZeroCross+0x68>
		control_l |= mask;
 1008610:	e0fffd0b 	ldhu	r3,-12(fp)
 1008614:	e0bffe0b 	ldhu	r2,-8(fp)
 1008618:	1884b03a 	or	r2,r3,r2
 100861c:	e0bffd0d 	sth	r2,-12(fp)
		control_r |= mask;
 1008620:	e0fffd8b 	ldhu	r3,-10(fp)
 1008624:	e0bffe0b 	ldhu	r2,-8(fp)
 1008628:	1884b03a 	or	r2,r3,r2
 100862c:	e0bffd8d 	sth	r2,-10(fp)
 1008630:	00000c06 	br	1008664 <AUDIO_DacEnableZeroCross+0x98>
	} else {
		control_l &= ~mask;
 1008634:	e0bffe0b 	ldhu	r2,-8(fp)
 1008638:	0084303a 	nor	r2,zero,r2
 100863c:	1007883a 	mov	r3,r2
 1008640:	e0bffd0b 	ldhu	r2,-12(fp)
 1008644:	1884703a 	and	r2,r3,r2
 1008648:	e0bffd0d 	sth	r2,-12(fp)
		control_r &= ~mask;
 100864c:	e0bffe0b 	ldhu	r2,-8(fp)
 1008650:	0084303a 	nor	r2,zero,r2
 1008654:	1007883a 	mov	r3,r2
 1008658:	e0bffd8b 	ldhu	r2,-10(fp)
 100865c:	1884703a 	and	r2,r3,r2
 1008660:	e0bffd8d 	sth	r2,-10(fp)
	}
	bSuccess = aduio_RegWrite(2, control_l); // Left Line In: set left line in volume
 1008664:	e0bffd0b 	ldhu	r2,-12(fp)
 1008668:	100b883a 	mov	r5,r2
 100866c:	01000084 	movi	r4,2
 1008670:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008674:	e0bffc15 	stw	r2,-16(fp)
	if (bSuccess)
 1008678:	e0bffc17 	ldw	r2,-16(fp)
 100867c:	10000526 	beq	r2,zero,1008694 <AUDIO_DacEnableZeroCross+0xc8>
		bSuccess = aduio_RegWrite(3, control_r); // Left Line In: set left line in volume
 1008680:	e0bffd8b 	ldhu	r2,-10(fp)
 1008684:	100b883a 	mov	r5,r2
 1008688:	010000c4 	movi	r4,3
 100868c:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008690:	e0bffc15 	stw	r2,-16(fp)
	return bSuccess;
 1008694:	e0bffc17 	ldw	r2,-16(fp)
}
 1008698:	e037883a 	mov	sp,fp
 100869c:	dfc00117 	ldw	ra,4(sp)
 10086a0:	df000017 	ldw	fp,0(sp)
 10086a4:	dec00204 	addi	sp,sp,8
 10086a8:	f800283a 	ret

010086ac <AUDIO_DacEnableSoftMute>:

bool AUDIO_DacEnableSoftMute(bool bEnable) {
 10086ac:	defffb04 	addi	sp,sp,-20
 10086b0:	dfc00415 	stw	ra,16(sp)
 10086b4:	df000315 	stw	fp,12(sp)
 10086b8:	df000304 	addi	fp,sp,12
 10086bc:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	alt_u16 control;
	alt_u16 mask;
	control = reg_file[5];
 10086c0:	00804074 	movhi	r2,257
 10086c4:	10ba7b04 	addi	r2,r2,-5652
 10086c8:	1080028b 	ldhu	r2,10(r2)
 10086cc:	e0bffd0d 	sth	r2,-12(fp)
	mask = 0x01 << 3;
 10086d0:	00800204 	movi	r2,8
 10086d4:	e0bffd8d 	sth	r2,-10(fp)
	if (bEnable)
 10086d8:	e0bfff17 	ldw	r2,-4(fp)
 10086dc:	10000526 	beq	r2,zero,10086f4 <AUDIO_DacEnableSoftMute+0x48>
		control |= mask;
 10086e0:	e0fffd0b 	ldhu	r3,-12(fp)
 10086e4:	e0bffd8b 	ldhu	r2,-10(fp)
 10086e8:	1884b03a 	or	r2,r3,r2
 10086ec:	e0bffd0d 	sth	r2,-12(fp)
 10086f0:	00000606 	br	100870c <AUDIO_DacEnableSoftMute+0x60>
	else
		control &= ~mask;
 10086f4:	e0bffd8b 	ldhu	r2,-10(fp)
 10086f8:	0084303a 	nor	r2,zero,r2
 10086fc:	1007883a 	mov	r3,r2
 1008700:	e0bffd0b 	ldhu	r2,-12(fp)
 1008704:	1884703a 	and	r2,r3,r2
 1008708:	e0bffd0d 	sth	r2,-12(fp)
	bSuccess = aduio_RegWrite(5, control); // Left Line In: set left line in volume
 100870c:	e0bffd0b 	ldhu	r2,-12(fp)
 1008710:	100b883a 	mov	r5,r2
 1008714:	01000144 	movi	r4,5
 1008718:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 100871c:	e0bffe15 	stw	r2,-8(fp)
	return bSuccess;
 1008720:	e0bffe17 	ldw	r2,-8(fp)
}
 1008724:	e037883a 	mov	sp,fp
 1008728:	dfc00117 	ldw	ra,4(sp)
 100872c:	df000017 	ldw	fp,0(sp)
 1008730:	dec00204 	addi	sp,sp,8
 1008734:	f800283a 	ret

01008738 <AUDIO_MicMute>:

bool AUDIO_MicMute(bool bMute) {
 1008738:	defffb04 	addi	sp,sp,-20
 100873c:	dfc00415 	stw	ra,16(sp)
 1008740:	df000315 	stw	fp,12(sp)
 1008744:	df000304 	addi	fp,sp,12
 1008748:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	alt_u16 control;
	alt_u16 mask;
	control = reg_file[4];
 100874c:	00804074 	movhi	r2,257
 1008750:	10ba7b04 	addi	r2,r2,-5652
 1008754:	1080020b 	ldhu	r2,8(r2)
 1008758:	e0bffd0d 	sth	r2,-12(fp)
	mask = 0x01 << 1;
 100875c:	00800084 	movi	r2,2
 1008760:	e0bffd8d 	sth	r2,-10(fp)
	if (bMute)
 1008764:	e0bfff17 	ldw	r2,-4(fp)
 1008768:	10000526 	beq	r2,zero,1008780 <AUDIO_MicMute+0x48>
		control |= mask;
 100876c:	e0fffd0b 	ldhu	r3,-12(fp)
 1008770:	e0bffd8b 	ldhu	r2,-10(fp)
 1008774:	1884b03a 	or	r2,r3,r2
 1008778:	e0bffd0d 	sth	r2,-12(fp)
 100877c:	00000606 	br	1008798 <AUDIO_MicMute+0x60>
	else
		control &= ~mask;
 1008780:	e0bffd8b 	ldhu	r2,-10(fp)
 1008784:	0084303a 	nor	r2,zero,r2
 1008788:	1007883a 	mov	r3,r2
 100878c:	e0bffd0b 	ldhu	r2,-12(fp)
 1008790:	1884703a 	and	r2,r3,r2
 1008794:	e0bffd0d 	sth	r2,-12(fp)
	bSuccess = aduio_RegWrite(4, control); // Left Line In: set left line in volume
 1008798:	e0bffd0b 	ldhu	r2,-12(fp)
 100879c:	100b883a 	mov	r5,r2
 10087a0:	01000104 	movi	r4,4
 10087a4:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 10087a8:	e0bffe15 	stw	r2,-8(fp)
	return bSuccess;
 10087ac:	e0bffe17 	ldw	r2,-8(fp)
}
 10087b0:	e037883a 	mov	sp,fp
 10087b4:	dfc00117 	ldw	ra,4(sp)
 10087b8:	df000017 	ldw	fp,0(sp)
 10087bc:	dec00204 	addi	sp,sp,8
 10087c0:	f800283a 	ret

010087c4 <AUDIO_LineInMute>:

bool AUDIO_LineInMute(bool bMute) {
 10087c4:	defffa04 	addi	sp,sp,-24
 10087c8:	dfc00515 	stw	ra,20(sp)
 10087cc:	df000415 	stw	fp,16(sp)
 10087d0:	df000404 	addi	fp,sp,16
 10087d4:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	alt_u16 control_l, control_r;
	alt_u16 mask;
	control_l = reg_file[0];
 10087d8:	00804074 	movhi	r2,257
 10087dc:	10ba7b04 	addi	r2,r2,-5652
 10087e0:	1080000b 	ldhu	r2,0(r2)
 10087e4:	e0bffd0d 	sth	r2,-12(fp)
	control_r = reg_file[1];
 10087e8:	00804074 	movhi	r2,257
 10087ec:	10ba7b04 	addi	r2,r2,-5652
 10087f0:	1080008b 	ldhu	r2,2(r2)
 10087f4:	e0bffd8d 	sth	r2,-10(fp)
	mask = 0x01 << 7;
 10087f8:	00802004 	movi	r2,128
 10087fc:	e0bffe0d 	sth	r2,-8(fp)
	if (bMute) {
 1008800:	e0bfff17 	ldw	r2,-4(fp)
 1008804:	10000926 	beq	r2,zero,100882c <AUDIO_LineInMute+0x68>
		control_l |= mask;
 1008808:	e0fffd0b 	ldhu	r3,-12(fp)
 100880c:	e0bffe0b 	ldhu	r2,-8(fp)
 1008810:	1884b03a 	or	r2,r3,r2
 1008814:	e0bffd0d 	sth	r2,-12(fp)
		control_r |= mask;
 1008818:	e0fffd8b 	ldhu	r3,-10(fp)
 100881c:	e0bffe0b 	ldhu	r2,-8(fp)
 1008820:	1884b03a 	or	r2,r3,r2
 1008824:	e0bffd8d 	sth	r2,-10(fp)
 1008828:	00000c06 	br	100885c <AUDIO_LineInMute+0x98>
	} else {
		control_l &= ~mask;
 100882c:	e0bffe0b 	ldhu	r2,-8(fp)
 1008830:	0084303a 	nor	r2,zero,r2
 1008834:	1007883a 	mov	r3,r2
 1008838:	e0bffd0b 	ldhu	r2,-12(fp)
 100883c:	1884703a 	and	r2,r3,r2
 1008840:	e0bffd0d 	sth	r2,-12(fp)
		control_r &= ~mask;
 1008844:	e0bffe0b 	ldhu	r2,-8(fp)
 1008848:	0084303a 	nor	r2,zero,r2
 100884c:	1007883a 	mov	r3,r2
 1008850:	e0bffd8b 	ldhu	r2,-10(fp)
 1008854:	1884703a 	and	r2,r3,r2
 1008858:	e0bffd8d 	sth	r2,-10(fp)
	}
	bSuccess = aduio_RegWrite(0, control_l); // Left Line In: set left line in volume
 100885c:	e0bffd0b 	ldhu	r2,-12(fp)
 1008860:	100b883a 	mov	r5,r2
 1008864:	0009883a 	mov	r4,zero
 1008868:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 100886c:	e0bffc15 	stw	r2,-16(fp)
	if (bSuccess)
 1008870:	e0bffc17 	ldw	r2,-16(fp)
 1008874:	10000526 	beq	r2,zero,100888c <AUDIO_LineInMute+0xc8>
		bSuccess = aduio_RegWrite(1, control_r); // Left Line In: set left line in volume
 1008878:	e0bffd8b 	ldhu	r2,-10(fp)
 100887c:	100b883a 	mov	r5,r2
 1008880:	01000044 	movi	r4,1
 1008884:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008888:	e0bffc15 	stw	r2,-16(fp)
	return bSuccess;
 100888c:	e0bffc17 	ldw	r2,-16(fp)
}
 1008890:	e037883a 	mov	sp,fp
 1008894:	dfc00117 	ldw	ra,4(sp)
 1008898:	df000017 	ldw	fp,0(sp)
 100889c:	dec00204 	addi	sp,sp,8
 10088a0:	f800283a 	ret

010088a4 <AUDIO_SetInputSource>:

bool AUDIO_SetInputSource(alt_u8 InputSource) {
 10088a4:	defffb04 	addi	sp,sp,-20
 10088a8:	dfc00415 	stw	ra,16(sp)
 10088ac:	df000315 	stw	fp,12(sp)
 10088b0:	df000304 	addi	fp,sp,12
 10088b4:	2005883a 	mov	r2,r4
 10088b8:	e0bfff05 	stb	r2,-4(fp)
	bool bSuccess;
	alt_u16 control;
	alt_u16 mask;
	control = reg_file[4];
 10088bc:	00804074 	movhi	r2,257
 10088c0:	10ba7b04 	addi	r2,r2,-5652
 10088c4:	1080020b 	ldhu	r2,8(r2)
 10088c8:	e0bffd0d 	sth	r2,-12(fp)
	mask = 0x01 << 2;
 10088cc:	00800104 	movi	r2,4
 10088d0:	e0bffd8d 	sth	r2,-10(fp)
	if (InputSource == SOURCE_MIC)
 10088d4:	e0bfff03 	ldbu	r2,-4(fp)
 10088d8:	1000051e 	bne	r2,zero,10088f0 <AUDIO_SetInputSource+0x4c>
		control |= mask;
 10088dc:	e0fffd0b 	ldhu	r3,-12(fp)
 10088e0:	e0bffd8b 	ldhu	r2,-10(fp)
 10088e4:	1884b03a 	or	r2,r3,r2
 10088e8:	e0bffd0d 	sth	r2,-12(fp)
 10088ec:	00000606 	br	1008908 <AUDIO_SetInputSource+0x64>
	else
		control &= ~mask;
 10088f0:	e0bffd8b 	ldhu	r2,-10(fp)
 10088f4:	0084303a 	nor	r2,zero,r2
 10088f8:	1007883a 	mov	r3,r2
 10088fc:	e0bffd0b 	ldhu	r2,-12(fp)
 1008900:	1884703a 	and	r2,r3,r2
 1008904:	e0bffd0d 	sth	r2,-12(fp)
	bSuccess = aduio_RegWrite(4, control); // Left Line In: set left line in volume
 1008908:	e0bffd0b 	ldhu	r2,-12(fp)
 100890c:	100b883a 	mov	r5,r2
 1008910:	01000104 	movi	r4,4
 1008914:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008918:	e0bffe15 	stw	r2,-8(fp)
	return bSuccess;
 100891c:	e0bffe17 	ldw	r2,-8(fp)
}
 1008920:	e037883a 	mov	sp,fp
 1008924:	dfc00117 	ldw	ra,4(sp)
 1008928:	df000017 	ldw	fp,0(sp)
 100892c:	dec00204 	addi	sp,sp,8
 1008930:	f800283a 	ret

01008934 <AUDIO_SetSampleRate>:

// See datasheet page 39
bool AUDIO_SetSampleRate(alt_u8 SampleRate) {
 1008934:	defffb04 	addi	sp,sp,-20
 1008938:	dfc00415 	stw	ra,16(sp)
 100893c:	df000315 	stw	fp,12(sp)
 1008940:	df000304 	addi	fp,sp,12
 1008944:	2005883a 	mov	r2,r4
 1008948:	e0bfff05 	stb	r2,-4(fp)
	bool bSuccess;
	alt_u16 control;
	control = 0;
 100894c:	e03ffd0d 	sth	zero,-12(fp)

	switch (SampleRate) {
 1008950:	e0bfff03 	ldbu	r2,-4(fp)
 1008954:	10c001e8 	cmpgeui	r3,r2,7
 1008958:	1800211e 	bne	r3,zero,10089e0 <AUDIO_SetSampleRate+0xac>
 100895c:	100690ba 	slli	r3,r2,2
 1008960:	00804074 	movhi	r2,257
 1008964:	10a25d04 	addi	r2,r2,-30348
 1008968:	1885883a 	add	r2,r3,r2
 100896c:	10800017 	ldw	r2,0(r2)
 1008970:	1000683a 	jmp	r2
 1008974:	01008990 	cmplti	r4,zero,550
 1008978:	01008998 	cmpnei	r4,zero,550
 100897c:	010089a4 	muli	r4,zero,550
 1008980:	010089b0 	cmpltui	r4,zero,550
 1008984:	010089bc 	xorhi	r4,zero,550
 1008988:	010089c8 	cmpgei	r4,zero,551
 100898c:	010089d4 	movui	r4,551
	// MCLK = 18.432
	case RATE_ADC48K_DAC48K:
		control = (0x0) << 2;
 1008990:	e03ffd0d 	sth	zero,-12(fp)
		break;
 1008994:	00001206 	br	10089e0 <AUDIO_SetSampleRate+0xac>
	case RATE_ADC48K_DAC8K:
		control = (0x1) << 2;
 1008998:	00800104 	movi	r2,4
 100899c:	e0bffd0d 	sth	r2,-12(fp)
		break;
 10089a0:	00000f06 	br	10089e0 <AUDIO_SetSampleRate+0xac>
	case RATE_ADC8K_DAC48K:
		control = (0x2) << 2;
 10089a4:	00800204 	movi	r2,8
 10089a8:	e0bffd0d 	sth	r2,-12(fp)
		break;
 10089ac:	00000c06 	br	10089e0 <AUDIO_SetSampleRate+0xac>
	case RATE_ADC8K_DAC8K:
		control = (0x3) << 2;
 10089b0:	00800304 	movi	r2,12
 10089b4:	e0bffd0d 	sth	r2,-12(fp)
		break;
 10089b8:	00000906 	br	10089e0 <AUDIO_SetSampleRate+0xac>
	case RATE_ADC32K_DAC32K:
		control = (0x6) << 2;
 10089bc:	00800604 	movi	r2,24
 10089c0:	e0bffd0d 	sth	r2,-12(fp)
		break;
 10089c4:	00000606 	br	10089e0 <AUDIO_SetSampleRate+0xac>
	case RATE_ADC96K_DAC96K:
		control = (0x7) << 2;
 10089c8:	00800704 	movi	r2,28
 10089cc:	e0bffd0d 	sth	r2,-12(fp)
		break;
 10089d0:	00000306 	br	10089e0 <AUDIO_SetSampleRate+0xac>
	case RATE_ADC44K1_DAC44K1:
		control = (0x8) << 2;
 10089d4:	00800804 	movi	r2,32
 10089d8:	e0bffd0d 	sth	r2,-12(fp)
		break;
 10089dc:	0001883a 	nop
		// MCLK = 11.2896
		//  case RATE_ADC44K1_DAC8K: control = (0x9) << 2; break;
		//  case RATE_ADC8K_DAC44K1: control = (0xA) << 2; break;
	}
	control |= 0x02; // BOSR=1 (384fs = 384*48k = 18.432M)
 10089e0:	e0bffd0b 	ldhu	r2,-12(fp)
 10089e4:	10800094 	ori	r2,r2,2
 10089e8:	e0bffd0d 	sth	r2,-12(fp)

	bSuccess = aduio_RegWrite(8, control); // Left Line In: set left line in volume
 10089ec:	e0bffd0b 	ldhu	r2,-12(fp)
 10089f0:	100b883a 	mov	r5,r2
 10089f4:	01000204 	movi	r4,8
 10089f8:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 10089fc:	e0bffe15 	stw	r2,-8(fp)
	return bSuccess;
 1008a00:	e0bffe17 	ldw	r2,-8(fp)
}
 1008a04:	e037883a 	mov	sp,fp
 1008a08:	dfc00117 	ldw	ra,4(sp)
 1008a0c:	df000017 	ldw	fp,0(sp)
 1008a10:	dec00204 	addi	sp,sp,8
 1008a14:	f800283a 	ret

01008a18 <AUDIO_SetLineInVol>:

bool AUDIO_SetLineInVol(alt_u16 l_vol, alt_u16 r_vol) {
 1008a18:	defffa04 	addi	sp,sp,-24
 1008a1c:	dfc00515 	stw	ra,20(sp)
 1008a20:	df000415 	stw	fp,16(sp)
 1008a24:	df000404 	addi	fp,sp,16
 1008a28:	2007883a 	mov	r3,r4
 1008a2c:	2805883a 	mov	r2,r5
 1008a30:	e0fffe0d 	sth	r3,-8(fp)
 1008a34:	e0bfff0d 	sth	r2,-4(fp)
	bool bSuccess;
	alt_u16 control;

	// left
	control = reg_file[0];
 1008a38:	00804074 	movhi	r2,257
 1008a3c:	10ba7b04 	addi	r2,r2,-5652
 1008a40:	1080000b 	ldhu	r2,0(r2)
 1008a44:	e0bffd0d 	sth	r2,-12(fp)
	control &= 0xFFE0;
 1008a48:	e0fffd0b 	ldhu	r3,-12(fp)
 1008a4c:	00bff804 	movi	r2,-32
 1008a50:	1884703a 	and	r2,r3,r2
 1008a54:	e0bffd0d 	sth	r2,-12(fp)
	control += l_vol & 0x1F;
 1008a58:	e0bffe0b 	ldhu	r2,-8(fp)
 1008a5c:	108007cc 	andi	r2,r2,31
 1008a60:	1007883a 	mov	r3,r2
 1008a64:	e0bffd0b 	ldhu	r2,-12(fp)
 1008a68:	1885883a 	add	r2,r3,r2
 1008a6c:	e0bffd0d 	sth	r2,-12(fp)
	bSuccess = aduio_RegWrite(0, control);
 1008a70:	e0bffd0b 	ldhu	r2,-12(fp)
 1008a74:	100b883a 	mov	r5,r2
 1008a78:	0009883a 	mov	r4,zero
 1008a7c:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008a80:	e0bffc15 	stw	r2,-16(fp)

	if (bSuccess) {
 1008a84:	e0bffc17 	ldw	r2,-16(fp)
 1008a88:	10001326 	beq	r2,zero,1008ad8 <AUDIO_SetLineInVol+0xc0>
		// right
		control = reg_file[1];
 1008a8c:	00804074 	movhi	r2,257
 1008a90:	10ba7b04 	addi	r2,r2,-5652
 1008a94:	1080008b 	ldhu	r2,2(r2)
 1008a98:	e0bffd0d 	sth	r2,-12(fp)
		control &= 0xFFE0;
 1008a9c:	e0fffd0b 	ldhu	r3,-12(fp)
 1008aa0:	00bff804 	movi	r2,-32
 1008aa4:	1884703a 	and	r2,r3,r2
 1008aa8:	e0bffd0d 	sth	r2,-12(fp)
		control += r_vol & 0x1F;
 1008aac:	e0bfff0b 	ldhu	r2,-4(fp)
 1008ab0:	108007cc 	andi	r2,r2,31
 1008ab4:	1007883a 	mov	r3,r2
 1008ab8:	e0bffd0b 	ldhu	r2,-12(fp)
 1008abc:	1885883a 	add	r2,r3,r2
 1008ac0:	e0bffd0d 	sth	r2,-12(fp)
		bSuccess = aduio_RegWrite(1, control);
 1008ac4:	e0bffd0b 	ldhu	r2,-12(fp)
 1008ac8:	100b883a 	mov	r5,r2
 1008acc:	01000044 	movi	r4,1
 1008ad0:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008ad4:	e0bffc15 	stw	r2,-16(fp)
	}

	AUDIO_DEBUG(("[AUDIO] set Line-In vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));
	return bSuccess;
 1008ad8:	e0bffc17 	ldw	r2,-16(fp)
}
 1008adc:	e037883a 	mov	sp,fp
 1008ae0:	dfc00117 	ldw	ra,4(sp)
 1008ae4:	df000017 	ldw	fp,0(sp)
 1008ae8:	dec00204 	addi	sp,sp,8
 1008aec:	f800283a 	ret

01008af0 <AUDIO_SetLineOutVol>:

bool AUDIO_SetLineOutVol(alt_u16 l_vol, alt_u16 r_vol) {
 1008af0:	defffa04 	addi	sp,sp,-24
 1008af4:	dfc00515 	stw	ra,20(sp)
 1008af8:	df000415 	stw	fp,16(sp)
 1008afc:	df000404 	addi	fp,sp,16
 1008b00:	2007883a 	mov	r3,r4
 1008b04:	2805883a 	mov	r2,r5
 1008b08:	e0fffe0d 	sth	r3,-8(fp)
 1008b0c:	e0bfff0d 	sth	r2,-4(fp)
	bool bSuccess;
	alt_u16 control;

	// left
	control = reg_file[2];
 1008b10:	00804074 	movhi	r2,257
 1008b14:	10ba7b04 	addi	r2,r2,-5652
 1008b18:	1080010b 	ldhu	r2,4(r2)
 1008b1c:	e0bffd0d 	sth	r2,-12(fp)
	control &= 0xFF80;
 1008b20:	e0fffd0b 	ldhu	r3,-12(fp)
 1008b24:	00bfe004 	movi	r2,-128
 1008b28:	1884703a 	and	r2,r3,r2
 1008b2c:	e0bffd0d 	sth	r2,-12(fp)
	control += l_vol & 0x7F;
 1008b30:	e0bffe0b 	ldhu	r2,-8(fp)
 1008b34:	10801fcc 	andi	r2,r2,127
 1008b38:	1007883a 	mov	r3,r2
 1008b3c:	e0bffd0b 	ldhu	r2,-12(fp)
 1008b40:	1885883a 	add	r2,r3,r2
 1008b44:	e0bffd0d 	sth	r2,-12(fp)
	bSuccess = aduio_RegWrite(2, control);
 1008b48:	e0bffd0b 	ldhu	r2,-12(fp)
 1008b4c:	100b883a 	mov	r5,r2
 1008b50:	01000084 	movi	r4,2
 1008b54:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008b58:	e0bffc15 	stw	r2,-16(fp)

	if (bSuccess) {
 1008b5c:	e0bffc17 	ldw	r2,-16(fp)
 1008b60:	10001326 	beq	r2,zero,1008bb0 <AUDIO_SetLineOutVol+0xc0>
		// right
		control = reg_file[3];
 1008b64:	00804074 	movhi	r2,257
 1008b68:	10ba7b04 	addi	r2,r2,-5652
 1008b6c:	1080018b 	ldhu	r2,6(r2)
 1008b70:	e0bffd0d 	sth	r2,-12(fp)
		control &= 0xFF80;
 1008b74:	e0fffd0b 	ldhu	r3,-12(fp)
 1008b78:	00bfe004 	movi	r2,-128
 1008b7c:	1884703a 	and	r2,r3,r2
 1008b80:	e0bffd0d 	sth	r2,-12(fp)
		control += r_vol & 0x7F;
 1008b84:	e0bfff0b 	ldhu	r2,-4(fp)
 1008b88:	10801fcc 	andi	r2,r2,127
 1008b8c:	1007883a 	mov	r3,r2
 1008b90:	e0bffd0b 	ldhu	r2,-12(fp)
 1008b94:	1885883a 	add	r2,r3,r2
 1008b98:	e0bffd0d 	sth	r2,-12(fp)
		bSuccess = aduio_RegWrite(3, control);
 1008b9c:	e0bffd0b 	ldhu	r2,-12(fp)
 1008ba0:	100b883a 	mov	r5,r2
 1008ba4:	010000c4 	movi	r4,3
 1008ba8:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008bac:	e0bffc15 	stw	r2,-16(fp)
	}

	AUDIO_DEBUG(("[AUDIO] set Line-Out vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));

	return bSuccess;
 1008bb0:	e0bffc17 	ldw	r2,-16(fp)
}
 1008bb4:	e037883a 	mov	sp,fp
 1008bb8:	dfc00117 	ldw	ra,4(sp)
 1008bbc:	df000017 	ldw	fp,0(sp)
 1008bc0:	dec00204 	addi	sp,sp,8
 1008bc4:	f800283a 	ret

01008bc8 <AUDIO_EnableByPass>:

bool AUDIO_EnableByPass(bool bEnable) {
 1008bc8:	defffb04 	addi	sp,sp,-20
 1008bcc:	dfc00415 	stw	ra,16(sp)
 1008bd0:	df000315 	stw	fp,12(sp)
 1008bd4:	df000304 	addi	fp,sp,12
 1008bd8:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	alt_u16 control;
	alt_u16 mask;
	control = reg_file[4];
 1008bdc:	00804074 	movhi	r2,257
 1008be0:	10ba7b04 	addi	r2,r2,-5652
 1008be4:	1080020b 	ldhu	r2,8(r2)
 1008be8:	e0bffd0d 	sth	r2,-12(fp)
	mask = 0x01 << 3;
 1008bec:	00800204 	movi	r2,8
 1008bf0:	e0bffd8d 	sth	r2,-10(fp)
	if (bEnable)
 1008bf4:	e0bfff17 	ldw	r2,-4(fp)
 1008bf8:	10000526 	beq	r2,zero,1008c10 <AUDIO_EnableByPass+0x48>
		control |= mask;
 1008bfc:	e0fffd0b 	ldhu	r3,-12(fp)
 1008c00:	e0bffd8b 	ldhu	r2,-10(fp)
 1008c04:	1884b03a 	or	r2,r3,r2
 1008c08:	e0bffd0d 	sth	r2,-12(fp)
 1008c0c:	00000606 	br	1008c28 <AUDIO_EnableByPass+0x60>
	else
		control &= ~mask;
 1008c10:	e0bffd8b 	ldhu	r2,-10(fp)
 1008c14:	0084303a 	nor	r2,zero,r2
 1008c18:	1007883a 	mov	r3,r2
 1008c1c:	e0bffd0b 	ldhu	r2,-12(fp)
 1008c20:	1884703a 	and	r2,r3,r2
 1008c24:	e0bffd0d 	sth	r2,-12(fp)
	bSuccess = aduio_RegWrite(4, control);
 1008c28:	e0bffd0b 	ldhu	r2,-12(fp)
 1008c2c:	100b883a 	mov	r5,r2
 1008c30:	01000104 	movi	r4,4
 1008c34:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008c38:	e0bffe15 	stw	r2,-8(fp)
	return bSuccess;
 1008c3c:	e0bffe17 	ldw	r2,-8(fp)
}
 1008c40:	e037883a 	mov	sp,fp
 1008c44:	dfc00117 	ldw	ra,4(sp)
 1008c48:	df000017 	ldw	fp,0(sp)
 1008c4c:	dec00204 	addi	sp,sp,8
 1008c50:	f800283a 	ret

01008c54 <AUDIO_EnableSiteTone>:

bool AUDIO_EnableSiteTone(bool bEnable) {
 1008c54:	defffb04 	addi	sp,sp,-20
 1008c58:	dfc00415 	stw	ra,16(sp)
 1008c5c:	df000315 	stw	fp,12(sp)
 1008c60:	df000304 	addi	fp,sp,12
 1008c64:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	alt_u16 control;
	alt_u16 mask;
	control = reg_file[4];
 1008c68:	00804074 	movhi	r2,257
 1008c6c:	10ba7b04 	addi	r2,r2,-5652
 1008c70:	1080020b 	ldhu	r2,8(r2)
 1008c74:	e0bffd0d 	sth	r2,-12(fp)
	mask = 0x01 << 5;
 1008c78:	00800804 	movi	r2,32
 1008c7c:	e0bffd8d 	sth	r2,-10(fp)
	if (bEnable)
 1008c80:	e0bfff17 	ldw	r2,-4(fp)
 1008c84:	10000526 	beq	r2,zero,1008c9c <AUDIO_EnableSiteTone+0x48>
		control |= mask;
 1008c88:	e0fffd0b 	ldhu	r3,-12(fp)
 1008c8c:	e0bffd8b 	ldhu	r2,-10(fp)
 1008c90:	1884b03a 	or	r2,r3,r2
 1008c94:	e0bffd0d 	sth	r2,-12(fp)
 1008c98:	00000606 	br	1008cb4 <AUDIO_EnableSiteTone+0x60>
	else
		control &= ~mask;
 1008c9c:	e0bffd8b 	ldhu	r2,-10(fp)
 1008ca0:	0084303a 	nor	r2,zero,r2
 1008ca4:	1007883a 	mov	r3,r2
 1008ca8:	e0bffd0b 	ldhu	r2,-12(fp)
 1008cac:	1884703a 	and	r2,r3,r2
 1008cb0:	e0bffd0d 	sth	r2,-12(fp)
	bSuccess = aduio_RegWrite(4, control);
 1008cb4:	e0bffd0b 	ldhu	r2,-12(fp)
 1008cb8:	100b883a 	mov	r5,r2
 1008cbc:	01000104 	movi	r4,4
 1008cc0:	1008ce00 	call	1008ce0 <aduio_RegWrite>
 1008cc4:	e0bffe15 	stw	r2,-8(fp)
	return bSuccess;
 1008cc8:	e0bffe17 	ldw	r2,-8(fp)
}
 1008ccc:	e037883a 	mov	sp,fp
 1008cd0:	dfc00117 	ldw	ra,4(sp)
 1008cd4:	df000017 	ldw	fp,0(sp)
 1008cd8:	dec00204 	addi	sp,sp,8
 1008cdc:	f800283a 	ret

01008ce0 <aduio_RegWrite>:

/////////////////////////////////////////////////////////////////////////
///////////// Interla function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool aduio_RegWrite(alt_u8 reg_index, alt_u16 data16) {
 1008ce0:	defff904 	addi	sp,sp,-28
 1008ce4:	dfc00615 	stw	ra,24(sp)
 1008ce8:	df000515 	stw	fp,20(sp)
 1008cec:	df000504 	addi	fp,sp,20
 1008cf0:	2007883a 	mov	r3,r4
 1008cf4:	2805883a 	mov	r2,r5
 1008cf8:	e0fffe05 	stb	r3,-8(fp)
 1008cfc:	e0bfff0d 	sth	r2,-4(fp)
	bool bSuccess;
	alt_u8 data, control;
	if (reg_index <= 10)
 1008d00:	e0bffe03 	ldbu	r2,-8(fp)
 1008d04:	108002e8 	cmpgeui	r2,r2,11
 1008d08:	1000071e 	bne	r2,zero,1008d28 <aduio_RegWrite+0x48>
		reg_file[reg_index] = data16;
 1008d0c:	e0fffe03 	ldbu	r3,-8(fp)
 1008d10:	00804074 	movhi	r2,257
 1008d14:	10ba7b04 	addi	r2,r2,-5652
 1008d18:	18c7883a 	add	r3,r3,r3
 1008d1c:	10c5883a 	add	r2,r2,r3
 1008d20:	e0ffff0b 	ldhu	r3,-4(fp)
 1008d24:	10c0000d 	sth	r3,0(r2)
	data = data16 & 0xFF;
 1008d28:	e0bfff0b 	ldhu	r2,-4(fp)
 1008d2c:	e0bffc05 	stb	r2,-16(fp)
	control = (reg_index << 1) & 0xFE;
 1008d30:	e0bffe03 	ldbu	r2,-8(fp)
 1008d34:	1085883a 	add	r2,r2,r2
 1008d38:	e0bffc45 	stb	r2,-15(fp)
	control |= ((data16 >> 8) & 0x01);
 1008d3c:	e0bfff0b 	ldhu	r2,-4(fp)
 1008d40:	1004d23a 	srli	r2,r2,8
 1008d44:	1080004c 	andi	r2,r2,1
 1008d48:	1007883a 	mov	r3,r2
 1008d4c:	e0bffc43 	ldbu	r2,-15(fp)
 1008d50:	1884b03a 	or	r2,r3,r2
 1008d54:	e0bffc45 	stb	r2,-15(fp)
	AUDIO_DEBUG(("[AUDIO] set audio reg[%02d] = %04Xh\r\n", reg_index, data16));
	bSuccess = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, I2C_AUDIO_ADDR, control,
 1008d58:	e0fffc43 	ldbu	r3,-15(fp)
 1008d5c:	e0bffc03 	ldbu	r2,-16(fp)
 1008d60:	d8800015 	stw	r2,0(sp)
 1008d64:	180f883a 	mov	r7,r3
 1008d68:	01800d04 	movi	r6,52
 1008d6c:	000b883a 	mov	r5,zero
 1008d70:	01000404 	movi	r4,16
 1008d74:	1008ed00 	call	1008ed0 <I2C_Write>
 1008d78:	e0bffd15 	stw	r2,-12(fp)
			data);
	if (!bSuccess)
		AUDIO_DEBUG(("[AUDIO] write reg fail!!!!\r\n"));
	usleep(50 * 1000);  // wait audio chip read        
 1008d7c:	0130d414 	movui	r4,50000
 1008d80:	1009bf00 	call	1009bf0 <usleep>
	return bSuccess;
 1008d84:	e0bffd17 	ldw	r2,-12(fp)
}
 1008d88:	e037883a 	mov	sp,fp
 1008d8c:	dfc00117 	ldw	ra,4(sp)
 1008d90:	df000017 	ldw	fp,0(sp)
 1008d94:	dec00204 	addi	sp,sp,8
 1008d98:	f800283a 	ret

01008d9c <AUDIO_DacFifoNotFull>:

/////////////////////////////////////////////////////////////////////////
///////////// Audio Play & Record ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// check whether the dac-fifo is full.
bool AUDIO_DacFifoNotFull(void) {
 1008d9c:	defffe04 	addi	sp,sp,-8
 1008da0:	df000115 	stw	fp,4(sp)
 1008da4:	df000104 	addi	fp,sp,4
	bool bReady;
	bReady = AUDIO_DAC_FULL() ? FALSE : TRUE;
 1008da8:	00800504 	movi	r2,20
 1008dac:	10800037 	ldwio	r2,0(r2)
 1008db0:	1080004c 	andi	r2,r2,1
 1008db4:	1005003a 	cmpeq	r2,r2,zero
 1008db8:	10803fcc 	andi	r2,r2,255
 1008dbc:	e0bfff15 	stw	r2,-4(fp)
	return bReady;
 1008dc0:	e0bfff17 	ldw	r2,-4(fp)
}
 1008dc4:	e037883a 	mov	sp,fp
 1008dc8:	df000017 	ldw	fp,0(sp)
 1008dcc:	dec00104 	addi	sp,sp,4
 1008dd0:	f800283a 	ret

01008dd4 <AUDIO_DacFifoSetData>:

// call AUDIO_PlayIsReady to make sure the fifo is not full before call this function 
void AUDIO_DacFifoSetData(short ch_left, short ch_right) {
 1008dd4:	defffd04 	addi	sp,sp,-12
 1008dd8:	df000215 	stw	fp,8(sp)
 1008ddc:	df000204 	addi	fp,sp,8
 1008de0:	2007883a 	mov	r3,r4
 1008de4:	2805883a 	mov	r2,r5
 1008de8:	e0fffe0d 	sth	r3,-8(fp)
 1008dec:	e0bfff0d 	sth	r2,-4(fp)
	AUDIO_DAC_WRITE_L(ch_left);
 1008df0:	e0bffe0f 	ldh	r2,-8(fp)
 1008df4:	0007883a 	mov	r3,zero
 1008df8:	18800035 	stwio	r2,0(r3)
	AUDIO_DAC_WRITE_R(ch_right);
 1008dfc:	e0ffff0f 	ldh	r3,-4(fp)
 1008e00:	00800104 	movi	r2,4
 1008e04:	10c00035 	stwio	r3,0(r2)
}
 1008e08:	0001883a 	nop
 1008e0c:	e037883a 	mov	sp,fp
 1008e10:	df000017 	ldw	fp,0(sp)
 1008e14:	dec00104 	addi	sp,sp,4
 1008e18:	f800283a 	ret

01008e1c <AUDIO_AdcFifoNotEmpty>:

// wheck whether there is data available in adc-fifo
bool AUDIO_AdcFifoNotEmpty(void) {
 1008e1c:	defffe04 	addi	sp,sp,-8
 1008e20:	df000115 	stw	fp,4(sp)
 1008e24:	df000104 	addi	fp,sp,4
	bool bReady;
	bReady = AUDIO_ADC_EMPTY() ? FALSE : TRUE;
 1008e28:	00800504 	movi	r2,20
 1008e2c:	10800037 	ldwio	r2,0(r2)
 1008e30:	1080008c 	andi	r2,r2,2
 1008e34:	1005003a 	cmpeq	r2,r2,zero
 1008e38:	10803fcc 	andi	r2,r2,255
 1008e3c:	e0bfff15 	stw	r2,-4(fp)
	return bReady;
 1008e40:	e0bfff17 	ldw	r2,-4(fp)
}
 1008e44:	e037883a 	mov	sp,fp
 1008e48:	df000017 	ldw	fp,0(sp)
 1008e4c:	dec00104 	addi	sp,sp,4
 1008e50:	f800283a 	ret

01008e54 <AUDIO_AdcFifoGetData>:

// make sure the data is available before call this fucntion
void AUDIO_AdcFifoGetData(short *pch_left, short *pch_right) {
 1008e54:	defffd04 	addi	sp,sp,-12
 1008e58:	df000215 	stw	fp,8(sp)
 1008e5c:	df000204 	addi	fp,sp,8
 1008e60:	e13ffe15 	stw	r4,-8(fp)
 1008e64:	e17fff15 	stw	r5,-4(fp)
	*pch_left = AUDIO_ADC_READ_L();
 1008e68:	00800204 	movi	r2,8
 1008e6c:	10800037 	ldwio	r2,0(r2)
 1008e70:	1007883a 	mov	r3,r2
 1008e74:	e0bffe17 	ldw	r2,-8(fp)
 1008e78:	10c0000d 	sth	r3,0(r2)
	*pch_right = AUDIO_ADC_READ_R();
 1008e7c:	00800304 	movi	r2,12
 1008e80:	10800037 	ldwio	r2,0(r2)
 1008e84:	1007883a 	mov	r3,r2
 1008e88:	e0bfff17 	ldw	r2,-4(fp)
 1008e8c:	10c0000d 	sth	r3,0(r2)

}
 1008e90:	0001883a 	nop
 1008e94:	e037883a 	mov	sp,fp
 1008e98:	df000017 	ldw	fp,0(sp)
 1008e9c:	dec00104 	addi	sp,sp,4
 1008ea0:	f800283a 	ret

01008ea4 <AUDIO_FifoClear>:

void AUDIO_FifoClear(void) {
 1008ea4:	deffff04 	addi	sp,sp,-4
 1008ea8:	df000015 	stw	fp,0(sp)
 1008eac:	d839883a 	mov	fp,sp
	AUDIO_FIFO_CLEAR();
 1008eb0:	00c00044 	movi	r3,1
 1008eb4:	00800404 	movi	r2,16
 1008eb8:	10c00035 	stwio	r3,0(r2)
}
 1008ebc:	0001883a 	nop
 1008ec0:	e037883a 	mov	sp,fp
 1008ec4:	df000017 	ldw	fp,0(sp)
 1008ec8:	dec00104 	addi	sp,sp,4
 1008ecc:	f800283a 	ret

01008ed0 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 1008ed0:	defff804 	addi	sp,sp,-32
 1008ed4:	dfc00715 	stw	ra,28(sp)
 1008ed8:	df000615 	stw	fp,24(sp)
 1008edc:	df000604 	addi	fp,sp,24
 1008ee0:	e13ffb15 	stw	r4,-20(fp)
 1008ee4:	e17ffc15 	stw	r5,-16(fp)
 1008ee8:	3009883a 	mov	r4,r6
 1008eec:	3807883a 	mov	r3,r7
 1008ef0:	e0800217 	ldw	r2,8(fp)
 1008ef4:	e13ffd05 	stb	r4,-12(fp)
 1008ef8:	e0fffe05 	stb	r3,-8(fp)
 1008efc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 1008f00:	00800044 	movi	r2,1
 1008f04:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 1008f08:	e17ffc17 	ldw	r5,-16(fp)
 1008f0c:	e13ffb17 	ldw	r4,-20(fp)
 1008f10:	10092000 	call	1009200 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 1008f14:	e0bffd03 	ldbu	r2,-12(fp)
 1008f18:	10803fcc 	andi	r2,r2,255
 1008f1c:	100d883a 	mov	r6,r2
 1008f20:	e17ffc17 	ldw	r5,-16(fp)
 1008f24:	e13ffb17 	ldw	r4,-20(fp)
 1008f28:	10093040 	call	1009304 <i2c_write>
 1008f2c:	1000011e 	bne	r2,zero,1008f34 <I2C_Write+0x64>
        bSuccess = FALSE;
 1008f30:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 1008f34:	e0bffa17 	ldw	r2,-24(fp)
 1008f38:	10000726 	beq	r2,zero,1008f58 <I2C_Write+0x88>
 1008f3c:	e0bffe03 	ldbu	r2,-8(fp)
 1008f40:	100d883a 	mov	r6,r2
 1008f44:	e17ffc17 	ldw	r5,-16(fp)
 1008f48:	e13ffb17 	ldw	r4,-20(fp)
 1008f4c:	10093040 	call	1009304 <i2c_write>
 1008f50:	1000011e 	bne	r2,zero,1008f58 <I2C_Write+0x88>
        bSuccess = FALSE;
 1008f54:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 1008f58:	e0bffa17 	ldw	r2,-24(fp)
 1008f5c:	10000726 	beq	r2,zero,1008f7c <I2C_Write+0xac>
 1008f60:	e0bfff03 	ldbu	r2,-4(fp)
 1008f64:	100d883a 	mov	r6,r2
 1008f68:	e17ffc17 	ldw	r5,-16(fp)
 1008f6c:	e13ffb17 	ldw	r4,-20(fp)
 1008f70:	10093040 	call	1009304 <i2c_write>
 1008f74:	1000011e 	bne	r2,zero,1008f7c <I2C_Write+0xac>
        bSuccess = FALSE;
 1008f78:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 1008f7c:	e17ffc17 	ldw	r5,-16(fp)
 1008f80:	e13ffb17 	ldw	r4,-20(fp)
 1008f84:	100928c0 	call	100928c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 1008f88:	0106d604 	movi	r4,7000
 1008f8c:	1009bf00 	call	1009bf0 <usleep>
    
    return bSuccess;
 1008f90:	e0bffa17 	ldw	r2,-24(fp)

    
}
 1008f94:	e037883a 	mov	sp,fp
 1008f98:	dfc00117 	ldw	ra,4(sp)
 1008f9c:	df000017 	ldw	fp,0(sp)
 1008fa0:	dec00204 	addi	sp,sp,8
 1008fa4:	f800283a 	ret

01008fa8 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 1008fa8:	defff904 	addi	sp,sp,-28
 1008fac:	dfc00615 	stw	ra,24(sp)
 1008fb0:	df000515 	stw	fp,20(sp)
 1008fb4:	df000504 	addi	fp,sp,20
 1008fb8:	e13ffc15 	stw	r4,-16(fp)
 1008fbc:	e17ffd15 	stw	r5,-12(fp)
 1008fc0:	3007883a 	mov	r3,r6
 1008fc4:	3805883a 	mov	r2,r7
 1008fc8:	e0fffe05 	stb	r3,-8(fp)
 1008fcc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 1008fd0:	00800044 	movi	r2,1
 1008fd4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 1008fd8:	e17ffd17 	ldw	r5,-12(fp)
 1008fdc:	e13ffc17 	ldw	r4,-16(fp)
 1008fe0:	10092000 	call	1009200 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 1008fe4:	e0bffe03 	ldbu	r2,-8(fp)
 1008fe8:	10803fcc 	andi	r2,r2,255
 1008fec:	100d883a 	mov	r6,r2
 1008ff0:	e17ffd17 	ldw	r5,-12(fp)
 1008ff4:	e13ffc17 	ldw	r4,-16(fp)
 1008ff8:	10093040 	call	1009304 <i2c_write>
 1008ffc:	1000011e 	bne	r2,zero,1009004 <I2C_Read+0x5c>
        bSuccess = FALSE;
 1009000:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 1009004:	e0bffb17 	ldw	r2,-20(fp)
 1009008:	10000726 	beq	r2,zero,1009028 <I2C_Read+0x80>
 100900c:	e0bfff03 	ldbu	r2,-4(fp)
 1009010:	100d883a 	mov	r6,r2
 1009014:	e17ffd17 	ldw	r5,-12(fp)
 1009018:	e13ffc17 	ldw	r4,-16(fp)
 100901c:	10093040 	call	1009304 <i2c_write>
 1009020:	1000011e 	bne	r2,zero,1009028 <I2C_Read+0x80>
        bSuccess = FALSE;
 1009024:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
 1009028:	e17ffd17 	ldw	r5,-12(fp)
 100902c:	e13ffc17 	ldw	r4,-16(fp)
 1009030:	10092000 	call	1009200 <i2c_start>
    DeviceAddr |= 1; // Read
 1009034:	e0bffe03 	ldbu	r2,-8(fp)
 1009038:	10800054 	ori	r2,r2,1
 100903c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 1009040:	e0bffb17 	ldw	r2,-20(fp)
 1009044:	10000826 	beq	r2,zero,1009068 <I2C_Read+0xc0>
 1009048:	e0bffe03 	ldbu	r2,-8(fp)
 100904c:	10803fcc 	andi	r2,r2,255
 1009050:	100d883a 	mov	r6,r2
 1009054:	e17ffd17 	ldw	r5,-12(fp)
 1009058:	e13ffc17 	ldw	r4,-16(fp)
 100905c:	10093040 	call	1009304 <i2c_write>
 1009060:	1000011e 	bne	r2,zero,1009068 <I2C_Read+0xc0>
        bSuccess = FALSE;
 1009064:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 1009068:	e0bffb17 	ldw	r2,-20(fp)
 100906c:	10000526 	beq	r2,zero,1009084 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 1009070:	000f883a 	mov	r7,zero
 1009074:	e1800217 	ldw	r6,8(fp)
 1009078:	e17ffd17 	ldw	r5,-12(fp)
 100907c:	e13ffc17 	ldw	r4,-16(fp)
 1009080:	10094340 	call	1009434 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 1009084:	e17ffd17 	ldw	r5,-12(fp)
 1009088:	e13ffc17 	ldw	r4,-16(fp)
 100908c:	100928c0 	call	100928c <i2c_stop>
    
    return bSuccess;
 1009090:	e0bffb17 	ldw	r2,-20(fp)
}
 1009094:	e037883a 	mov	sp,fp
 1009098:	dfc00117 	ldw	ra,4(sp)
 100909c:	df000017 	ldw	fp,0(sp)
 10090a0:	dec00204 	addi	sp,sp,8
 10090a4:	f800283a 	ret

010090a8 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
 10090a8:	defff604 	addi	sp,sp,-40
 10090ac:	dfc00915 	stw	ra,36(sp)
 10090b0:	df000815 	stw	fp,32(sp)
 10090b4:	df000804 	addi	fp,sp,32
 10090b8:	e13ffb15 	stw	r4,-20(fp)
 10090bc:	e17ffc15 	stw	r5,-16(fp)
 10090c0:	3007883a 	mov	r3,r6
 10090c4:	e1fffe15 	stw	r7,-8(fp)
 10090c8:	e0800217 	ldw	r2,8(fp)
 10090cc:	e0fffd05 	stb	r3,-12(fp)
 10090d0:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 10090d4:	00800044 	movi	r2,1
 10090d8:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
 10090dc:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 10090e0:	e17ffc17 	ldw	r5,-16(fp)
 10090e4:	e13ffb17 	ldw	r4,-20(fp)
 10090e8:	10092000 	call	1009200 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 10090ec:	e0bffd03 	ldbu	r2,-12(fp)
 10090f0:	10803fcc 	andi	r2,r2,255
 10090f4:	100d883a 	mov	r6,r2
 10090f8:	e17ffc17 	ldw	r5,-16(fp)
 10090fc:	e13ffb17 	ldw	r4,-20(fp)
 1009100:	10093040 	call	1009304 <i2c_write>
 1009104:	1000011e 	bne	r2,zero,100910c <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
 1009108:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 100910c:	e0bff917 	ldw	r2,-28(fp)
 1009110:	10000726 	beq	r2,zero,1009130 <I2C_MultipleRead+0x88>
 1009114:	e0bffa03 	ldbu	r2,-24(fp)
 1009118:	100d883a 	mov	r6,r2
 100911c:	e17ffc17 	ldw	r5,-16(fp)
 1009120:	e13ffb17 	ldw	r4,-20(fp)
 1009124:	10093040 	call	1009304 <i2c_write>
 1009128:	1000011e 	bne	r2,zero,1009130 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
 100912c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
 1009130:	e0bff917 	ldw	r2,-28(fp)
 1009134:	10000326 	beq	r2,zero,1009144 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
 1009138:	e17ffc17 	ldw	r5,-16(fp)
 100913c:	e13ffb17 	ldw	r4,-20(fp)
 1009140:	10092000 	call	1009200 <i2c_start>
    DeviceAddr |= 1; // Read
 1009144:	e0bffd03 	ldbu	r2,-12(fp)
 1009148:	10800054 	ori	r2,r2,1
 100914c:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 1009150:	e0bff917 	ldw	r2,-28(fp)
 1009154:	10000826 	beq	r2,zero,1009178 <I2C_MultipleRead+0xd0>
 1009158:	e0bffd03 	ldbu	r2,-12(fp)
 100915c:	10803fcc 	andi	r2,r2,255
 1009160:	100d883a 	mov	r6,r2
 1009164:	e17ffc17 	ldw	r5,-16(fp)
 1009168:	e13ffb17 	ldw	r4,-20(fp)
 100916c:	10093040 	call	1009304 <i2c_write>
 1009170:	1000011e 	bne	r2,zero,1009178 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
 1009174:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 1009178:	e0bff917 	ldw	r2,-28(fp)
 100917c:	10001726 	beq	r2,zero,10091dc <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
 1009180:	e03ff815 	stw	zero,-32(fp)
 1009184:	00001006 	br	10091c8 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 1009188:	e0bff817 	ldw	r2,-32(fp)
 100918c:	e0fffe17 	ldw	r3,-8(fp)
 1009190:	1889883a 	add	r4,r3,r2
 1009194:	e0bfff0b 	ldhu	r2,-4(fp)
 1009198:	10ffffc4 	addi	r3,r2,-1
 100919c:	e0bff817 	ldw	r2,-32(fp)
 10091a0:	1884c03a 	cmpne	r2,r3,r2
 10091a4:	10803fcc 	andi	r2,r2,255
 10091a8:	100f883a 	mov	r7,r2
 10091ac:	200d883a 	mov	r6,r4
 10091b0:	e17ffc17 	ldw	r5,-16(fp)
 10091b4:	e13ffb17 	ldw	r4,-20(fp)
 10091b8:	10094340 	call	1009434 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 10091bc:	e0bff817 	ldw	r2,-32(fp)
 10091c0:	10800044 	addi	r2,r2,1
 10091c4:	e0bff815 	stw	r2,-32(fp)
 10091c8:	e0bfff0b 	ldhu	r2,-4(fp)
 10091cc:	e0fff817 	ldw	r3,-32(fp)
 10091d0:	1880020e 	bge	r3,r2,10091dc <I2C_MultipleRead+0x134>
 10091d4:	e0bff917 	ldw	r2,-28(fp)
 10091d8:	103feb1e 	bne	r2,zero,1009188 <_gp+0xffff3b2c>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 10091dc:	e17ffc17 	ldw	r5,-16(fp)
 10091e0:	e13ffb17 	ldw	r4,-20(fp)
 10091e4:	100928c0 	call	100928c <i2c_stop>
    
    return bSuccess;    
 10091e8:	e0bff917 	ldw	r2,-28(fp)
    
}
 10091ec:	e037883a 	mov	sp,fp
 10091f0:	dfc00117 	ldw	ra,4(sp)
 10091f4:	df000017 	ldw	fp,0(sp)
 10091f8:	dec00204 	addi	sp,sp,8
 10091fc:	f800283a 	ret

01009200 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 1009200:	defffc04 	addi	sp,sp,-16
 1009204:	dfc00315 	stw	ra,12(sp)
 1009208:	df000215 	stw	fp,8(sp)
 100920c:	df000204 	addi	fp,sp,8
 1009210:	e13ffe15 	stw	r4,-8(fp)
 1009214:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 1009218:	e0bfff17 	ldw	r2,-4(fp)
 100921c:	10800104 	addi	r2,r2,4
 1009220:	1007883a 	mov	r3,r2
 1009224:	00800044 	movi	r2,1
 1009228:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition 
    SDA_HIGH(data_base); // data high
 100922c:	e0bfff17 	ldw	r2,-4(fp)
 1009230:	00c00044 	movi	r3,1
 1009234:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 1009238:	e0bffe17 	ldw	r2,-8(fp)
 100923c:	00c00044 	movi	r3,1
 1009240:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 1009244:	01000044 	movi	r4,1
 1009248:	1009bf00 	call	1009bf0 <usleep>
     
    SDA_LOW(data_base); // data low
 100924c:	e0bfff17 	ldw	r2,-4(fp)
 1009250:	0007883a 	mov	r3,zero
 1009254:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 1009258:	01000044 	movi	r4,1
 100925c:	1009bf00 	call	1009bf0 <usleep>
    SCL_LOW(clk_base); // clock low
 1009260:	e0bffe17 	ldw	r2,-8(fp)
 1009264:	0007883a 	mov	r3,zero
 1009268:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 100926c:	01000044 	movi	r4,1
 1009270:	1009bf00 	call	1009bf0 <usleep>
}
 1009274:	0001883a 	nop
 1009278:	e037883a 	mov	sp,fp
 100927c:	dfc00117 	ldw	ra,4(sp)
 1009280:	df000017 	ldw	fp,0(sp)
 1009284:	dec00204 	addi	sp,sp,8
 1009288:	f800283a 	ret

0100928c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 100928c:	defffc04 	addi	sp,sp,-16
 1009290:	dfc00315 	stw	ra,12(sp)
 1009294:	df000215 	stw	fp,8(sp)
 1009298:	df000204 	addi	fp,sp,8
 100929c:	e13ffe15 	stw	r4,-8(fp)
 10092a0:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 10092a4:	e0bfff17 	ldw	r2,-4(fp)
 10092a8:	10800104 	addi	r2,r2,4
 10092ac:	1007883a 	mov	r3,r2
 10092b0:	00800044 	movi	r2,1
 10092b4:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 10092b8:	e0bfff17 	ldw	r2,-4(fp)
 10092bc:	0007883a 	mov	r3,zero
 10092c0:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 10092c4:	e0bffe17 	ldw	r2,-8(fp)
 10092c8:	00c00044 	movi	r3,1
 10092cc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 10092d0:	01000044 	movi	r4,1
 10092d4:	1009bf00 	call	1009bf0 <usleep>
    SDA_HIGH(data_base); // data high
 10092d8:	e0bfff17 	ldw	r2,-4(fp)
 10092dc:	00c00044 	movi	r3,1
 10092e0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 10092e4:	01000044 	movi	r4,1
 10092e8:	1009bf00 	call	1009bf0 <usleep>
}
 10092ec:	0001883a 	nop
 10092f0:	e037883a 	mov	sp,fp
 10092f4:	dfc00117 	ldw	ra,4(sp)
 10092f8:	df000017 	ldw	fp,0(sp)
 10092fc:	dec00204 	addi	sp,sp,8
 1009300:	f800283a 	ret

01009304 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 1009304:	defff804 	addi	sp,sp,-32
 1009308:	dfc00715 	stw	ra,28(sp)
 100930c:	df000615 	stw	fp,24(sp)
 1009310:	df000604 	addi	fp,sp,24
 1009314:	e13ffd15 	stw	r4,-12(fp)
 1009318:	e17ffe15 	stw	r5,-8(fp)
 100931c:	3005883a 	mov	r2,r6
 1009320:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 1009324:	00bfe004 	movi	r2,-128
 1009328:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 100932c:	e0bffe17 	ldw	r2,-8(fp)
 1009330:	10800104 	addi	r2,r2,4
 1009334:	1007883a 	mov	r3,r2
 1009338:	00800044 	movi	r2,1
 100933c:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 1009340:	e03ffb15 	stw	zero,-20(fp)
 1009344:	00001f06 	br	10093c4 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 1009348:	e0bffd17 	ldw	r2,-12(fp)
 100934c:	0007883a 	mov	r3,zero
 1009350:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 1009354:	e0ffff03 	ldbu	r3,-4(fp)
 1009358:	e0bffa03 	ldbu	r2,-24(fp)
 100935c:	1884703a 	and	r2,r3,r2
 1009360:	10803fcc 	andi	r2,r2,255
 1009364:	10000426 	beq	r2,zero,1009378 <i2c_write+0x74>
            SDA_HIGH(data_base);
 1009368:	e0bffe17 	ldw	r2,-8(fp)
 100936c:	00c00044 	movi	r3,1
 1009370:	10c00035 	stwio	r3,0(r2)
 1009374:	00000306 	br	1009384 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
 1009378:	e0bffe17 	ldw	r2,-8(fp)
 100937c:	0007883a 	mov	r3,zero
 1009380:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 1009384:	e0bffa03 	ldbu	r2,-24(fp)
 1009388:	1004d07a 	srli	r2,r2,1
 100938c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
 1009390:	e0bffd17 	ldw	r2,-12(fp)
 1009394:	00c00044 	movi	r3,1
 1009398:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 100939c:	01000044 	movi	r4,1
 10093a0:	1009bf00 	call	1009bf0 <usleep>
        SCL_LOW(clk_base);
 10093a4:	e0bffd17 	ldw	r2,-12(fp)
 10093a8:	0007883a 	mov	r3,zero
 10093ac:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 10093b0:	01000044 	movi	r4,1
 10093b4:	1009bf00 	call	1009bf0 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 10093b8:	e0bffb17 	ldw	r2,-20(fp)
 10093bc:	10800044 	addi	r2,r2,1
 10093c0:	e0bffb15 	stw	r2,-20(fp)
 10093c4:	e0bffb17 	ldw	r2,-20(fp)
 10093c8:	10800210 	cmplti	r2,r2,8
 10093cc:	103fde1e 	bne	r2,zero,1009348 <_gp+0xffff3cec>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 10093d0:	e0bffe17 	ldw	r2,-8(fp)
 10093d4:	10800104 	addi	r2,r2,4
 10093d8:	0007883a 	mov	r3,zero
 10093dc:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 10093e0:	e0bffd17 	ldw	r2,-12(fp)
 10093e4:	00c00044 	movi	r3,1
 10093e8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 10093ec:	01000044 	movi	r4,1
 10093f0:	1009bf00 	call	1009bf0 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 10093f4:	e0bffe17 	ldw	r2,-8(fp)
 10093f8:	10800037 	ldwio	r2,0(r2)
 10093fc:	1005003a 	cmpeq	r2,r2,zero
 1009400:	10803fcc 	andi	r2,r2,255
 1009404:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 1009408:	e0bffd17 	ldw	r2,-12(fp)
 100940c:	0007883a 	mov	r3,zero
 1009410:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 1009414:	01000044 	movi	r4,1
 1009418:	1009bf00 	call	1009bf0 <usleep>
    return bAck;
 100941c:	e0bffc17 	ldw	r2,-16(fp)
}    
 1009420:	e037883a 	mov	sp,fp
 1009424:	dfc00117 	ldw	ra,4(sp)
 1009428:	df000017 	ldw	fp,0(sp)
 100942c:	dec00204 	addi	sp,sp,8
 1009430:	f800283a 	ret

01009434 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 1009434:	defff804 	addi	sp,sp,-32
 1009438:	dfc00715 	stw	ra,28(sp)
 100943c:	df000615 	stw	fp,24(sp)
 1009440:	df000604 	addi	fp,sp,24
 1009444:	e13ffc15 	stw	r4,-16(fp)
 1009448:	e17ffd15 	stw	r5,-12(fp)
 100944c:	e1bffe15 	stw	r6,-8(fp)
 1009450:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 1009454:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 1009458:	e0bffd17 	ldw	r2,-12(fp)
 100945c:	10800104 	addi	r2,r2,4
 1009460:	0007883a 	mov	r3,zero
 1009464:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 1009468:	e0bffc17 	ldw	r2,-16(fp)
 100946c:	0007883a 	mov	r3,zero
 1009470:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 1009474:	01000044 	movi	r4,1
 1009478:	1009bf00 	call	1009bf0 <usleep>

    for(i=0;i<8;i++){
 100947c:	e03ffb15 	stw	zero,-20(fp)
 1009480:	00001606 	br	10094dc <i2c_read+0xa8>
        Data <<= 1;
 1009484:	e0bffa03 	ldbu	r2,-24(fp)
 1009488:	1085883a 	add	r2,r2,r2
 100948c:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 1009490:	e0bffc17 	ldw	r2,-16(fp)
 1009494:	00c00044 	movi	r3,1
 1009498:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 100949c:	01000044 	movi	r4,1
 10094a0:	1009bf00 	call	1009bf0 <usleep>
        if (SDA_READ(data_base))  // read data   
 10094a4:	e0bffd17 	ldw	r2,-12(fp)
 10094a8:	10800037 	ldwio	r2,0(r2)
 10094ac:	10000326 	beq	r2,zero,10094bc <i2c_read+0x88>
            Data |= 0x01;
 10094b0:	e0bffa03 	ldbu	r2,-24(fp)
 10094b4:	10800054 	ori	r2,r2,1
 10094b8:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 10094bc:	e0bffc17 	ldw	r2,-16(fp)
 10094c0:	0007883a 	mov	r3,zero
 10094c4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 10094c8:	01000044 	movi	r4,1
 10094cc:	1009bf00 	call	1009bf0 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 10094d0:	e0bffb17 	ldw	r2,-20(fp)
 10094d4:	10800044 	addi	r2,r2,1
 10094d8:	e0bffb15 	stw	r2,-20(fp)
 10094dc:	e0bffb17 	ldw	r2,-20(fp)
 10094e0:	10800210 	cmplti	r2,r2,8
 10094e4:	103fe71e 	bne	r2,zero,1009484 <_gp+0xffff3e28>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 10094e8:	e0bffc17 	ldw	r2,-16(fp)
 10094ec:	0007883a 	mov	r3,zero
 10094f0:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 10094f4:	e0bffd17 	ldw	r2,-12(fp)
 10094f8:	10800104 	addi	r2,r2,4
 10094fc:	1007883a 	mov	r3,r2
 1009500:	00800044 	movi	r2,1
 1009504:	18800035 	stwio	r2,0(r3)
    if (bAck)
 1009508:	e0bfff17 	ldw	r2,-4(fp)
 100950c:	10000426 	beq	r2,zero,1009520 <i2c_read+0xec>
        SDA_LOW(data_base);
 1009510:	e0bffd17 	ldw	r2,-12(fp)
 1009514:	0007883a 	mov	r3,zero
 1009518:	10c00035 	stwio	r3,0(r2)
 100951c:	00000306 	br	100952c <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
 1009520:	e0bffd17 	ldw	r2,-12(fp)
 1009524:	00c00044 	movi	r3,1
 1009528:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 100952c:	e0bffc17 	ldw	r2,-16(fp)
 1009530:	00c00044 	movi	r3,1
 1009534:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 1009538:	01000044 	movi	r4,1
 100953c:	1009bf00 	call	1009bf0 <usleep>
    SCL_LOW(clk_base); // clock low
 1009540:	e0bffc17 	ldw	r2,-16(fp)
 1009544:	0007883a 	mov	r3,zero
 1009548:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 100954c:	01000044 	movi	r4,1
 1009550:	1009bf00 	call	1009bf0 <usleep>
    SDA_LOW(data_base);  // data low
 1009554:	e0bffd17 	ldw	r2,-12(fp)
 1009558:	0007883a 	mov	r3,zero
 100955c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 1009560:	01000044 	movi	r4,1
 1009564:	1009bf00 	call	1009bf0 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 1009568:	e0bffe17 	ldw	r2,-8(fp)
 100956c:	e0fffa03 	ldbu	r3,-24(fp)
 1009570:	10c00005 	stb	r3,0(r2)
}
 1009574:	0001883a 	nop
 1009578:	e037883a 	mov	sp,fp
 100957c:	dfc00117 	ldw	ra,4(sp)
 1009580:	df000017 	ldw	fp,0(sp)
 1009584:	dec00204 	addi	sp,sp,8
 1009588:	f800283a 	ret

0100958c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100958c:	defffd04 	addi	sp,sp,-12
 1009590:	dfc00215 	stw	ra,8(sp)
 1009594:	df000115 	stw	fp,4(sp)
 1009598:	df000104 	addi	fp,sp,4
 100959c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 10095a0:	01404074 	movhi	r5,257
 10095a4:	29759b04 	addi	r5,r5,-10644
 10095a8:	e13fff17 	ldw	r4,-4(fp)
 10095ac:	10099f40 	call	10099f4 <alt_dev_llist_insert>
}
 10095b0:	e037883a 	mov	sp,fp
 10095b4:	dfc00117 	ldw	ra,4(sp)
 10095b8:	df000017 	ldw	fp,0(sp)
 10095bc:	dec00204 	addi	sp,sp,8
 10095c0:	f800283a 	ret

010095c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 10095c4:	defffd04 	addi	sp,sp,-12
 10095c8:	dfc00215 	stw	ra,8(sp)
 10095cc:	df000115 	stw	fp,4(sp)
 10095d0:	df000104 	addi	fp,sp,4
 10095d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 10095d8:	1009d680 	call	1009d68 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 10095dc:	00800044 	movi	r2,1
 10095e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 10095e4:	0001883a 	nop
 10095e8:	e037883a 	mov	sp,fp
 10095ec:	dfc00117 	ldw	ra,4(sp)
 10095f0:	df000017 	ldw	fp,0(sp)
 10095f4:	dec00204 	addi	sp,sp,8
 10095f8:	f800283a 	ret

010095fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 10095fc:	defffe04 	addi	sp,sp,-8
 1009600:	dfc00115 	stw	ra,4(sp)
 1009604:	df000015 	stw	fp,0(sp)
 1009608:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100960c:	01800044 	movi	r6,1
 1009610:	000b883a 	mov	r5,zero
 1009614:	01004074 	movhi	r4,257
 1009618:	2130db04 	addi	r4,r4,-15508
 100961c:	1009ef00 	call	1009ef0 <altera_avalon_jtag_uart_init>
 1009620:	01004074 	movhi	r4,257
 1009624:	2130d104 	addi	r4,r4,-15548
 1009628:	100958c0 	call	100958c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 100962c:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 1009630:	01004074 	movhi	r4,257
 1009634:	2134e904 	addi	r4,r4,-11356
 1009638:	100958c0 	call	100958c <alt_dev_reg>
}
 100963c:	0001883a 	nop
 1009640:	e037883a 	mov	sp,fp
 1009644:	dfc00117 	ldw	ra,4(sp)
 1009648:	df000017 	ldw	fp,0(sp)
 100964c:	dec00204 	addi	sp,sp,8
 1009650:	f800283a 	ret

01009654 <main>:

#define LINEOUT_DEFUALT_VOL 0x79
#define SINMAX 1000

int main ()
{
 1009654:	defffa04 	addi	sp,sp,-24
 1009658:	dfc00515 	stw	ra,20(sp)
 100965c:	df000415 	stw	fp,16(sp)
 1009660:	df000404 	addi	fp,sp,16
	printf("Hello\n");
 1009664:	01004074 	movhi	r4,257
 1009668:	2130b804 	addi	r4,r4,-15648
 100966c:	10098380 	call	1009838 <puts>

	unsigned int audR, audL;
	//unsigned int audL;
	unsigned int i = 0;
 1009670:	e03fff15 	stw	zero,-4(fp)
	unsigned int j = SINMAX;
 1009674:	0080fa04 	movi	r2,1000
 1009678:	e0bffc15 	stw	r2,-16(fp)

	int k;

	alt_up_audio_dev *audio_dev;

	audio_dev = alt_up_audio_open_dev("/dev/audio_0");
 100967c:	01004074 	movhi	r4,257
 1009680:	2130b404 	addi	r4,r4,-15664
 1009684:	100a7fc0 	call	100a7fc <alt_up_audio_open_dev>
 1009688:	e0bffd15 	stw	r2,-12(fp)

	if ( audio_dev == NULL)
 100968c:	e0bffd17 	ldw	r2,-12(fp)
 1009690:	1000051e 	bne	r2,zero,10096a8 <main+0x54>
	{
		printf ("Error: could not open audio device\n");
 1009694:	01004074 	movhi	r4,257
 1009698:	2130ba04 	addi	r4,r4,-15640
 100969c:	10098380 	call	1009838 <puts>
		return -1;
 10096a0:	00bfffc4 	movi	r2,-1
 10096a4:	00003f06 	br	10097a4 <main+0x150>
	}
	else
		printf ("Opened audio device\n");
 10096a8:	01004074 	movhi	r4,257
 10096ac:	2130c304 	addi	r4,r4,-15604
 10096b0:	10098380 	call	1009838 <puts>

	AUDIO_Init();
 10096b4:	10082940 	call	1008294 <AUDIO_Init>

	AUDIO_InterfaceActive(FALSE);
 10096b8:	0009883a 	mov	r4,zero
 10096bc:	10083e40 	call	10083e4 <AUDIO_InterfaceActive>

	AUDIO_SetInputSource(SOURCE_LINEIN);
 10096c0:	01000044 	movi	r4,1
 10096c4:	10088a40 	call	10088a4 <AUDIO_SetInputSource>
	AUDIO_DacEnableSoftMute(TRUE);
 10096c8:	01000044 	movi	r4,1
 10096cc:	10086ac0 	call	10086ac <AUDIO_DacEnableSoftMute>
	AUDIO_AdcEnableHighPassFilter(FALSE);
 10096d0:	0009883a 	mov	r4,zero
 10096d4:	10084a40 	call	10084a4 <AUDIO_AdcEnableHighPassFilter>
	AUDIO_MicMute(TRUE);
 10096d8:	01000044 	movi	r4,1
 10096dc:	10087380 	call	1008738 <AUDIO_MicMute>
	AUDIO_LineInMute(FALSE);
 10096e0:	0009883a 	mov	r4,zero
 10096e4:	10087c40 	call	10087c4 <AUDIO_LineInMute>
	AUDIO_SetLineInVol(0x17, 0x17);  // max 0x1F, min:0; 0x17: 0dB (assume max input is 2.0v rms)
 10096e8:	014005c4 	movi	r5,23
 10096ec:	010005c4 	movi	r4,23
 10096f0:	1008a180 	call	1008a18 <AUDIO_SetLineInVol>
	AUDIO_SetLineOutVol(LINEOUT_DEFUALT_VOL, LINEOUT_DEFUALT_VOL); // max 7F, min: 30, 0x79: 0 db
 10096f4:	01401e44 	movi	r5,121
 10096f8:	01001e44 	movi	r4,121
 10096fc:	1008af00 	call	1008af0 <AUDIO_SetLineOutVol>

	AUDIO_InterfaceActive(TRUE);
 1009700:	01000044 	movi	r4,1
 1009704:	10083e40 	call	10083e4 <AUDIO_InterfaceActive>
	//	IOWR_ALT_UP_AUDIO_LEFTDATA(AUDIO_0_BASE, audL);
		//audR = 0;
		//IOWR_ALT_UP_AUDIO_RIGHTDATA(AUDIO_0_BASE+2, audR);
		//audR = *(audio_ptr + 2);

		if(alt_up_audio_write_fifo_space(audio_dev,ALT_UP_AUDIO_LEFT) != 0)
 1009708:	000b883a 	mov	r5,zero
 100970c:	e13ffd17 	ldw	r4,-12(fp)
 1009710:	100abd80 	call	100abd8 <alt_up_audio_write_fifo_space>
 1009714:	103ffc26 	beq	r2,zero,1009708 <_gp+0xffff40ac>
		{
			k = alt_up_audio_write_fifo(audio_dev, &(i), 1, ALT_UP_AUDIO_RIGHT);
 1009718:	e0bfff04 	addi	r2,fp,-4
 100971c:	01c00044 	movi	r7,1
 1009720:	01800044 	movi	r6,1
 1009724:	100b883a 	mov	r5,r2
 1009728:	e13ffd17 	ldw	r4,-12(fp)
 100972c:	100ade80 	call	100ade8 <alt_up_audio_write_fifo>
 1009730:	e0bffe15 	stw	r2,-8(fp)
			k = alt_up_audio_write_fifo(audio_dev, &(i), 1, ALT_UP_AUDIO_LEFT);
 1009734:	e0bfff04 	addi	r2,fp,-4
 1009738:	000f883a 	mov	r7,zero
 100973c:	01800044 	movi	r6,1
 1009740:	100b883a 	mov	r5,r2
 1009744:	e13ffd17 	ldw	r4,-12(fp)
 1009748:	100ade80 	call	100ade8 <alt_up_audio_write_fifo>
 100974c:	e0bffe15 	stw	r2,-8(fp)
			//printf("audR1 = %d, k1 = %d\n", i, k);
			//for(j=0; j<(ALT_CPU_CPU_FREQ/500); j++);
			if (i < j)
 1009750:	e0ffff17 	ldw	r3,-4(fp)
 1009754:	e0bffc17 	ldw	r2,-16(fp)
 1009758:	1880092e 	bgeu	r3,r2,1009780 <main+0x12c>
			{
				i++;
 100975c:	e0bfff17 	ldw	r2,-4(fp)
 1009760:	10800044 	addi	r2,r2,1
 1009764:	e0bfff15 	stw	r2,-4(fp)
				if (i == j)
 1009768:	e0ffff17 	ldw	r3,-4(fp)
 100976c:	e0bffc17 	ldw	r2,-16(fp)
 1009770:	18bfe51e 	bne	r3,r2,1009708 <_gp+0xffff40ac>
					j = 1;
 1009774:	00800044 	movi	r2,1
 1009778:	e0bffc15 	stw	r2,-16(fp)
 100977c:	003fe206 	br	1009708 <_gp+0xffff40ac>
			}
			else
			{
				i--;
 1009780:	e0bfff17 	ldw	r2,-4(fp)
 1009784:	10bfffc4 	addi	r2,r2,-1
 1009788:	e0bfff15 	stw	r2,-4(fp)
				if (i == j)
 100978c:	e0ffff17 	ldw	r3,-4(fp)
 1009790:	e0bffc17 	ldw	r2,-16(fp)
 1009794:	18bfdc1e 	bne	r3,r2,1009708 <_gp+0xffff40ac>
					j = SINMAX;
 1009798:	0080fa04 	movi	r2,1000
 100979c:	e0bffc15 	stw	r2,-16(fp)


		//i++;
		//for(j=0; j<(ALT_CPU_CPU_FREQ/500); j++);
		//printf("%d", alt_up_audio_write_fifo_space(audio_dev,0));*/
	}
 10097a0:	003fd906 	br	1009708 <_gp+0xffff40ac>
	return 0;
}
 10097a4:	e037883a 	mov	sp,fp
 10097a8:	dfc00117 	ldw	ra,4(sp)
 10097ac:	df000017 	ldw	fp,0(sp)
 10097b0:	dec00204 	addi	sp,sp,8
 10097b4:	f800283a 	ret

010097b8 <_puts_r>:
 10097b8:	defffd04 	addi	sp,sp,-12
 10097bc:	dc000015 	stw	r16,0(sp)
 10097c0:	2021883a 	mov	r16,r4
 10097c4:	2809883a 	mov	r4,r5
 10097c8:	dfc00215 	stw	ra,8(sp)
 10097cc:	dc400115 	stw	r17,4(sp)
 10097d0:	2823883a 	mov	r17,r5
 10097d4:	100984c0 	call	100984c <strlen>
 10097d8:	81400217 	ldw	r5,8(r16)
 10097dc:	01004074 	movhi	r4,257
 10097e0:	21261a04 	addi	r4,r4,-26520
 10097e4:	29000115 	stw	r4,4(r5)
 10097e8:	100f883a 	mov	r7,r2
 10097ec:	880d883a 	mov	r6,r17
 10097f0:	8009883a 	mov	r4,r16
 10097f4:	10098680 	call	1009868 <__sfvwrite_small_dev>
 10097f8:	00ffffc4 	movi	r3,-1
 10097fc:	10c00926 	beq	r2,r3,1009824 <_puts_r+0x6c>
 1009800:	81400217 	ldw	r5,8(r16)
 1009804:	01804074 	movhi	r6,257
 1009808:	01c00044 	movi	r7,1
 100980c:	28800117 	ldw	r2,4(r5)
 1009810:	31b0c804 	addi	r6,r6,-15584
 1009814:	8009883a 	mov	r4,r16
 1009818:	103ee83a 	callr	r2
 100981c:	10bfffe0 	cmpeqi	r2,r2,-1
 1009820:	0085c83a 	sub	r2,zero,r2
 1009824:	dfc00217 	ldw	ra,8(sp)
 1009828:	dc400117 	ldw	r17,4(sp)
 100982c:	dc000017 	ldw	r16,0(sp)
 1009830:	dec00304 	addi	sp,sp,12
 1009834:	f800283a 	ret

01009838 <puts>:
 1009838:	00804074 	movhi	r2,257
 100983c:	10b59804 	addi	r2,r2,-10656
 1009840:	200b883a 	mov	r5,r4
 1009844:	11000017 	ldw	r4,0(r2)
 1009848:	10097b81 	jmpi	10097b8 <_puts_r>

0100984c <strlen>:
 100984c:	2005883a 	mov	r2,r4
 1009850:	10c00007 	ldb	r3,0(r2)
 1009854:	18000226 	beq	r3,zero,1009860 <strlen+0x14>
 1009858:	10800044 	addi	r2,r2,1
 100985c:	003ffc06 	br	1009850 <_gp+0xffff41f4>
 1009860:	1105c83a 	sub	r2,r2,r4
 1009864:	f800283a 	ret

01009868 <__sfvwrite_small_dev>:
 1009868:	2880000b 	ldhu	r2,0(r5)
 100986c:	1080020c 	andi	r2,r2,8
 1009870:	10002126 	beq	r2,zero,10098f8 <__sfvwrite_small_dev+0x90>
 1009874:	2880008f 	ldh	r2,2(r5)
 1009878:	defffa04 	addi	sp,sp,-24
 100987c:	dc000015 	stw	r16,0(sp)
 1009880:	dfc00515 	stw	ra,20(sp)
 1009884:	dd000415 	stw	r20,16(sp)
 1009888:	dcc00315 	stw	r19,12(sp)
 100988c:	dc800215 	stw	r18,8(sp)
 1009890:	dc400115 	stw	r17,4(sp)
 1009894:	2821883a 	mov	r16,r5
 1009898:	10001216 	blt	r2,zero,10098e4 <__sfvwrite_small_dev+0x7c>
 100989c:	2027883a 	mov	r19,r4
 10098a0:	3025883a 	mov	r18,r6
 10098a4:	3823883a 	mov	r17,r7
 10098a8:	05010004 	movi	r20,1024
 10098ac:	04400b0e 	bge	zero,r17,10098dc <__sfvwrite_small_dev+0x74>
 10098b0:	880f883a 	mov	r7,r17
 10098b4:	a440010e 	bge	r20,r17,10098bc <__sfvwrite_small_dev+0x54>
 10098b8:	01c10004 	movi	r7,1024
 10098bc:	8140008f 	ldh	r5,2(r16)
 10098c0:	900d883a 	mov	r6,r18
 10098c4:	9809883a 	mov	r4,r19
 10098c8:	10099200 	call	1009920 <_write_r>
 10098cc:	0080050e 	bge	zero,r2,10098e4 <__sfvwrite_small_dev+0x7c>
 10098d0:	88a3c83a 	sub	r17,r17,r2
 10098d4:	90a5883a 	add	r18,r18,r2
 10098d8:	003ff406 	br	10098ac <_gp+0xffff4250>
 10098dc:	0005883a 	mov	r2,zero
 10098e0:	00000706 	br	1009900 <__sfvwrite_small_dev+0x98>
 10098e4:	8080000b 	ldhu	r2,0(r16)
 10098e8:	10801014 	ori	r2,r2,64
 10098ec:	8080000d 	sth	r2,0(r16)
 10098f0:	00bfffc4 	movi	r2,-1
 10098f4:	00000206 	br	1009900 <__sfvwrite_small_dev+0x98>
 10098f8:	00bfffc4 	movi	r2,-1
 10098fc:	f800283a 	ret
 1009900:	dfc00517 	ldw	ra,20(sp)
 1009904:	dd000417 	ldw	r20,16(sp)
 1009908:	dcc00317 	ldw	r19,12(sp)
 100990c:	dc800217 	ldw	r18,8(sp)
 1009910:	dc400117 	ldw	r17,4(sp)
 1009914:	dc000017 	ldw	r16,0(sp)
 1009918:	dec00604 	addi	sp,sp,24
 100991c:	f800283a 	ret

01009920 <_write_r>:
 1009920:	defffd04 	addi	sp,sp,-12
 1009924:	dc000015 	stw	r16,0(sp)
 1009928:	04004074 	movhi	r16,257
 100992c:	dc400115 	stw	r17,4(sp)
 1009930:	843a7304 	addi	r16,r16,-5684
 1009934:	2023883a 	mov	r17,r4
 1009938:	2809883a 	mov	r4,r5
 100993c:	300b883a 	mov	r5,r6
 1009940:	380d883a 	mov	r6,r7
 1009944:	dfc00215 	stw	ra,8(sp)
 1009948:	80000015 	stw	zero,0(r16)
 100994c:	1009c700 	call	1009c70 <write>
 1009950:	00ffffc4 	movi	r3,-1
 1009954:	10c0031e 	bne	r2,r3,1009964 <_write_r+0x44>
 1009958:	80c00017 	ldw	r3,0(r16)
 100995c:	18000126 	beq	r3,zero,1009964 <_write_r+0x44>
 1009960:	88c00015 	stw	r3,0(r17)
 1009964:	dfc00217 	ldw	ra,8(sp)
 1009968:	dc400117 	ldw	r17,4(sp)
 100996c:	dc000017 	ldw	r16,0(sp)
 1009970:	dec00304 	addi	sp,sp,12
 1009974:	f800283a 	ret

01009978 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1009978:	defffc04 	addi	sp,sp,-16
 100997c:	df000315 	stw	fp,12(sp)
 1009980:	df000304 	addi	fp,sp,12
 1009984:	e13ffd15 	stw	r4,-12(fp)
 1009988:	e17ffe15 	stw	r5,-8(fp)
 100998c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1009990:	e0bfff17 	ldw	r2,-4(fp)
}
 1009994:	e037883a 	mov	sp,fp
 1009998:	df000017 	ldw	fp,0(sp)
 100999c:	dec00104 	addi	sp,sp,4
 10099a0:	f800283a 	ret

010099a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10099a4:	defffe04 	addi	sp,sp,-8
 10099a8:	dfc00115 	stw	ra,4(sp)
 10099ac:	df000015 	stw	fp,0(sp)
 10099b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10099b4:	00804074 	movhi	r2,257
 10099b8:	10b59e04 	addi	r2,r2,-10632
 10099bc:	10800017 	ldw	r2,0(r2)
 10099c0:	10000526 	beq	r2,zero,10099d8 <alt_get_errno+0x34>
 10099c4:	00804074 	movhi	r2,257
 10099c8:	10b59e04 	addi	r2,r2,-10632
 10099cc:	10800017 	ldw	r2,0(r2)
 10099d0:	103ee83a 	callr	r2
 10099d4:	00000206 	br	10099e0 <alt_get_errno+0x3c>
 10099d8:	00804074 	movhi	r2,257
 10099dc:	10ba7304 	addi	r2,r2,-5684
}
 10099e0:	e037883a 	mov	sp,fp
 10099e4:	dfc00117 	ldw	ra,4(sp)
 10099e8:	df000017 	ldw	fp,0(sp)
 10099ec:	dec00204 	addi	sp,sp,8
 10099f0:	f800283a 	ret

010099f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 10099f4:	defffa04 	addi	sp,sp,-24
 10099f8:	dfc00515 	stw	ra,20(sp)
 10099fc:	df000415 	stw	fp,16(sp)
 1009a00:	df000404 	addi	fp,sp,16
 1009a04:	e13ffe15 	stw	r4,-8(fp)
 1009a08:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1009a0c:	e0bffe17 	ldw	r2,-8(fp)
 1009a10:	10000326 	beq	r2,zero,1009a20 <alt_dev_llist_insert+0x2c>
 1009a14:	e0bffe17 	ldw	r2,-8(fp)
 1009a18:	10800217 	ldw	r2,8(r2)
 1009a1c:	1000061e 	bne	r2,zero,1009a38 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1009a20:	10099a40 	call	10099a4 <alt_get_errno>
 1009a24:	1007883a 	mov	r3,r2
 1009a28:	00800584 	movi	r2,22
 1009a2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1009a30:	00bffa84 	movi	r2,-22
 1009a34:	00001306 	br	1009a84 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1009a38:	e0bffe17 	ldw	r2,-8(fp)
 1009a3c:	e0ffff17 	ldw	r3,-4(fp)
 1009a40:	e0fffc15 	stw	r3,-16(fp)
 1009a44:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1009a48:	e0bffd17 	ldw	r2,-12(fp)
 1009a4c:	e0fffc17 	ldw	r3,-16(fp)
 1009a50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1009a54:	e0bffc17 	ldw	r2,-16(fp)
 1009a58:	10c00017 	ldw	r3,0(r2)
 1009a5c:	e0bffd17 	ldw	r2,-12(fp)
 1009a60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1009a64:	e0bffc17 	ldw	r2,-16(fp)
 1009a68:	10800017 	ldw	r2,0(r2)
 1009a6c:	e0fffd17 	ldw	r3,-12(fp)
 1009a70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1009a74:	e0bffc17 	ldw	r2,-16(fp)
 1009a78:	e0fffd17 	ldw	r3,-12(fp)
 1009a7c:	10c00015 	stw	r3,0(r2)

  return 0;  
 1009a80:	0005883a 	mov	r2,zero
}
 1009a84:	e037883a 	mov	sp,fp
 1009a88:	dfc00117 	ldw	ra,4(sp)
 1009a8c:	df000017 	ldw	fp,0(sp)
 1009a90:	dec00204 	addi	sp,sp,8
 1009a94:	f800283a 	ret

01009a98 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1009a98:	defffc04 	addi	sp,sp,-16
 1009a9c:	df000315 	stw	fp,12(sp)
 1009aa0:	df000304 	addi	fp,sp,12
 1009aa4:	e13ffd15 	stw	r4,-12(fp)
 1009aa8:	e17ffe15 	stw	r5,-8(fp)
 1009aac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1009ab0:	e0fffe17 	ldw	r3,-8(fp)
 1009ab4:	e0bffd17 	ldw	r2,-12(fp)
 1009ab8:	18800c26 	beq	r3,r2,1009aec <alt_load_section+0x54>
  {
    while( to != end )
 1009abc:	00000806 	br	1009ae0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 1009ac0:	e0bffe17 	ldw	r2,-8(fp)
 1009ac4:	10c00104 	addi	r3,r2,4
 1009ac8:	e0fffe15 	stw	r3,-8(fp)
 1009acc:	e0fffd17 	ldw	r3,-12(fp)
 1009ad0:	19000104 	addi	r4,r3,4
 1009ad4:	e13ffd15 	stw	r4,-12(fp)
 1009ad8:	18c00017 	ldw	r3,0(r3)
 1009adc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1009ae0:	e0fffe17 	ldw	r3,-8(fp)
 1009ae4:	e0bfff17 	ldw	r2,-4(fp)
 1009ae8:	18bff51e 	bne	r3,r2,1009ac0 <_gp+0xffff4464>
    {
      *to++ = *from++;
    }
  }
}
 1009aec:	0001883a 	nop
 1009af0:	e037883a 	mov	sp,fp
 1009af4:	df000017 	ldw	fp,0(sp)
 1009af8:	dec00104 	addi	sp,sp,4
 1009afc:	f800283a 	ret

01009b00 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1009b00:	defffe04 	addi	sp,sp,-8
 1009b04:	dfc00115 	stw	ra,4(sp)
 1009b08:	df000015 	stw	fp,0(sp)
 1009b0c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1009b10:	01804074 	movhi	r6,257
 1009b14:	31b5a204 	addi	r6,r6,-10616
 1009b18:	01404074 	movhi	r5,257
 1009b1c:	2970d104 	addi	r5,r5,-15548
 1009b20:	01004074 	movhi	r4,257
 1009b24:	2135a204 	addi	r4,r4,-10616
 1009b28:	1009a980 	call	1009a98 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1009b2c:	01804074 	movhi	r6,257
 1009b30:	31a09204 	addi	r6,r6,-32184
 1009b34:	01404074 	movhi	r5,257
 1009b38:	29600804 	addi	r5,r5,-32736
 1009b3c:	01004074 	movhi	r4,257
 1009b40:	21200804 	addi	r4,r4,-32736
 1009b44:	1009a980 	call	1009a98 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1009b48:	01804074 	movhi	r6,257
 1009b4c:	31b0d104 	addi	r6,r6,-15548
 1009b50:	01404074 	movhi	r5,257
 1009b54:	2970af04 	addi	r5,r5,-15684
 1009b58:	01004074 	movhi	r4,257
 1009b5c:	2130af04 	addi	r4,r4,-15684
 1009b60:	1009a980 	call	1009a98 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1009b64:	100b3600 	call	100b360 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1009b68:	100b4380 	call	100b438 <alt_icache_flush_all>
}
 1009b6c:	0001883a 	nop
 1009b70:	e037883a 	mov	sp,fp
 1009b74:	dfc00117 	ldw	ra,4(sp)
 1009b78:	df000017 	ldw	fp,0(sp)
 1009b7c:	dec00204 	addi	sp,sp,8
 1009b80:	f800283a 	ret

01009b84 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1009b84:	defffd04 	addi	sp,sp,-12
 1009b88:	dfc00215 	stw	ra,8(sp)
 1009b8c:	df000115 	stw	fp,4(sp)
 1009b90:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1009b94:	0009883a 	mov	r4,zero
 1009b98:	10095c40 	call	10095c4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1009b9c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1009ba0:	10095fc0 	call	10095fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1009ba4:	01804074 	movhi	r6,257
 1009ba8:	31b0cc04 	addi	r6,r6,-15568
 1009bac:	01404074 	movhi	r5,257
 1009bb0:	2970cc04 	addi	r5,r5,-15568
 1009bb4:	01004074 	movhi	r4,257
 1009bb8:	2130cc04 	addi	r4,r4,-15568
 1009bbc:	100b5300 	call	100b530 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1009bc0:	d0a4dd17 	ldw	r2,-27788(gp)
 1009bc4:	d0e4de17 	ldw	r3,-27784(gp)
 1009bc8:	d124df17 	ldw	r4,-27780(gp)
 1009bcc:	200d883a 	mov	r6,r4
 1009bd0:	180b883a 	mov	r5,r3
 1009bd4:	1009883a 	mov	r4,r2
 1009bd8:	10096540 	call	1009654 <main>
 1009bdc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1009be0:	01000044 	movi	r4,1
 1009be4:	100b2900 	call	100b290 <close>
  exit (result);
 1009be8:	e13fff17 	ldw	r4,-4(fp)
 1009bec:	100becc0 	call	100becc <exit>

01009bf0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 1009bf0:	defffd04 	addi	sp,sp,-12
 1009bf4:	dfc00215 	stw	ra,8(sp)
 1009bf8:	df000115 	stw	fp,4(sp)
 1009bfc:	df000104 	addi	fp,sp,4
 1009c00:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1009c04:	e13fff17 	ldw	r4,-4(fp)
 1009c08:	100b0e80 	call	100b0e8 <alt_busy_sleep>
}
 1009c0c:	e037883a 	mov	sp,fp
 1009c10:	dfc00117 	ldw	ra,4(sp)
 1009c14:	df000017 	ldw	fp,0(sp)
 1009c18:	dec00204 	addi	sp,sp,8
 1009c1c:	f800283a 	ret

01009c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009c20:	defffe04 	addi	sp,sp,-8
 1009c24:	dfc00115 	stw	ra,4(sp)
 1009c28:	df000015 	stw	fp,0(sp)
 1009c2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1009c30:	00804074 	movhi	r2,257
 1009c34:	10b59e04 	addi	r2,r2,-10632
 1009c38:	10800017 	ldw	r2,0(r2)
 1009c3c:	10000526 	beq	r2,zero,1009c54 <alt_get_errno+0x34>
 1009c40:	00804074 	movhi	r2,257
 1009c44:	10b59e04 	addi	r2,r2,-10632
 1009c48:	10800017 	ldw	r2,0(r2)
 1009c4c:	103ee83a 	callr	r2
 1009c50:	00000206 	br	1009c5c <alt_get_errno+0x3c>
 1009c54:	00804074 	movhi	r2,257
 1009c58:	10ba7304 	addi	r2,r2,-5684
}
 1009c5c:	e037883a 	mov	sp,fp
 1009c60:	dfc00117 	ldw	ra,4(sp)
 1009c64:	df000017 	ldw	fp,0(sp)
 1009c68:	dec00204 	addi	sp,sp,8
 1009c6c:	f800283a 	ret

01009c70 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1009c70:	defff904 	addi	sp,sp,-28
 1009c74:	dfc00615 	stw	ra,24(sp)
 1009c78:	df000515 	stw	fp,20(sp)
 1009c7c:	df000504 	addi	fp,sp,20
 1009c80:	e13ffd15 	stw	r4,-12(fp)
 1009c84:	e17ffe15 	stw	r5,-8(fp)
 1009c88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1009c8c:	e0bffd17 	ldw	r2,-12(fp)
 1009c90:	10000616 	blt	r2,zero,1009cac <write+0x3c>
 1009c94:	e0bffd17 	ldw	r2,-12(fp)
 1009c98:	10c00324 	muli	r3,r2,12
 1009c9c:	00804074 	movhi	r2,257
 1009ca0:	10b53704 	addi	r2,r2,-11044
 1009ca4:	1885883a 	add	r2,r3,r2
 1009ca8:	00000106 	br	1009cb0 <write+0x40>
 1009cac:	0005883a 	mov	r2,zero
 1009cb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1009cb4:	e0bffb17 	ldw	r2,-20(fp)
 1009cb8:	10002126 	beq	r2,zero,1009d40 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1009cbc:	e0bffb17 	ldw	r2,-20(fp)
 1009cc0:	10800217 	ldw	r2,8(r2)
 1009cc4:	108000cc 	andi	r2,r2,3
 1009cc8:	10001826 	beq	r2,zero,1009d2c <write+0xbc>
 1009ccc:	e0bffb17 	ldw	r2,-20(fp)
 1009cd0:	10800017 	ldw	r2,0(r2)
 1009cd4:	10800617 	ldw	r2,24(r2)
 1009cd8:	10001426 	beq	r2,zero,1009d2c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1009cdc:	e0bffb17 	ldw	r2,-20(fp)
 1009ce0:	10800017 	ldw	r2,0(r2)
 1009ce4:	10800617 	ldw	r2,24(r2)
 1009ce8:	e0ffff17 	ldw	r3,-4(fp)
 1009cec:	180d883a 	mov	r6,r3
 1009cf0:	e17ffe17 	ldw	r5,-8(fp)
 1009cf4:	e13ffb17 	ldw	r4,-20(fp)
 1009cf8:	103ee83a 	callr	r2
 1009cfc:	e0bffc15 	stw	r2,-16(fp)
 1009d00:	e0bffc17 	ldw	r2,-16(fp)
 1009d04:	1000070e 	bge	r2,zero,1009d24 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 1009d08:	1009c200 	call	1009c20 <alt_get_errno>
 1009d0c:	1007883a 	mov	r3,r2
 1009d10:	e0bffc17 	ldw	r2,-16(fp)
 1009d14:	0085c83a 	sub	r2,zero,r2
 1009d18:	18800015 	stw	r2,0(r3)
        return -1;
 1009d1c:	00bfffc4 	movi	r2,-1
 1009d20:	00000c06 	br	1009d54 <write+0xe4>
      }
      return rval;
 1009d24:	e0bffc17 	ldw	r2,-16(fp)
 1009d28:	00000a06 	br	1009d54 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1009d2c:	1009c200 	call	1009c20 <alt_get_errno>
 1009d30:	1007883a 	mov	r3,r2
 1009d34:	00800344 	movi	r2,13
 1009d38:	18800015 	stw	r2,0(r3)
 1009d3c:	00000406 	br	1009d50 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1009d40:	1009c200 	call	1009c20 <alt_get_errno>
 1009d44:	1007883a 	mov	r3,r2
 1009d48:	00801444 	movi	r2,81
 1009d4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1009d50:	00bfffc4 	movi	r2,-1
}
 1009d54:	e037883a 	mov	sp,fp
 1009d58:	dfc00117 	ldw	ra,4(sp)
 1009d5c:	df000017 	ldw	fp,0(sp)
 1009d60:	dec00204 	addi	sp,sp,8
 1009d64:	f800283a 	ret

01009d68 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1009d68:	deffff04 	addi	sp,sp,-4
 1009d6c:	df000015 	stw	fp,0(sp)
 1009d70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1009d74:	000170fa 	wrctl	ienable,zero
}
 1009d78:	0001883a 	nop
 1009d7c:	e037883a 	mov	sp,fp
 1009d80:	df000017 	ldw	fp,0(sp)
 1009d84:	dec00104 	addi	sp,sp,4
 1009d88:	f800283a 	ret

01009d8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1009d8c:	defffa04 	addi	sp,sp,-24
 1009d90:	dfc00515 	stw	ra,20(sp)
 1009d94:	df000415 	stw	fp,16(sp)
 1009d98:	df000404 	addi	fp,sp,16
 1009d9c:	e13ffd15 	stw	r4,-12(fp)
 1009da0:	e17ffe15 	stw	r5,-8(fp)
 1009da4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1009da8:	e0bffd17 	ldw	r2,-12(fp)
 1009dac:	10800017 	ldw	r2,0(r2)
 1009db0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1009db4:	e0bffc17 	ldw	r2,-16(fp)
 1009db8:	10c00a04 	addi	r3,r2,40
 1009dbc:	e0bffd17 	ldw	r2,-12(fp)
 1009dc0:	10800217 	ldw	r2,8(r2)
 1009dc4:	100f883a 	mov	r7,r2
 1009dc8:	e1bfff17 	ldw	r6,-4(fp)
 1009dcc:	e17ffe17 	ldw	r5,-8(fp)
 1009dd0:	1809883a 	mov	r4,r3
 1009dd4:	100a3bc0 	call	100a3bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1009dd8:	e037883a 	mov	sp,fp
 1009ddc:	dfc00117 	ldw	ra,4(sp)
 1009de0:	df000017 	ldw	fp,0(sp)
 1009de4:	dec00204 	addi	sp,sp,8
 1009de8:	f800283a 	ret

01009dec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1009dec:	defffa04 	addi	sp,sp,-24
 1009df0:	dfc00515 	stw	ra,20(sp)
 1009df4:	df000415 	stw	fp,16(sp)
 1009df8:	df000404 	addi	fp,sp,16
 1009dfc:	e13ffd15 	stw	r4,-12(fp)
 1009e00:	e17ffe15 	stw	r5,-8(fp)
 1009e04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1009e08:	e0bffd17 	ldw	r2,-12(fp)
 1009e0c:	10800017 	ldw	r2,0(r2)
 1009e10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1009e14:	e0bffc17 	ldw	r2,-16(fp)
 1009e18:	10c00a04 	addi	r3,r2,40
 1009e1c:	e0bffd17 	ldw	r2,-12(fp)
 1009e20:	10800217 	ldw	r2,8(r2)
 1009e24:	100f883a 	mov	r7,r2
 1009e28:	e1bfff17 	ldw	r6,-4(fp)
 1009e2c:	e17ffe17 	ldw	r5,-8(fp)
 1009e30:	1809883a 	mov	r4,r3
 1009e34:	100a5d80 	call	100a5d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1009e38:	e037883a 	mov	sp,fp
 1009e3c:	dfc00117 	ldw	ra,4(sp)
 1009e40:	df000017 	ldw	fp,0(sp)
 1009e44:	dec00204 	addi	sp,sp,8
 1009e48:	f800283a 	ret

01009e4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1009e4c:	defffc04 	addi	sp,sp,-16
 1009e50:	dfc00315 	stw	ra,12(sp)
 1009e54:	df000215 	stw	fp,8(sp)
 1009e58:	df000204 	addi	fp,sp,8
 1009e5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1009e60:	e0bfff17 	ldw	r2,-4(fp)
 1009e64:	10800017 	ldw	r2,0(r2)
 1009e68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1009e6c:	e0bffe17 	ldw	r2,-8(fp)
 1009e70:	10c00a04 	addi	r3,r2,40
 1009e74:	e0bfff17 	ldw	r2,-4(fp)
 1009e78:	10800217 	ldw	r2,8(r2)
 1009e7c:	100b883a 	mov	r5,r2
 1009e80:	1809883a 	mov	r4,r3
 1009e84:	100a2640 	call	100a264 <altera_avalon_jtag_uart_close>
}
 1009e88:	e037883a 	mov	sp,fp
 1009e8c:	dfc00117 	ldw	ra,4(sp)
 1009e90:	df000017 	ldw	fp,0(sp)
 1009e94:	dec00204 	addi	sp,sp,8
 1009e98:	f800283a 	ret

01009e9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1009e9c:	defffa04 	addi	sp,sp,-24
 1009ea0:	dfc00515 	stw	ra,20(sp)
 1009ea4:	df000415 	stw	fp,16(sp)
 1009ea8:	df000404 	addi	fp,sp,16
 1009eac:	e13ffd15 	stw	r4,-12(fp)
 1009eb0:	e17ffe15 	stw	r5,-8(fp)
 1009eb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1009eb8:	e0bffd17 	ldw	r2,-12(fp)
 1009ebc:	10800017 	ldw	r2,0(r2)
 1009ec0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1009ec4:	e0bffc17 	ldw	r2,-16(fp)
 1009ec8:	10800a04 	addi	r2,r2,40
 1009ecc:	e1bfff17 	ldw	r6,-4(fp)
 1009ed0:	e17ffe17 	ldw	r5,-8(fp)
 1009ed4:	1009883a 	mov	r4,r2
 1009ed8:	100a2cc0 	call	100a2cc <altera_avalon_jtag_uart_ioctl>
}
 1009edc:	e037883a 	mov	sp,fp
 1009ee0:	dfc00117 	ldw	ra,4(sp)
 1009ee4:	df000017 	ldw	fp,0(sp)
 1009ee8:	dec00204 	addi	sp,sp,8
 1009eec:	f800283a 	ret

01009ef0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1009ef0:	defffb04 	addi	sp,sp,-20
 1009ef4:	dfc00415 	stw	ra,16(sp)
 1009ef8:	df000315 	stw	fp,12(sp)
 1009efc:	df000304 	addi	fp,sp,12
 1009f00:	e13ffd15 	stw	r4,-12(fp)
 1009f04:	e17ffe15 	stw	r5,-8(fp)
 1009f08:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1009f0c:	e0bffd17 	ldw	r2,-12(fp)
 1009f10:	00c00044 	movi	r3,1
 1009f14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1009f18:	e0bffd17 	ldw	r2,-12(fp)
 1009f1c:	10800017 	ldw	r2,0(r2)
 1009f20:	10800104 	addi	r2,r2,4
 1009f24:	1007883a 	mov	r3,r2
 1009f28:	e0bffd17 	ldw	r2,-12(fp)
 1009f2c:	10800817 	ldw	r2,32(r2)
 1009f30:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1009f34:	e0bfff17 	ldw	r2,-4(fp)
 1009f38:	01804074 	movhi	r6,257
 1009f3c:	31a7eb04 	addi	r6,r6,-24660
 1009f40:	e17ffd17 	ldw	r5,-12(fp)
 1009f44:	1009883a 	mov	r4,r2
 1009f48:	100b5ac0 	call	100b5ac <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1009f4c:	e0bffd17 	ldw	r2,-12(fp)
 1009f50:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1009f54:	e0bffd17 	ldw	r2,-12(fp)
 1009f58:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1009f5c:	00804074 	movhi	r2,257
 1009f60:	10ba7804 	addi	r2,r2,-5664
 1009f64:	10800017 	ldw	r2,0(r2)
 1009f68:	e1fffd17 	ldw	r7,-12(fp)
 1009f6c:	01804074 	movhi	r6,257
 1009f70:	31a86f04 	addi	r6,r6,-24132
 1009f74:	100b883a 	mov	r5,r2
 1009f78:	1809883a 	mov	r4,r3
 1009f7c:	100afa80 	call	100afa8 <alt_alarm_start>
 1009f80:	1000040e 	bge	r2,zero,1009f94 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1009f84:	e0fffd17 	ldw	r3,-12(fp)
 1009f88:	00a00034 	movhi	r2,32768
 1009f8c:	10bfffc4 	addi	r2,r2,-1
 1009f90:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1009f94:	0001883a 	nop
 1009f98:	e037883a 	mov	sp,fp
 1009f9c:	dfc00117 	ldw	ra,4(sp)
 1009fa0:	df000017 	ldw	fp,0(sp)
 1009fa4:	dec00204 	addi	sp,sp,8
 1009fa8:	f800283a 	ret

01009fac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1009fac:	defff704 	addi	sp,sp,-36
 1009fb0:	df000815 	stw	fp,32(sp)
 1009fb4:	df000804 	addi	fp,sp,32
 1009fb8:	e13ffe15 	stw	r4,-8(fp)
 1009fbc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1009fc0:	e0bffe17 	ldw	r2,-8(fp)
 1009fc4:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 1009fc8:	e0bffa17 	ldw	r2,-24(fp)
 1009fcc:	10800017 	ldw	r2,0(r2)
 1009fd0:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1009fd4:	e0bffb17 	ldw	r2,-20(fp)
 1009fd8:	10800104 	addi	r2,r2,4
 1009fdc:	10800037 	ldwio	r2,0(r2)
 1009fe0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1009fe4:	e0bffc17 	ldw	r2,-16(fp)
 1009fe8:	1080c00c 	andi	r2,r2,768
 1009fec:	10006d26 	beq	r2,zero,100a1a4 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1009ff0:	e0bffc17 	ldw	r2,-16(fp)
 1009ff4:	1080400c 	andi	r2,r2,256
 1009ff8:	10003526 	beq	r2,zero,100a0d0 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1009ffc:	00800074 	movhi	r2,1
 100a000:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100a004:	e0bffa17 	ldw	r2,-24(fp)
 100a008:	10800a17 	ldw	r2,40(r2)
 100a00c:	10800044 	addi	r2,r2,1
 100a010:	1081ffcc 	andi	r2,r2,2047
 100a014:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 100a018:	e0bffa17 	ldw	r2,-24(fp)
 100a01c:	10c00b17 	ldw	r3,44(r2)
 100a020:	e0bffd17 	ldw	r2,-12(fp)
 100a024:	18801526 	beq	r3,r2,100a07c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100a028:	e0bffb17 	ldw	r2,-20(fp)
 100a02c:	10800037 	ldwio	r2,0(r2)
 100a030:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100a034:	e0bff817 	ldw	r2,-32(fp)
 100a038:	10a0000c 	andi	r2,r2,32768
 100a03c:	10001126 	beq	r2,zero,100a084 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100a040:	e0bffa17 	ldw	r2,-24(fp)
 100a044:	10800a17 	ldw	r2,40(r2)
 100a048:	e0fff817 	ldw	r3,-32(fp)
 100a04c:	1809883a 	mov	r4,r3
 100a050:	e0fffa17 	ldw	r3,-24(fp)
 100a054:	1885883a 	add	r2,r3,r2
 100a058:	10800e04 	addi	r2,r2,56
 100a05c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100a060:	e0bffa17 	ldw	r2,-24(fp)
 100a064:	10800a17 	ldw	r2,40(r2)
 100a068:	10800044 	addi	r2,r2,1
 100a06c:	10c1ffcc 	andi	r3,r2,2047
 100a070:	e0bffa17 	ldw	r2,-24(fp)
 100a074:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100a078:	003fe206 	br	100a004 <_gp+0xffff49a8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 100a07c:	0001883a 	nop
 100a080:	00000106 	br	100a088 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 100a084:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100a088:	e0bff817 	ldw	r2,-32(fp)
 100a08c:	10bfffec 	andhi	r2,r2,65535
 100a090:	10000f26 	beq	r2,zero,100a0d0 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100a094:	e0bffa17 	ldw	r2,-24(fp)
 100a098:	10c00817 	ldw	r3,32(r2)
 100a09c:	00bfff84 	movi	r2,-2
 100a0a0:	1886703a 	and	r3,r3,r2
 100a0a4:	e0bffa17 	ldw	r2,-24(fp)
 100a0a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100a0ac:	e0bffb17 	ldw	r2,-20(fp)
 100a0b0:	10800104 	addi	r2,r2,4
 100a0b4:	1007883a 	mov	r3,r2
 100a0b8:	e0bffa17 	ldw	r2,-24(fp)
 100a0bc:	10800817 	ldw	r2,32(r2)
 100a0c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100a0c4:	e0bffb17 	ldw	r2,-20(fp)
 100a0c8:	10800104 	addi	r2,r2,4
 100a0cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100a0d0:	e0bffc17 	ldw	r2,-16(fp)
 100a0d4:	1080800c 	andi	r2,r2,512
 100a0d8:	103fbe26 	beq	r2,zero,1009fd4 <_gp+0xffff4978>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100a0dc:	e0bffc17 	ldw	r2,-16(fp)
 100a0e0:	1004d43a 	srli	r2,r2,16
 100a0e4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100a0e8:	00001406 	br	100a13c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100a0ec:	e0bffb17 	ldw	r2,-20(fp)
 100a0f0:	e0fffa17 	ldw	r3,-24(fp)
 100a0f4:	18c00d17 	ldw	r3,52(r3)
 100a0f8:	e13ffa17 	ldw	r4,-24(fp)
 100a0fc:	20c7883a 	add	r3,r4,r3
 100a100:	18c20e04 	addi	r3,r3,2104
 100a104:	18c00003 	ldbu	r3,0(r3)
 100a108:	18c03fcc 	andi	r3,r3,255
 100a10c:	18c0201c 	xori	r3,r3,128
 100a110:	18ffe004 	addi	r3,r3,-128
 100a114:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100a118:	e0bffa17 	ldw	r2,-24(fp)
 100a11c:	10800d17 	ldw	r2,52(r2)
 100a120:	10800044 	addi	r2,r2,1
 100a124:	10c1ffcc 	andi	r3,r2,2047
 100a128:	e0bffa17 	ldw	r2,-24(fp)
 100a12c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100a130:	e0bff917 	ldw	r2,-28(fp)
 100a134:	10bfffc4 	addi	r2,r2,-1
 100a138:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100a13c:	e0bff917 	ldw	r2,-28(fp)
 100a140:	10000526 	beq	r2,zero,100a158 <altera_avalon_jtag_uart_irq+0x1ac>
 100a144:	e0bffa17 	ldw	r2,-24(fp)
 100a148:	10c00d17 	ldw	r3,52(r2)
 100a14c:	e0bffa17 	ldw	r2,-24(fp)
 100a150:	10800c17 	ldw	r2,48(r2)
 100a154:	18bfe51e 	bne	r3,r2,100a0ec <_gp+0xffff4a90>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100a158:	e0bff917 	ldw	r2,-28(fp)
 100a15c:	103f9d26 	beq	r2,zero,1009fd4 <_gp+0xffff4978>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100a160:	e0bffa17 	ldw	r2,-24(fp)
 100a164:	10c00817 	ldw	r3,32(r2)
 100a168:	00bfff44 	movi	r2,-3
 100a16c:	1886703a 	and	r3,r3,r2
 100a170:	e0bffa17 	ldw	r2,-24(fp)
 100a174:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100a178:	e0bffa17 	ldw	r2,-24(fp)
 100a17c:	10800017 	ldw	r2,0(r2)
 100a180:	10800104 	addi	r2,r2,4
 100a184:	1007883a 	mov	r3,r2
 100a188:	e0bffa17 	ldw	r2,-24(fp)
 100a18c:	10800817 	ldw	r2,32(r2)
 100a190:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100a194:	e0bffb17 	ldw	r2,-20(fp)
 100a198:	10800104 	addi	r2,r2,4
 100a19c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100a1a0:	003f8c06 	br	1009fd4 <_gp+0xffff4978>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 100a1a4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 100a1a8:	0001883a 	nop
 100a1ac:	e037883a 	mov	sp,fp
 100a1b0:	df000017 	ldw	fp,0(sp)
 100a1b4:	dec00104 	addi	sp,sp,4
 100a1b8:	f800283a 	ret

0100a1bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100a1bc:	defff804 	addi	sp,sp,-32
 100a1c0:	df000715 	stw	fp,28(sp)
 100a1c4:	df000704 	addi	fp,sp,28
 100a1c8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100a1cc:	e0bffb17 	ldw	r2,-20(fp)
 100a1d0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100a1d4:	e0bff917 	ldw	r2,-28(fp)
 100a1d8:	10800017 	ldw	r2,0(r2)
 100a1dc:	10800104 	addi	r2,r2,4
 100a1e0:	10800037 	ldwio	r2,0(r2)
 100a1e4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100a1e8:	e0bffa17 	ldw	r2,-24(fp)
 100a1ec:	1081000c 	andi	r2,r2,1024
 100a1f0:	10000b26 	beq	r2,zero,100a220 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100a1f4:	e0bff917 	ldw	r2,-28(fp)
 100a1f8:	10800017 	ldw	r2,0(r2)
 100a1fc:	10800104 	addi	r2,r2,4
 100a200:	1007883a 	mov	r3,r2
 100a204:	e0bff917 	ldw	r2,-28(fp)
 100a208:	10800817 	ldw	r2,32(r2)
 100a20c:	10810014 	ori	r2,r2,1024
 100a210:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 100a214:	e0bff917 	ldw	r2,-28(fp)
 100a218:	10000915 	stw	zero,36(r2)
 100a21c:	00000a06 	br	100a248 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100a220:	e0bff917 	ldw	r2,-28(fp)
 100a224:	10c00917 	ldw	r3,36(r2)
 100a228:	00a00034 	movhi	r2,32768
 100a22c:	10bfff04 	addi	r2,r2,-4
 100a230:	10c00536 	bltu	r2,r3,100a248 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 100a234:	e0bff917 	ldw	r2,-28(fp)
 100a238:	10800917 	ldw	r2,36(r2)
 100a23c:	10c00044 	addi	r3,r2,1
 100a240:	e0bff917 	ldw	r2,-28(fp)
 100a244:	10c00915 	stw	r3,36(r2)
 100a248:	00804074 	movhi	r2,257
 100a24c:	10ba7804 	addi	r2,r2,-5664
 100a250:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100a254:	e037883a 	mov	sp,fp
 100a258:	df000017 	ldw	fp,0(sp)
 100a25c:	dec00104 	addi	sp,sp,4
 100a260:	f800283a 	ret

0100a264 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100a264:	defffd04 	addi	sp,sp,-12
 100a268:	df000215 	stw	fp,8(sp)
 100a26c:	df000204 	addi	fp,sp,8
 100a270:	e13ffe15 	stw	r4,-8(fp)
 100a274:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100a278:	00000506 	br	100a290 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 100a27c:	e0bfff17 	ldw	r2,-4(fp)
 100a280:	1090000c 	andi	r2,r2,16384
 100a284:	10000226 	beq	r2,zero,100a290 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 100a288:	00bffd44 	movi	r2,-11
 100a28c:	00000b06 	br	100a2bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100a290:	e0bffe17 	ldw	r2,-8(fp)
 100a294:	10c00d17 	ldw	r3,52(r2)
 100a298:	e0bffe17 	ldw	r2,-8(fp)
 100a29c:	10800c17 	ldw	r2,48(r2)
 100a2a0:	18800526 	beq	r3,r2,100a2b8 <altera_avalon_jtag_uart_close+0x54>
 100a2a4:	e0bffe17 	ldw	r2,-8(fp)
 100a2a8:	10c00917 	ldw	r3,36(r2)
 100a2ac:	e0bffe17 	ldw	r2,-8(fp)
 100a2b0:	10800117 	ldw	r2,4(r2)
 100a2b4:	18bff136 	bltu	r3,r2,100a27c <_gp+0xffff4c20>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100a2b8:	0005883a 	mov	r2,zero
}
 100a2bc:	e037883a 	mov	sp,fp
 100a2c0:	df000017 	ldw	fp,0(sp)
 100a2c4:	dec00104 	addi	sp,sp,4
 100a2c8:	f800283a 	ret

0100a2cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100a2cc:	defffa04 	addi	sp,sp,-24
 100a2d0:	df000515 	stw	fp,20(sp)
 100a2d4:	df000504 	addi	fp,sp,20
 100a2d8:	e13ffd15 	stw	r4,-12(fp)
 100a2dc:	e17ffe15 	stw	r5,-8(fp)
 100a2e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 100a2e4:	00bff9c4 	movi	r2,-25
 100a2e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 100a2ec:	e0bffe17 	ldw	r2,-8(fp)
 100a2f0:	10da8060 	cmpeqi	r3,r2,27137
 100a2f4:	1800031e 	bne	r3,zero,100a304 <altera_avalon_jtag_uart_ioctl+0x38>
 100a2f8:	109a80a0 	cmpeqi	r2,r2,27138
 100a2fc:	1000181e 	bne	r2,zero,100a360 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 100a300:	00002906 	br	100a3a8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100a304:	e0bffd17 	ldw	r2,-12(fp)
 100a308:	10c00117 	ldw	r3,4(r2)
 100a30c:	00a00034 	movhi	r2,32768
 100a310:	10bfffc4 	addi	r2,r2,-1
 100a314:	18802126 	beq	r3,r2,100a39c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 100a318:	e0bfff17 	ldw	r2,-4(fp)
 100a31c:	10800017 	ldw	r2,0(r2)
 100a320:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100a324:	e0bffc17 	ldw	r2,-16(fp)
 100a328:	10800090 	cmplti	r2,r2,2
 100a32c:	1000061e 	bne	r2,zero,100a348 <altera_avalon_jtag_uart_ioctl+0x7c>
 100a330:	e0fffc17 	ldw	r3,-16(fp)
 100a334:	00a00034 	movhi	r2,32768
 100a338:	10bfffc4 	addi	r2,r2,-1
 100a33c:	18800226 	beq	r3,r2,100a348 <altera_avalon_jtag_uart_ioctl+0x7c>
 100a340:	e0bffc17 	ldw	r2,-16(fp)
 100a344:	00000206 	br	100a350 <altera_avalon_jtag_uart_ioctl+0x84>
 100a348:	00a00034 	movhi	r2,32768
 100a34c:	10bfff84 	addi	r2,r2,-2
 100a350:	e0fffd17 	ldw	r3,-12(fp)
 100a354:	18800115 	stw	r2,4(r3)
      rc = 0;
 100a358:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 100a35c:	00000f06 	br	100a39c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100a360:	e0bffd17 	ldw	r2,-12(fp)
 100a364:	10c00117 	ldw	r3,4(r2)
 100a368:	00a00034 	movhi	r2,32768
 100a36c:	10bfffc4 	addi	r2,r2,-1
 100a370:	18800c26 	beq	r3,r2,100a3a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100a374:	e0bffd17 	ldw	r2,-12(fp)
 100a378:	10c00917 	ldw	r3,36(r2)
 100a37c:	e0bffd17 	ldw	r2,-12(fp)
 100a380:	10800117 	ldw	r2,4(r2)
 100a384:	1885803a 	cmpltu	r2,r3,r2
 100a388:	10c03fcc 	andi	r3,r2,255
 100a38c:	e0bfff17 	ldw	r2,-4(fp)
 100a390:	10c00015 	stw	r3,0(r2)
      rc = 0;
 100a394:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 100a398:	00000206 	br	100a3a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 100a39c:	0001883a 	nop
 100a3a0:	00000106 	br	100a3a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 100a3a4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 100a3a8:	e0bffb17 	ldw	r2,-20(fp)
}
 100a3ac:	e037883a 	mov	sp,fp
 100a3b0:	df000017 	ldw	fp,0(sp)
 100a3b4:	dec00104 	addi	sp,sp,4
 100a3b8:	f800283a 	ret

0100a3bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100a3bc:	defff304 	addi	sp,sp,-52
 100a3c0:	dfc00c15 	stw	ra,48(sp)
 100a3c4:	df000b15 	stw	fp,44(sp)
 100a3c8:	df000b04 	addi	fp,sp,44
 100a3cc:	e13ffc15 	stw	r4,-16(fp)
 100a3d0:	e17ffd15 	stw	r5,-12(fp)
 100a3d4:	e1bffe15 	stw	r6,-8(fp)
 100a3d8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 100a3dc:	e0bffd17 	ldw	r2,-12(fp)
 100a3e0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100a3e4:	00004706 	br	100a504 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100a3e8:	e0bffc17 	ldw	r2,-16(fp)
 100a3ec:	10800a17 	ldw	r2,40(r2)
 100a3f0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100a3f4:	e0bffc17 	ldw	r2,-16(fp)
 100a3f8:	10800b17 	ldw	r2,44(r2)
 100a3fc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 100a400:	e0fff717 	ldw	r3,-36(fp)
 100a404:	e0bff817 	ldw	r2,-32(fp)
 100a408:	18800536 	bltu	r3,r2,100a420 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100a40c:	e0fff717 	ldw	r3,-36(fp)
 100a410:	e0bff817 	ldw	r2,-32(fp)
 100a414:	1885c83a 	sub	r2,r3,r2
 100a418:	e0bff615 	stw	r2,-40(fp)
 100a41c:	00000406 	br	100a430 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100a420:	00c20004 	movi	r3,2048
 100a424:	e0bff817 	ldw	r2,-32(fp)
 100a428:	1885c83a 	sub	r2,r3,r2
 100a42c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 100a430:	e0bff617 	ldw	r2,-40(fp)
 100a434:	10001e26 	beq	r2,zero,100a4b0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 100a438:	e0fffe17 	ldw	r3,-8(fp)
 100a43c:	e0bff617 	ldw	r2,-40(fp)
 100a440:	1880022e 	bgeu	r3,r2,100a44c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 100a444:	e0bffe17 	ldw	r2,-8(fp)
 100a448:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100a44c:	e0bffc17 	ldw	r2,-16(fp)
 100a450:	10c00e04 	addi	r3,r2,56
 100a454:	e0bff817 	ldw	r2,-32(fp)
 100a458:	1885883a 	add	r2,r3,r2
 100a45c:	e1bff617 	ldw	r6,-40(fp)
 100a460:	100b883a 	mov	r5,r2
 100a464:	e13ff517 	ldw	r4,-44(fp)
 100a468:	100bf1c0 	call	100bf1c <memcpy>
      ptr   += n;
 100a46c:	e0fff517 	ldw	r3,-44(fp)
 100a470:	e0bff617 	ldw	r2,-40(fp)
 100a474:	1885883a 	add	r2,r3,r2
 100a478:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 100a47c:	e0fffe17 	ldw	r3,-8(fp)
 100a480:	e0bff617 	ldw	r2,-40(fp)
 100a484:	1885c83a 	sub	r2,r3,r2
 100a488:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100a48c:	e0fff817 	ldw	r3,-32(fp)
 100a490:	e0bff617 	ldw	r2,-40(fp)
 100a494:	1885883a 	add	r2,r3,r2
 100a498:	10c1ffcc 	andi	r3,r2,2047
 100a49c:	e0bffc17 	ldw	r2,-16(fp)
 100a4a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100a4a4:	e0bffe17 	ldw	r2,-8(fp)
 100a4a8:	00bfcf16 	blt	zero,r2,100a3e8 <_gp+0xffff4d8c>
 100a4ac:	00000106 	br	100a4b4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 100a4b0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 100a4b4:	e0fff517 	ldw	r3,-44(fp)
 100a4b8:	e0bffd17 	ldw	r2,-12(fp)
 100a4bc:	1880141e 	bne	r3,r2,100a510 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100a4c0:	e0bfff17 	ldw	r2,-4(fp)
 100a4c4:	1090000c 	andi	r2,r2,16384
 100a4c8:	1000131e 	bne	r2,zero,100a518 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100a4cc:	0001883a 	nop
 100a4d0:	e0bffc17 	ldw	r2,-16(fp)
 100a4d4:	10c00a17 	ldw	r3,40(r2)
 100a4d8:	e0bff717 	ldw	r2,-36(fp)
 100a4dc:	1880051e 	bne	r3,r2,100a4f4 <altera_avalon_jtag_uart_read+0x138>
 100a4e0:	e0bffc17 	ldw	r2,-16(fp)
 100a4e4:	10c00917 	ldw	r3,36(r2)
 100a4e8:	e0bffc17 	ldw	r2,-16(fp)
 100a4ec:	10800117 	ldw	r2,4(r2)
 100a4f0:	18bff736 	bltu	r3,r2,100a4d0 <_gp+0xffff4e74>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100a4f4:	e0bffc17 	ldw	r2,-16(fp)
 100a4f8:	10c00a17 	ldw	r3,40(r2)
 100a4fc:	e0bff717 	ldw	r2,-36(fp)
 100a500:	18800726 	beq	r3,r2,100a520 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100a504:	e0bffe17 	ldw	r2,-8(fp)
 100a508:	00bfb716 	blt	zero,r2,100a3e8 <_gp+0xffff4d8c>
 100a50c:	00000506 	br	100a524 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 100a510:	0001883a 	nop
 100a514:	00000306 	br	100a524 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 100a518:	0001883a 	nop
 100a51c:	00000106 	br	100a524 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 100a520:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100a524:	e0fff517 	ldw	r3,-44(fp)
 100a528:	e0bffd17 	ldw	r2,-12(fp)
 100a52c:	18801826 	beq	r3,r2,100a590 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a530:	0005303a 	rdctl	r2,status
 100a534:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a538:	e0fffb17 	ldw	r3,-20(fp)
 100a53c:	00bfff84 	movi	r2,-2
 100a540:	1884703a 	and	r2,r3,r2
 100a544:	1001703a 	wrctl	status,r2
  
  return context;
 100a548:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100a54c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100a550:	e0bffc17 	ldw	r2,-16(fp)
 100a554:	10800817 	ldw	r2,32(r2)
 100a558:	10c00054 	ori	r3,r2,1
 100a55c:	e0bffc17 	ldw	r2,-16(fp)
 100a560:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100a564:	e0bffc17 	ldw	r2,-16(fp)
 100a568:	10800017 	ldw	r2,0(r2)
 100a56c:	10800104 	addi	r2,r2,4
 100a570:	1007883a 	mov	r3,r2
 100a574:	e0bffc17 	ldw	r2,-16(fp)
 100a578:	10800817 	ldw	r2,32(r2)
 100a57c:	18800035 	stwio	r2,0(r3)
 100a580:	e0bffa17 	ldw	r2,-24(fp)
 100a584:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a588:	e0bff917 	ldw	r2,-28(fp)
 100a58c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100a590:	e0fff517 	ldw	r3,-44(fp)
 100a594:	e0bffd17 	ldw	r2,-12(fp)
 100a598:	18800426 	beq	r3,r2,100a5ac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 100a59c:	e0fff517 	ldw	r3,-44(fp)
 100a5a0:	e0bffd17 	ldw	r2,-12(fp)
 100a5a4:	1885c83a 	sub	r2,r3,r2
 100a5a8:	00000606 	br	100a5c4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 100a5ac:	e0bfff17 	ldw	r2,-4(fp)
 100a5b0:	1090000c 	andi	r2,r2,16384
 100a5b4:	10000226 	beq	r2,zero,100a5c0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100a5b8:	00bffd44 	movi	r2,-11
 100a5bc:	00000106 	br	100a5c4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 100a5c0:	00bffec4 	movi	r2,-5
}
 100a5c4:	e037883a 	mov	sp,fp
 100a5c8:	dfc00117 	ldw	ra,4(sp)
 100a5cc:	df000017 	ldw	fp,0(sp)
 100a5d0:	dec00204 	addi	sp,sp,8
 100a5d4:	f800283a 	ret

0100a5d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100a5d8:	defff304 	addi	sp,sp,-52
 100a5dc:	dfc00c15 	stw	ra,48(sp)
 100a5e0:	df000b15 	stw	fp,44(sp)
 100a5e4:	df000b04 	addi	fp,sp,44
 100a5e8:	e13ffc15 	stw	r4,-16(fp)
 100a5ec:	e17ffd15 	stw	r5,-12(fp)
 100a5f0:	e1bffe15 	stw	r6,-8(fp)
 100a5f4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100a5f8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100a5fc:	e0bffd17 	ldw	r2,-12(fp)
 100a600:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100a604:	00003706 	br	100a6e4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100a608:	e0bffc17 	ldw	r2,-16(fp)
 100a60c:	10800c17 	ldw	r2,48(r2)
 100a610:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 100a614:	e0bffc17 	ldw	r2,-16(fp)
 100a618:	10800d17 	ldw	r2,52(r2)
 100a61c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 100a620:	e0fff917 	ldw	r3,-28(fp)
 100a624:	e0bff517 	ldw	r2,-44(fp)
 100a628:	1880062e 	bgeu	r3,r2,100a644 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100a62c:	e0fff517 	ldw	r3,-44(fp)
 100a630:	e0bff917 	ldw	r2,-28(fp)
 100a634:	1885c83a 	sub	r2,r3,r2
 100a638:	10bfffc4 	addi	r2,r2,-1
 100a63c:	e0bff615 	stw	r2,-40(fp)
 100a640:	00000b06 	br	100a670 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 100a644:	e0bff517 	ldw	r2,-44(fp)
 100a648:	10000526 	beq	r2,zero,100a660 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100a64c:	00c20004 	movi	r3,2048
 100a650:	e0bff917 	ldw	r2,-28(fp)
 100a654:	1885c83a 	sub	r2,r3,r2
 100a658:	e0bff615 	stw	r2,-40(fp)
 100a65c:	00000406 	br	100a670 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100a660:	00c1ffc4 	movi	r3,2047
 100a664:	e0bff917 	ldw	r2,-28(fp)
 100a668:	1885c83a 	sub	r2,r3,r2
 100a66c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 100a670:	e0bff617 	ldw	r2,-40(fp)
 100a674:	10001e26 	beq	r2,zero,100a6f0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 100a678:	e0fffe17 	ldw	r3,-8(fp)
 100a67c:	e0bff617 	ldw	r2,-40(fp)
 100a680:	1880022e 	bgeu	r3,r2,100a68c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 100a684:	e0bffe17 	ldw	r2,-8(fp)
 100a688:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100a68c:	e0bffc17 	ldw	r2,-16(fp)
 100a690:	10c20e04 	addi	r3,r2,2104
 100a694:	e0bff917 	ldw	r2,-28(fp)
 100a698:	1885883a 	add	r2,r3,r2
 100a69c:	e1bff617 	ldw	r6,-40(fp)
 100a6a0:	e17ffd17 	ldw	r5,-12(fp)
 100a6a4:	1009883a 	mov	r4,r2
 100a6a8:	100bf1c0 	call	100bf1c <memcpy>
      ptr   += n;
 100a6ac:	e0fffd17 	ldw	r3,-12(fp)
 100a6b0:	e0bff617 	ldw	r2,-40(fp)
 100a6b4:	1885883a 	add	r2,r3,r2
 100a6b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 100a6bc:	e0fffe17 	ldw	r3,-8(fp)
 100a6c0:	e0bff617 	ldw	r2,-40(fp)
 100a6c4:	1885c83a 	sub	r2,r3,r2
 100a6c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100a6cc:	e0fff917 	ldw	r3,-28(fp)
 100a6d0:	e0bff617 	ldw	r2,-40(fp)
 100a6d4:	1885883a 	add	r2,r3,r2
 100a6d8:	10c1ffcc 	andi	r3,r2,2047
 100a6dc:	e0bffc17 	ldw	r2,-16(fp)
 100a6e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100a6e4:	e0bffe17 	ldw	r2,-8(fp)
 100a6e8:	00bfc716 	blt	zero,r2,100a608 <_gp+0xffff4fac>
 100a6ec:	00000106 	br	100a6f4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 100a6f0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a6f4:	0005303a 	rdctl	r2,status
 100a6f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a6fc:	e0fffb17 	ldw	r3,-20(fp)
 100a700:	00bfff84 	movi	r2,-2
 100a704:	1884703a 	and	r2,r3,r2
 100a708:	1001703a 	wrctl	status,r2
  
  return context;
 100a70c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100a710:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100a714:	e0bffc17 	ldw	r2,-16(fp)
 100a718:	10800817 	ldw	r2,32(r2)
 100a71c:	10c00094 	ori	r3,r2,2
 100a720:	e0bffc17 	ldw	r2,-16(fp)
 100a724:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100a728:	e0bffc17 	ldw	r2,-16(fp)
 100a72c:	10800017 	ldw	r2,0(r2)
 100a730:	10800104 	addi	r2,r2,4
 100a734:	1007883a 	mov	r3,r2
 100a738:	e0bffc17 	ldw	r2,-16(fp)
 100a73c:	10800817 	ldw	r2,32(r2)
 100a740:	18800035 	stwio	r2,0(r3)
 100a744:	e0bffa17 	ldw	r2,-24(fp)
 100a748:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a74c:	e0bff817 	ldw	r2,-32(fp)
 100a750:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100a754:	e0bffe17 	ldw	r2,-8(fp)
 100a758:	0080100e 	bge	zero,r2,100a79c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 100a75c:	e0bfff17 	ldw	r2,-4(fp)
 100a760:	1090000c 	andi	r2,r2,16384
 100a764:	1000101e 	bne	r2,zero,100a7a8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100a768:	0001883a 	nop
 100a76c:	e0bffc17 	ldw	r2,-16(fp)
 100a770:	10c00d17 	ldw	r3,52(r2)
 100a774:	e0bff517 	ldw	r2,-44(fp)
 100a778:	1880051e 	bne	r3,r2,100a790 <altera_avalon_jtag_uart_write+0x1b8>
 100a77c:	e0bffc17 	ldw	r2,-16(fp)
 100a780:	10c00917 	ldw	r3,36(r2)
 100a784:	e0bffc17 	ldw	r2,-16(fp)
 100a788:	10800117 	ldw	r2,4(r2)
 100a78c:	18bff736 	bltu	r3,r2,100a76c <_gp+0xffff5110>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 100a790:	e0bffc17 	ldw	r2,-16(fp)
 100a794:	10800917 	ldw	r2,36(r2)
 100a798:	1000051e 	bne	r2,zero,100a7b0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 100a79c:	e0bffe17 	ldw	r2,-8(fp)
 100a7a0:	00bfd016 	blt	zero,r2,100a6e4 <_gp+0xffff5088>
 100a7a4:	00000306 	br	100a7b4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 100a7a8:	0001883a 	nop
 100a7ac:	00000106 	br	100a7b4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 100a7b0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100a7b4:	e0fffd17 	ldw	r3,-12(fp)
 100a7b8:	e0bff717 	ldw	r2,-36(fp)
 100a7bc:	18800426 	beq	r3,r2,100a7d0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 100a7c0:	e0fffd17 	ldw	r3,-12(fp)
 100a7c4:	e0bff717 	ldw	r2,-36(fp)
 100a7c8:	1885c83a 	sub	r2,r3,r2
 100a7cc:	00000606 	br	100a7e8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 100a7d0:	e0bfff17 	ldw	r2,-4(fp)
 100a7d4:	1090000c 	andi	r2,r2,16384
 100a7d8:	10000226 	beq	r2,zero,100a7e4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 100a7dc:	00bffd44 	movi	r2,-11
 100a7e0:	00000106 	br	100a7e8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100a7e4:	00bffec4 	movi	r2,-5
}
 100a7e8:	e037883a 	mov	sp,fp
 100a7ec:	dfc00117 	ldw	ra,4(sp)
 100a7f0:	df000017 	ldw	fp,0(sp)
 100a7f4:	dec00204 	addi	sp,sp,8
 100a7f8:	f800283a 	ret

0100a7fc <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
 100a7fc:	defffc04 	addi	sp,sp,-16
 100a800:	dfc00315 	stw	ra,12(sp)
 100a804:	df000215 	stw	fp,8(sp)
 100a808:	df000204 	addi	fp,sp,8
 100a80c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
 100a810:	01404074 	movhi	r5,257
 100a814:	29759b04 	addi	r5,r5,-10644
 100a818:	e13fff17 	ldw	r4,-4(fp)
 100a81c:	100b3a80 	call	100b3a8 <alt_find_dev>
 100a820:	e0bffe15 	stw	r2,-8(fp)
  return dev;
 100a824:	e0bffe17 	ldw	r2,-8(fp)
}
 100a828:	e037883a 	mov	sp,fp
 100a82c:	dfc00117 	ldw	ra,4(sp)
 100a830:	df000017 	ldw	fp,0(sp)
 100a834:	dec00204 	addi	sp,sp,8
 100a838:	f800283a 	ret

0100a83c <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
 100a83c:	defffd04 	addi	sp,sp,-12
 100a840:	df000215 	stw	fp,8(sp)
 100a844:	df000204 	addi	fp,sp,8
 100a848:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 100a84c:	e0bfff17 	ldw	r2,-4(fp)
 100a850:	10800a17 	ldw	r2,40(r2)
 100a854:	10800037 	ldwio	r2,0(r2)
 100a858:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
 100a85c:	e0bffe17 	ldw	r2,-8(fp)
 100a860:	10800054 	ori	r2,r2,1
 100a864:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 100a868:	e0bfff17 	ldw	r2,-4(fp)
 100a86c:	10800a17 	ldw	r2,40(r2)
 100a870:	1007883a 	mov	r3,r2
 100a874:	e0bffe17 	ldw	r2,-8(fp)
 100a878:	18800035 	stwio	r2,0(r3)
}
 100a87c:	0001883a 	nop
 100a880:	e037883a 	mov	sp,fp
 100a884:	df000017 	ldw	fp,0(sp)
 100a888:	dec00104 	addi	sp,sp,4
 100a88c:	f800283a 	ret

0100a890 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
 100a890:	defffd04 	addi	sp,sp,-12
 100a894:	df000215 	stw	fp,8(sp)
 100a898:	df000204 	addi	fp,sp,8
 100a89c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 100a8a0:	e0bfff17 	ldw	r2,-4(fp)
 100a8a4:	10800a17 	ldw	r2,40(r2)
 100a8a8:	10800037 	ldwio	r2,0(r2)
 100a8ac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
 100a8b0:	e0fffe17 	ldw	r3,-8(fp)
 100a8b4:	00bfff84 	movi	r2,-2
 100a8b8:	1884703a 	and	r2,r3,r2
 100a8bc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 100a8c0:	e0bfff17 	ldw	r2,-4(fp)
 100a8c4:	10800a17 	ldw	r2,40(r2)
 100a8c8:	1007883a 	mov	r3,r2
 100a8cc:	e0bffe17 	ldw	r2,-8(fp)
 100a8d0:	18800035 	stwio	r2,0(r3)
}
 100a8d4:	0001883a 	nop
 100a8d8:	e037883a 	mov	sp,fp
 100a8dc:	df000017 	ldw	fp,0(sp)
 100a8e0:	dec00104 	addi	sp,sp,4
 100a8e4:	f800283a 	ret

0100a8e8 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
 100a8e8:	defffd04 	addi	sp,sp,-12
 100a8ec:	df000215 	stw	fp,8(sp)
 100a8f0:	df000204 	addi	fp,sp,8
 100a8f4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 100a8f8:	e0bfff17 	ldw	r2,-4(fp)
 100a8fc:	10800a17 	ldw	r2,40(r2)
 100a900:	10800037 	ldwio	r2,0(r2)
 100a904:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
 100a908:	e0bffe17 	ldw	r2,-8(fp)
 100a90c:	10800094 	ori	r2,r2,2
 100a910:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 100a914:	e0bfff17 	ldw	r2,-4(fp)
 100a918:	10800a17 	ldw	r2,40(r2)
 100a91c:	1007883a 	mov	r3,r2
 100a920:	e0bffe17 	ldw	r2,-8(fp)
 100a924:	18800035 	stwio	r2,0(r3)
}
 100a928:	0001883a 	nop
 100a92c:	e037883a 	mov	sp,fp
 100a930:	df000017 	ldw	fp,0(sp)
 100a934:	dec00104 	addi	sp,sp,4
 100a938:	f800283a 	ret

0100a93c <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
 100a93c:	defffd04 	addi	sp,sp,-12
 100a940:	df000215 	stw	fp,8(sp)
 100a944:	df000204 	addi	fp,sp,8
 100a948:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 100a94c:	e0bfff17 	ldw	r2,-4(fp)
 100a950:	10800a17 	ldw	r2,40(r2)
 100a954:	10800037 	ldwio	r2,0(r2)
 100a958:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
 100a95c:	e0fffe17 	ldw	r3,-8(fp)
 100a960:	00bfff44 	movi	r2,-3
 100a964:	1884703a 	and	r2,r3,r2
 100a968:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 100a96c:	e0bfff17 	ldw	r2,-4(fp)
 100a970:	10800a17 	ldw	r2,40(r2)
 100a974:	1007883a 	mov	r3,r2
 100a978:	e0bffe17 	ldw	r2,-8(fp)
 100a97c:	18800035 	stwio	r2,0(r3)
}
 100a980:	0001883a 	nop
 100a984:	e037883a 	mov	sp,fp
 100a988:	df000017 	ldw	fp,0(sp)
 100a98c:	dec00104 	addi	sp,sp,4
 100a990:	f800283a 	ret

0100a994 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
 100a994:	defffd04 	addi	sp,sp,-12
 100a998:	df000215 	stw	fp,8(sp)
 100a99c:	df000204 	addi	fp,sp,8
 100a9a0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 100a9a4:	e0bfff17 	ldw	r2,-4(fp)
 100a9a8:	10800a17 	ldw	r2,40(r2)
 100a9ac:	10800037 	ldwio	r2,0(r2)
 100a9b0:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
 100a9b4:	e0bffe17 	ldw	r2,-8(fp)
 100a9b8:	1080400c 	andi	r2,r2,256
 100a9bc:	1004c03a 	cmpne	r2,r2,zero
 100a9c0:	10803fcc 	andi	r2,r2,255
}
 100a9c4:	e037883a 	mov	sp,fp
 100a9c8:	df000017 	ldw	fp,0(sp)
 100a9cc:	dec00104 	addi	sp,sp,4
 100a9d0:	f800283a 	ret

0100a9d4 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
 100a9d4:	defffd04 	addi	sp,sp,-12
 100a9d8:	df000215 	stw	fp,8(sp)
 100a9dc:	df000204 	addi	fp,sp,8
 100a9e0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 100a9e4:	e0bfff17 	ldw	r2,-4(fp)
 100a9e8:	10800a17 	ldw	r2,40(r2)
 100a9ec:	10800037 	ldwio	r2,0(r2)
 100a9f0:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
 100a9f4:	e0bffe17 	ldw	r2,-8(fp)
 100a9f8:	1080800c 	andi	r2,r2,512
 100a9fc:	1004c03a 	cmpne	r2,r2,zero
 100aa00:	10803fcc 	andi	r2,r2,255
}
 100aa04:	e037883a 	mov	sp,fp
 100aa08:	df000017 	ldw	fp,0(sp)
 100aa0c:	dec00104 	addi	sp,sp,4
 100aa10:	f800283a 	ret

0100aa14 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
 100aa14:	defffd04 	addi	sp,sp,-12
 100aa18:	df000215 	stw	fp,8(sp)
 100aa1c:	df000204 	addi	fp,sp,8
 100aa20:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 100aa24:	e0bfff17 	ldw	r2,-4(fp)
 100aa28:	10800a17 	ldw	r2,40(r2)
 100aa2c:	10800037 	ldwio	r2,0(r2)
 100aa30:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
 100aa34:	e0bffe17 	ldw	r2,-8(fp)
 100aa38:	10800114 	ori	r2,r2,4
 100aa3c:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
 100aa40:	e0bffe17 	ldw	r2,-8(fp)
 100aa44:	10800214 	ori	r2,r2,8
 100aa48:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 100aa4c:	e0bfff17 	ldw	r2,-4(fp)
 100aa50:	10800a17 	ldw	r2,40(r2)
 100aa54:	1007883a 	mov	r3,r2
 100aa58:	e0bffe17 	ldw	r2,-8(fp)
 100aa5c:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
 100aa60:	e0fffe17 	ldw	r3,-8(fp)
 100aa64:	00bffec4 	movi	r2,-5
 100aa68:	1884703a 	and	r2,r3,r2
 100aa6c:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
 100aa70:	e0fffe17 	ldw	r3,-8(fp)
 100aa74:	00bffdc4 	movi	r2,-9
 100aa78:	1884703a 	and	r2,r3,r2
 100aa7c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 100aa80:	e0bfff17 	ldw	r2,-4(fp)
 100aa84:	10800a17 	ldw	r2,40(r2)
 100aa88:	1007883a 	mov	r3,r2
 100aa8c:	e0bffe17 	ldw	r2,-8(fp)
 100aa90:	18800035 	stwio	r2,0(r3)
}
 100aa94:	0001883a 	nop
 100aa98:	e037883a 	mov	sp,fp
 100aa9c:	df000017 	ldw	fp,0(sp)
 100aaa0:	dec00104 	addi	sp,sp,4
 100aaa4:	f800283a 	ret

0100aaa8 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
 100aaa8:	defffc04 	addi	sp,sp,-16
 100aaac:	df000315 	stw	fp,12(sp)
 100aab0:	df000304 	addi	fp,sp,12
 100aab4:	e13ffe15 	stw	r4,-8(fp)
 100aab8:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 100aabc:	e0bffe17 	ldw	r2,-8(fp)
 100aac0:	10800a17 	ldw	r2,40(r2)
 100aac4:	10800104 	addi	r2,r2,4
 100aac8:	10800037 	ldwio	r2,0(r2)
 100aacc:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
 100aad0:	e0bfff17 	ldw	r2,-4(fp)
 100aad4:	1000041e 	bne	r2,zero,100aae8 <alt_up_audio_read_fifo_avail+0x40>
 100aad8:	e0bffd17 	ldw	r2,-12(fp)
 100aadc:	10bfc00c 	andi	r2,r2,65280
 100aae0:	1004d23a 	srli	r2,r2,8
 100aae4:	00000206 	br	100aaf0 <alt_up_audio_read_fifo_avail+0x48>
 100aae8:	e0bffd17 	ldw	r2,-12(fp)
 100aaec:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 100aaf0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
 100aaf4:	e0bffd17 	ldw	r2,-12(fp)
}
 100aaf8:	e037883a 	mov	sp,fp
 100aafc:	df000017 	ldw	fp,0(sp)
 100ab00:	dec00104 	addi	sp,sp,4
 100ab04:	f800283a 	ret

0100ab08 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 100ab08:	defffa04 	addi	sp,sp,-24
 100ab0c:	dfc00515 	stw	ra,20(sp)
 100ab10:	df000415 	stw	fp,16(sp)
 100ab14:	df000404 	addi	fp,sp,16
 100ab18:	e13ffd15 	stw	r4,-12(fp)
 100ab1c:	e17ffe15 	stw	r5,-8(fp)
 100ab20:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
 100ab24:	01400044 	movi	r5,1
 100ab28:	e13ffd17 	ldw	r4,-12(fp)
 100ab2c:	100aaa80 	call	100aaa8 <alt_up_audio_read_fifo_avail>
 100ab30:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 100ab34:	e0bffc17 	ldw	r2,-16(fp)
 100ab38:	10801868 	cmpgeui	r2,r2,97
 100ab3c:	1000021e 	bne	r2,zero,100ab48 <alt_up_audio_record_r+0x40>
		return 0;
 100ab40:	0005883a 	mov	r2,zero
 100ab44:	00000506 	br	100ab5c <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 100ab48:	01c00044 	movi	r7,1
 100ab4c:	e1bfff17 	ldw	r6,-4(fp)
 100ab50:	e17ffe17 	ldw	r5,-8(fp)
 100ab54:	e13ffd17 	ldw	r4,-12(fp)
 100ab58:	100ad080 	call	100ad08 <alt_up_audio_read_fifo>
}
 100ab5c:	e037883a 	mov	sp,fp
 100ab60:	dfc00117 	ldw	ra,4(sp)
 100ab64:	df000017 	ldw	fp,0(sp)
 100ab68:	dec00204 	addi	sp,sp,8
 100ab6c:	f800283a 	ret

0100ab70 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 100ab70:	defffa04 	addi	sp,sp,-24
 100ab74:	dfc00515 	stw	ra,20(sp)
 100ab78:	df000415 	stw	fp,16(sp)
 100ab7c:	df000404 	addi	fp,sp,16
 100ab80:	e13ffd15 	stw	r4,-12(fp)
 100ab84:	e17ffe15 	stw	r5,-8(fp)
 100ab88:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
 100ab8c:	000b883a 	mov	r5,zero
 100ab90:	e13ffd17 	ldw	r4,-12(fp)
 100ab94:	100aaa80 	call	100aaa8 <alt_up_audio_read_fifo_avail>
 100ab98:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 100ab9c:	e0bffc17 	ldw	r2,-16(fp)
 100aba0:	10801868 	cmpgeui	r2,r2,97
 100aba4:	1000021e 	bne	r2,zero,100abb0 <alt_up_audio_record_l+0x40>
		return 0;
 100aba8:	0005883a 	mov	r2,zero
 100abac:	00000506 	br	100abc4 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 100abb0:	000f883a 	mov	r7,zero
 100abb4:	e1bfff17 	ldw	r6,-4(fp)
 100abb8:	e17ffe17 	ldw	r5,-8(fp)
 100abbc:	e13ffd17 	ldw	r4,-12(fp)
 100abc0:	100ad080 	call	100ad08 <alt_up_audio_read_fifo>
}
 100abc4:	e037883a 	mov	sp,fp
 100abc8:	dfc00117 	ldw	ra,4(sp)
 100abcc:	df000017 	ldw	fp,0(sp)
 100abd0:	dec00204 	addi	sp,sp,8
 100abd4:	f800283a 	ret

0100abd8 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
 100abd8:	defffc04 	addi	sp,sp,-16
 100abdc:	df000315 	stw	fp,12(sp)
 100abe0:	df000304 	addi	fp,sp,12
 100abe4:	e13ffe15 	stw	r4,-8(fp)
 100abe8:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 100abec:	e0bffe17 	ldw	r2,-8(fp)
 100abf0:	10800a17 	ldw	r2,40(r2)
 100abf4:	10800104 	addi	r2,r2,4
 100abf8:	10800037 	ldwio	r2,0(r2)
 100abfc:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 100ac00:	e0bfff17 	ldw	r2,-4(fp)
 100ac04:	1000031e 	bne	r2,zero,100ac14 <alt_up_audio_write_fifo_space+0x3c>
 100ac08:	e0bffd17 	ldw	r2,-12(fp)
 100ac0c:	1004d63a 	srli	r2,r2,24
 100ac10:	00000306 	br	100ac20 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 100ac14:	e0bffd17 	ldw	r2,-12(fp)
 100ac18:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 100ac1c:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 100ac20:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
 100ac24:	e0bffd17 	ldw	r2,-12(fp)
}
 100ac28:	e037883a 	mov	sp,fp
 100ac2c:	df000017 	ldw	fp,0(sp)
 100ac30:	dec00104 	addi	sp,sp,4
 100ac34:	f800283a 	ret

0100ac38 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 100ac38:	defffa04 	addi	sp,sp,-24
 100ac3c:	dfc00515 	stw	ra,20(sp)
 100ac40:	df000415 	stw	fp,16(sp)
 100ac44:	df000404 	addi	fp,sp,16
 100ac48:	e13ffd15 	stw	r4,-12(fp)
 100ac4c:	e17ffe15 	stw	r5,-8(fp)
 100ac50:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
 100ac54:	01400044 	movi	r5,1
 100ac58:	e13ffd17 	ldw	r4,-12(fp)
 100ac5c:	100abd80 	call	100abd8 <alt_up_audio_write_fifo_space>
 100ac60:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 100ac64:	e0bffc17 	ldw	r2,-16(fp)
 100ac68:	10801868 	cmpgeui	r2,r2,97
 100ac6c:	1000021e 	bne	r2,zero,100ac78 <alt_up_audio_play_r+0x40>
		return 0;
 100ac70:	0005883a 	mov	r2,zero
 100ac74:	00000506 	br	100ac8c <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 100ac78:	01c00044 	movi	r7,1
 100ac7c:	e1bfff17 	ldw	r6,-4(fp)
 100ac80:	e17ffe17 	ldw	r5,-8(fp)
 100ac84:	e13ffd17 	ldw	r4,-12(fp)
 100ac88:	100ade80 	call	100ade8 <alt_up_audio_write_fifo>
}
 100ac8c:	e037883a 	mov	sp,fp
 100ac90:	dfc00117 	ldw	ra,4(sp)
 100ac94:	df000017 	ldw	fp,0(sp)
 100ac98:	dec00204 	addi	sp,sp,8
 100ac9c:	f800283a 	ret

0100aca0 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 100aca0:	defffa04 	addi	sp,sp,-24
 100aca4:	dfc00515 	stw	ra,20(sp)
 100aca8:	df000415 	stw	fp,16(sp)
 100acac:	df000404 	addi	fp,sp,16
 100acb0:	e13ffd15 	stw	r4,-12(fp)
 100acb4:	e17ffe15 	stw	r5,-8(fp)
 100acb8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
 100acbc:	000b883a 	mov	r5,zero
 100acc0:	e13ffd17 	ldw	r4,-12(fp)
 100acc4:	100abd80 	call	100abd8 <alt_up_audio_write_fifo_space>
 100acc8:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 100accc:	e0bffc17 	ldw	r2,-16(fp)
 100acd0:	10801868 	cmpgeui	r2,r2,97
 100acd4:	1000021e 	bne	r2,zero,100ace0 <alt_up_audio_play_l+0x40>
		return 0;
 100acd8:	0005883a 	mov	r2,zero
 100acdc:	00000506 	br	100acf4 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 100ace0:	000f883a 	mov	r7,zero
 100ace4:	e1bfff17 	ldw	r6,-4(fp)
 100ace8:	e17ffe17 	ldw	r5,-8(fp)
 100acec:	e13ffd17 	ldw	r4,-12(fp)
 100acf0:	100ade80 	call	100ade8 <alt_up_audio_write_fifo>
}
 100acf4:	e037883a 	mov	sp,fp
 100acf8:	dfc00117 	ldw	ra,4(sp)
 100acfc:	df000017 	ldw	fp,0(sp)
 100ad00:	dec00204 	addi	sp,sp,8
 100ad04:	f800283a 	ret

0100ad08 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 100ad08:	defff904 	addi	sp,sp,-28
 100ad0c:	df000615 	stw	fp,24(sp)
 100ad10:	df000604 	addi	fp,sp,24
 100ad14:	e13ffc15 	stw	r4,-16(fp)
 100ad18:	e17ffd15 	stw	r5,-12(fp)
 100ad1c:	e1bffe15 	stw	r6,-8(fp)
 100ad20:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 100ad24:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 100ad28:	00002506 	br	100adc0 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 100ad2c:	e0bffc17 	ldw	r2,-16(fp)
 100ad30:	10800a17 	ldw	r2,40(r2)
 100ad34:	10800104 	addi	r2,r2,4
 100ad38:	10800037 	ldwio	r2,0(r2)
 100ad3c:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
 100ad40:	e0bfff17 	ldw	r2,-4(fp)
 100ad44:	1000041e 	bne	r2,zero,100ad58 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
 100ad48:	e0bffb17 	ldw	r2,-20(fp)
 100ad4c:	10bfc00c 	andi	r2,r2,65280
			:
 100ad50:	1004d23a 	srli	r2,r2,8
 100ad54:	00000206 	br	100ad60 <alt_up_audio_read_fifo+0x58>
 100ad58:	e0bffb17 	ldw	r2,-20(fp)
 100ad5c:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 100ad60:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
 100ad64:	e0bffb17 	ldw	r2,-20(fp)
 100ad68:	10001926 	beq	r2,zero,100add0 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 100ad6c:	e0bffa17 	ldw	r2,-24(fp)
 100ad70:	1085883a 	add	r2,r2,r2
 100ad74:	1085883a 	add	r2,r2,r2
 100ad78:	1007883a 	mov	r3,r2
 100ad7c:	e0bffd17 	ldw	r2,-12(fp)
 100ad80:	10c5883a 	add	r2,r2,r3
 100ad84:	e0ffff17 	ldw	r3,-4(fp)
 100ad88:	1800051e 	bne	r3,zero,100ada0 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 100ad8c:	e0fffc17 	ldw	r3,-16(fp)
 100ad90:	18c00a17 	ldw	r3,40(r3)
 100ad94:	18c00204 	addi	r3,r3,8
 100ad98:	18c00037 	ldwio	r3,0(r3)
 100ad9c:	00000406 	br	100adb0 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
 100ada0:	e0fffc17 	ldw	r3,-16(fp)
 100ada4:	18c00a17 	ldw	r3,40(r3)
 100ada8:	18c00304 	addi	r3,r3,12
 100adac:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 100adb0:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
 100adb4:	e0bffa17 	ldw	r2,-24(fp)
 100adb8:	10800044 	addi	r2,r2,1
 100adbc:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 100adc0:	e0fffa17 	ldw	r3,-24(fp)
 100adc4:	e0bffe17 	ldw	r2,-8(fp)
 100adc8:	18bfd816 	blt	r3,r2,100ad2c <_gp+0xffff56d0>
 100adcc:	00000106 	br	100add4 <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
 100add0:	0001883a 	nop
		}
	}
	return count;
 100add4:	e0bffa17 	ldw	r2,-24(fp)
}
 100add8:	e037883a 	mov	sp,fp
 100addc:	df000017 	ldw	fp,0(sp)
 100ade0:	dec00104 	addi	sp,sp,4
 100ade4:	f800283a 	ret

0100ade8 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 100ade8:	defff904 	addi	sp,sp,-28
 100adec:	df000615 	stw	fp,24(sp)
 100adf0:	df000604 	addi	fp,sp,24
 100adf4:	e13ffc15 	stw	r4,-16(fp)
 100adf8:	e17ffd15 	stw	r5,-12(fp)
 100adfc:	e1bffe15 	stw	r6,-8(fp)
 100ae00:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 100ae04:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 100ae08:	00002f06 	br	100aec8 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 100ae0c:	e0bffc17 	ldw	r2,-16(fp)
 100ae10:	10800a17 	ldw	r2,40(r2)
 100ae14:	10800104 	addi	r2,r2,4
 100ae18:	10800037 	ldwio	r2,0(r2)
 100ae1c:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 100ae20:	e0bfff17 	ldw	r2,-4(fp)
 100ae24:	1000031e 	bne	r2,zero,100ae34 <alt_up_audio_write_fifo+0x4c>
 100ae28:	e0bffb17 	ldw	r2,-20(fp)
 100ae2c:	1004d63a 	srli	r2,r2,24
 100ae30:	00000306 	br	100ae40 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 100ae34:	e0bffb17 	ldw	r2,-20(fp)
 100ae38:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 100ae3c:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 100ae40:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
 100ae44:	e0bffb17 	ldw	r2,-20(fp)
 100ae48:	10002326 	beq	r2,zero,100aed8 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
 100ae4c:	e0bfff17 	ldw	r2,-4(fp)
 100ae50:	10000f1e 	bne	r2,zero,100ae90 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
 100ae54:	e0bffc17 	ldw	r2,-16(fp)
 100ae58:	10800a17 	ldw	r2,40(r2)
 100ae5c:	10800204 	addi	r2,r2,8
 100ae60:	1009883a 	mov	r4,r2
 100ae64:	e0bffa17 	ldw	r2,-24(fp)
 100ae68:	10c00044 	addi	r3,r2,1
 100ae6c:	e0fffa15 	stw	r3,-24(fp)
 100ae70:	1085883a 	add	r2,r2,r2
 100ae74:	1085883a 	add	r2,r2,r2
 100ae78:	1007883a 	mov	r3,r2
 100ae7c:	e0bffd17 	ldw	r2,-12(fp)
 100ae80:	10c5883a 	add	r2,r2,r3
 100ae84:	10800017 	ldw	r2,0(r2)
 100ae88:	20800035 	stwio	r2,0(r4)
 100ae8c:	00000e06 	br	100aec8 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
 100ae90:	e0bffc17 	ldw	r2,-16(fp)
 100ae94:	10800a17 	ldw	r2,40(r2)
 100ae98:	10800304 	addi	r2,r2,12
 100ae9c:	1009883a 	mov	r4,r2
 100aea0:	e0bffa17 	ldw	r2,-24(fp)
 100aea4:	10c00044 	addi	r3,r2,1
 100aea8:	e0fffa15 	stw	r3,-24(fp)
 100aeac:	1085883a 	add	r2,r2,r2
 100aeb0:	1085883a 	add	r2,r2,r2
 100aeb4:	1007883a 	mov	r3,r2
 100aeb8:	e0bffd17 	ldw	r2,-12(fp)
 100aebc:	10c5883a 	add	r2,r2,r3
 100aec0:	10800017 	ldw	r2,0(r2)
 100aec4:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 100aec8:	e0fffa17 	ldw	r3,-24(fp)
 100aecc:	e0bffe17 	ldw	r2,-8(fp)
 100aed0:	18bfce16 	blt	r3,r2,100ae0c <_gp+0xffff57b0>
 100aed4:	00000106 	br	100aedc <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
 100aed8:	0001883a 	nop
		}
	}
	return count;
 100aedc:	e0bffa17 	ldw	r2,-24(fp)
}
 100aee0:	e037883a 	mov	sp,fp
 100aee4:	df000017 	ldw	fp,0(sp)
 100aee8:	dec00104 	addi	sp,sp,4
 100aeec:	f800283a 	ret

0100aef0 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
 100aef0:	defffd04 	addi	sp,sp,-12
 100aef4:	df000215 	stw	fp,8(sp)
 100aef8:	df000204 	addi	fp,sp,8
 100aefc:	e13ffe15 	stw	r4,-8(fp)
 100af00:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 100af04:	e0bfff17 	ldw	r2,-4(fp)
 100af08:	1000051e 	bne	r2,zero,100af20 <alt_up_audio_read_fifo_head+0x30>
 100af0c:	e0bffe17 	ldw	r2,-8(fp)
 100af10:	10800a17 	ldw	r2,40(r2)
 100af14:	10800204 	addi	r2,r2,8
 100af18:	10800037 	ldwio	r2,0(r2)
 100af1c:	00000406 	br	100af30 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
 100af20:	e0bffe17 	ldw	r2,-8(fp)
 100af24:	10800a17 	ldw	r2,40(r2)
 100af28:	10800304 	addi	r2,r2,12
 100af2c:	10800037 	ldwio	r2,0(r2)
}
 100af30:	e037883a 	mov	sp,fp
 100af34:	df000017 	ldw	fp,0(sp)
 100af38:	dec00104 	addi	sp,sp,4
 100af3c:	f800283a 	ret

0100af40 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
 100af40:	defffc04 	addi	sp,sp,-16
 100af44:	df000315 	stw	fp,12(sp)
 100af48:	df000304 	addi	fp,sp,12
 100af4c:	e13ffd15 	stw	r4,-12(fp)
 100af50:	e17ffe15 	stw	r5,-8(fp)
 100af54:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
 100af58:	e0bfff17 	ldw	r2,-4(fp)
 100af5c:	1000071e 	bne	r2,zero,100af7c <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
 100af60:	e0bffd17 	ldw	r2,-12(fp)
 100af64:	10800a17 	ldw	r2,40(r2)
 100af68:	10800204 	addi	r2,r2,8
 100af6c:	1007883a 	mov	r3,r2
 100af70:	e0bffe17 	ldw	r2,-8(fp)
 100af74:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
 100af78:	00000606 	br	100af94 <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
 100af7c:	e0bffd17 	ldw	r2,-12(fp)
 100af80:	10800a17 	ldw	r2,40(r2)
 100af84:	10800304 	addi	r2,r2,12
 100af88:	1007883a 	mov	r3,r2
 100af8c:	e0bffe17 	ldw	r2,-8(fp)
 100af90:	18800035 	stwio	r2,0(r3)
}
 100af94:	0001883a 	nop
 100af98:	e037883a 	mov	sp,fp
 100af9c:	df000017 	ldw	fp,0(sp)
 100afa0:	dec00104 	addi	sp,sp,4
 100afa4:	f800283a 	ret

0100afa8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100afa8:	defff504 	addi	sp,sp,-44
 100afac:	df000a15 	stw	fp,40(sp)
 100afb0:	df000a04 	addi	fp,sp,40
 100afb4:	e13ffc15 	stw	r4,-16(fp)
 100afb8:	e17ffd15 	stw	r5,-12(fp)
 100afbc:	e1bffe15 	stw	r6,-8(fp)
 100afc0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100afc4:	e03ff615 	stw	zero,-40(fp)
 100afc8:	00804074 	movhi	r2,257
 100afcc:	10ba7804 	addi	r2,r2,-5664
 100afd0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100afd4:	10003f26 	beq	r2,zero,100b0d4 <alt_alarm_start+0x12c>
  {
    if (alarm)
 100afd8:	e0bffc17 	ldw	r2,-16(fp)
 100afdc:	10003b26 	beq	r2,zero,100b0cc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 100afe0:	e0bffc17 	ldw	r2,-16(fp)
 100afe4:	e0fffe17 	ldw	r3,-8(fp)
 100afe8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 100afec:	e0bffc17 	ldw	r2,-16(fp)
 100aff0:	e0ffff17 	ldw	r3,-4(fp)
 100aff4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100aff8:	0005303a 	rdctl	r2,status
 100affc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b000:	e0fff917 	ldw	r3,-28(fp)
 100b004:	00bfff84 	movi	r2,-2
 100b008:	1884703a 	and	r2,r3,r2
 100b00c:	1001703a 	wrctl	status,r2
  
  return context;
 100b010:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 100b014:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100b018:	00804074 	movhi	r2,257
 100b01c:	10ba7904 	addi	r2,r2,-5660
 100b020:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100b024:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100b028:	e0fffd17 	ldw	r3,-12(fp)
 100b02c:	e0bff617 	ldw	r2,-40(fp)
 100b030:	1885883a 	add	r2,r3,r2
 100b034:	10c00044 	addi	r3,r2,1
 100b038:	e0bffc17 	ldw	r2,-16(fp)
 100b03c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100b040:	e0bffc17 	ldw	r2,-16(fp)
 100b044:	10c00217 	ldw	r3,8(r2)
 100b048:	e0bff617 	ldw	r2,-40(fp)
 100b04c:	1880042e 	bgeu	r3,r2,100b060 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 100b050:	e0bffc17 	ldw	r2,-16(fp)
 100b054:	00c00044 	movi	r3,1
 100b058:	10c00405 	stb	r3,16(r2)
 100b05c:	00000206 	br	100b068 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 100b060:	e0bffc17 	ldw	r2,-16(fp)
 100b064:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100b068:	e0fffc17 	ldw	r3,-16(fp)
 100b06c:	00804074 	movhi	r2,257
 100b070:	10b5a004 	addi	r2,r2,-10624
 100b074:	e0bffa15 	stw	r2,-24(fp)
 100b078:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100b07c:	e0bffb17 	ldw	r2,-20(fp)
 100b080:	e0fffa17 	ldw	r3,-24(fp)
 100b084:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 100b088:	e0bffa17 	ldw	r2,-24(fp)
 100b08c:	10c00017 	ldw	r3,0(r2)
 100b090:	e0bffb17 	ldw	r2,-20(fp)
 100b094:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100b098:	e0bffa17 	ldw	r2,-24(fp)
 100b09c:	10800017 	ldw	r2,0(r2)
 100b0a0:	e0fffb17 	ldw	r3,-20(fp)
 100b0a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 100b0a8:	e0bffa17 	ldw	r2,-24(fp)
 100b0ac:	e0fffb17 	ldw	r3,-20(fp)
 100b0b0:	10c00015 	stw	r3,0(r2)
 100b0b4:	e0bff817 	ldw	r2,-32(fp)
 100b0b8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b0bc:	e0bff717 	ldw	r2,-36(fp)
 100b0c0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100b0c4:	0005883a 	mov	r2,zero
 100b0c8:	00000306 	br	100b0d8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 100b0cc:	00bffa84 	movi	r2,-22
 100b0d0:	00000106 	br	100b0d8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 100b0d4:	00bfde84 	movi	r2,-134
  }
}
 100b0d8:	e037883a 	mov	sp,fp
 100b0dc:	df000017 	ldw	fp,0(sp)
 100b0e0:	dec00104 	addi	sp,sp,4
 100b0e4:	f800283a 	ret

0100b0e8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 100b0e8:	defffa04 	addi	sp,sp,-24
 100b0ec:	dfc00515 	stw	ra,20(sp)
 100b0f0:	df000415 	stw	fp,16(sp)
 100b0f4:	df000404 	addi	fp,sp,16
 100b0f8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 100b0fc:	008000c4 	movi	r2,3
 100b100:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 100b104:	e0fffd17 	ldw	r3,-12(fp)
 100b108:	008003f4 	movhi	r2,15
 100b10c:	10909004 	addi	r2,r2,16960
 100b110:	1885383a 	mul	r2,r3,r2
 100b114:	100b883a 	mov	r5,r2
 100b118:	0100bef4 	movhi	r4,763
 100b11c:	213c2004 	addi	r4,r4,-3968
 100b120:	100c1cc0 	call	100c1cc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 100b124:	100b883a 	mov	r5,r2
 100b128:	01200034 	movhi	r4,32768
 100b12c:	213fffc4 	addi	r4,r4,-1
 100b130:	100c1cc0 	call	100c1cc <__udivsi3>
 100b134:	100b883a 	mov	r5,r2
 100b138:	e13fff17 	ldw	r4,-4(fp)
 100b13c:	100c1cc0 	call	100c1cc <__udivsi3>
 100b140:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 100b144:	e0bffe17 	ldw	r2,-8(fp)
 100b148:	10002a26 	beq	r2,zero,100b1f4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 100b14c:	e03ffc15 	stw	zero,-16(fp)
 100b150:	00001706 	br	100b1b0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 100b154:	00a00034 	movhi	r2,32768
 100b158:	10bfffc4 	addi	r2,r2,-1
 100b15c:	10bfffc4 	addi	r2,r2,-1
 100b160:	103ffe1e 	bne	r2,zero,100b15c <_gp+0xffff5b00>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 100b164:	e0fffd17 	ldw	r3,-12(fp)
 100b168:	008003f4 	movhi	r2,15
 100b16c:	10909004 	addi	r2,r2,16960
 100b170:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 100b174:	100b883a 	mov	r5,r2
 100b178:	0100bef4 	movhi	r4,763
 100b17c:	213c2004 	addi	r4,r4,-3968
 100b180:	100c1cc0 	call	100c1cc <__udivsi3>
 100b184:	100b883a 	mov	r5,r2
 100b188:	01200034 	movhi	r4,32768
 100b18c:	213fffc4 	addi	r4,r4,-1
 100b190:	100c1cc0 	call	100c1cc <__udivsi3>
 100b194:	1007883a 	mov	r3,r2
 100b198:	e0bfff17 	ldw	r2,-4(fp)
 100b19c:	10c5c83a 	sub	r2,r2,r3
 100b1a0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 100b1a4:	e0bffc17 	ldw	r2,-16(fp)
 100b1a8:	10800044 	addi	r2,r2,1
 100b1ac:	e0bffc15 	stw	r2,-16(fp)
 100b1b0:	e0fffc17 	ldw	r3,-16(fp)
 100b1b4:	e0bffe17 	ldw	r2,-8(fp)
 100b1b8:	18bfe616 	blt	r3,r2,100b154 <_gp+0xffff5af8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 100b1bc:	e0fffd17 	ldw	r3,-12(fp)
 100b1c0:	008003f4 	movhi	r2,15
 100b1c4:	10909004 	addi	r2,r2,16960
 100b1c8:	1885383a 	mul	r2,r3,r2
 100b1cc:	100b883a 	mov	r5,r2
 100b1d0:	0100bef4 	movhi	r4,763
 100b1d4:	213c2004 	addi	r4,r4,-3968
 100b1d8:	100c1cc0 	call	100c1cc <__udivsi3>
 100b1dc:	1007883a 	mov	r3,r2
 100b1e0:	e0bfff17 	ldw	r2,-4(fp)
 100b1e4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 100b1e8:	10bfffc4 	addi	r2,r2,-1
 100b1ec:	103ffe1e 	bne	r2,zero,100b1e8 <_gp+0xffff5b8c>
 100b1f0:	00000d06 	br	100b228 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 100b1f4:	e0fffd17 	ldw	r3,-12(fp)
 100b1f8:	008003f4 	movhi	r2,15
 100b1fc:	10909004 	addi	r2,r2,16960
 100b200:	1885383a 	mul	r2,r3,r2
 100b204:	100b883a 	mov	r5,r2
 100b208:	0100bef4 	movhi	r4,763
 100b20c:	213c2004 	addi	r4,r4,-3968
 100b210:	100c1cc0 	call	100c1cc <__udivsi3>
 100b214:	1007883a 	mov	r3,r2
 100b218:	e0bfff17 	ldw	r2,-4(fp)
 100b21c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 100b220:	10bfffc4 	addi	r2,r2,-1
 100b224:	00bffe16 	blt	zero,r2,100b220 <_gp+0xffff5bc4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 100b228:	0005883a 	mov	r2,zero
}
 100b22c:	e037883a 	mov	sp,fp
 100b230:	dfc00117 	ldw	ra,4(sp)
 100b234:	df000017 	ldw	fp,0(sp)
 100b238:	dec00204 	addi	sp,sp,8
 100b23c:	f800283a 	ret

0100b240 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b240:	defffe04 	addi	sp,sp,-8
 100b244:	dfc00115 	stw	ra,4(sp)
 100b248:	df000015 	stw	fp,0(sp)
 100b24c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100b250:	00804074 	movhi	r2,257
 100b254:	10b59e04 	addi	r2,r2,-10632
 100b258:	10800017 	ldw	r2,0(r2)
 100b25c:	10000526 	beq	r2,zero,100b274 <alt_get_errno+0x34>
 100b260:	00804074 	movhi	r2,257
 100b264:	10b59e04 	addi	r2,r2,-10632
 100b268:	10800017 	ldw	r2,0(r2)
 100b26c:	103ee83a 	callr	r2
 100b270:	00000206 	br	100b27c <alt_get_errno+0x3c>
 100b274:	00804074 	movhi	r2,257
 100b278:	10ba7304 	addi	r2,r2,-5684
}
 100b27c:	e037883a 	mov	sp,fp
 100b280:	dfc00117 	ldw	ra,4(sp)
 100b284:	df000017 	ldw	fp,0(sp)
 100b288:	dec00204 	addi	sp,sp,8
 100b28c:	f800283a 	ret

0100b290 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100b290:	defffb04 	addi	sp,sp,-20
 100b294:	dfc00415 	stw	ra,16(sp)
 100b298:	df000315 	stw	fp,12(sp)
 100b29c:	df000304 	addi	fp,sp,12
 100b2a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100b2a4:	e0bfff17 	ldw	r2,-4(fp)
 100b2a8:	10000616 	blt	r2,zero,100b2c4 <close+0x34>
 100b2ac:	e0bfff17 	ldw	r2,-4(fp)
 100b2b0:	10c00324 	muli	r3,r2,12
 100b2b4:	00804074 	movhi	r2,257
 100b2b8:	10b53704 	addi	r2,r2,-11044
 100b2bc:	1885883a 	add	r2,r3,r2
 100b2c0:	00000106 	br	100b2c8 <close+0x38>
 100b2c4:	0005883a 	mov	r2,zero
 100b2c8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 100b2cc:	e0bffd17 	ldw	r2,-12(fp)
 100b2d0:	10001926 	beq	r2,zero,100b338 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100b2d4:	e0bffd17 	ldw	r2,-12(fp)
 100b2d8:	10800017 	ldw	r2,0(r2)
 100b2dc:	10800417 	ldw	r2,16(r2)
 100b2e0:	10000626 	beq	r2,zero,100b2fc <close+0x6c>
 100b2e4:	e0bffd17 	ldw	r2,-12(fp)
 100b2e8:	10800017 	ldw	r2,0(r2)
 100b2ec:	10800417 	ldw	r2,16(r2)
 100b2f0:	e13ffd17 	ldw	r4,-12(fp)
 100b2f4:	103ee83a 	callr	r2
 100b2f8:	00000106 	br	100b300 <close+0x70>
 100b2fc:	0005883a 	mov	r2,zero
 100b300:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100b304:	e13fff17 	ldw	r4,-4(fp)
 100b308:	100b9d00 	call	100b9d0 <alt_release_fd>
    if (rval < 0)
 100b30c:	e0bffe17 	ldw	r2,-8(fp)
 100b310:	1000070e 	bge	r2,zero,100b330 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 100b314:	100b2400 	call	100b240 <alt_get_errno>
 100b318:	1007883a 	mov	r3,r2
 100b31c:	e0bffe17 	ldw	r2,-8(fp)
 100b320:	0085c83a 	sub	r2,zero,r2
 100b324:	18800015 	stw	r2,0(r3)
      return -1;
 100b328:	00bfffc4 	movi	r2,-1
 100b32c:	00000706 	br	100b34c <close+0xbc>
    }
    return 0;
 100b330:	0005883a 	mov	r2,zero
 100b334:	00000506 	br	100b34c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100b338:	100b2400 	call	100b240 <alt_get_errno>
 100b33c:	1007883a 	mov	r3,r2
 100b340:	00801444 	movi	r2,81
 100b344:	18800015 	stw	r2,0(r3)
    return -1;
 100b348:	00bfffc4 	movi	r2,-1
  }
}
 100b34c:	e037883a 	mov	sp,fp
 100b350:	dfc00117 	ldw	ra,4(sp)
 100b354:	df000017 	ldw	fp,0(sp)
 100b358:	dec00204 	addi	sp,sp,8
 100b35c:	f800283a 	ret

0100b360 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100b360:	defffe04 	addi	sp,sp,-8
 100b364:	df000115 	stw	fp,4(sp)
 100b368:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100b36c:	e03fff15 	stw	zero,-4(fp)
 100b370:	00000506 	br	100b388 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 100b374:	e0bfff17 	ldw	r2,-4(fp)
 100b378:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100b37c:	e0bfff17 	ldw	r2,-4(fp)
 100b380:	10800804 	addi	r2,r2,32
 100b384:	e0bfff15 	stw	r2,-4(fp)
 100b388:	e0bfff17 	ldw	r2,-4(fp)
 100b38c:	10820030 	cmpltui	r2,r2,2048
 100b390:	103ff81e 	bne	r2,zero,100b374 <_gp+0xffff5d18>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100b394:	0001883a 	nop
 100b398:	e037883a 	mov	sp,fp
 100b39c:	df000017 	ldw	fp,0(sp)
 100b3a0:	dec00104 	addi	sp,sp,4
 100b3a4:	f800283a 	ret

0100b3a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100b3a8:	defffa04 	addi	sp,sp,-24
 100b3ac:	dfc00515 	stw	ra,20(sp)
 100b3b0:	df000415 	stw	fp,16(sp)
 100b3b4:	df000404 	addi	fp,sp,16
 100b3b8:	e13ffe15 	stw	r4,-8(fp)
 100b3bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100b3c0:	e0bfff17 	ldw	r2,-4(fp)
 100b3c4:	10800017 	ldw	r2,0(r2)
 100b3c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100b3cc:	e13ffe17 	ldw	r4,-8(fp)
 100b3d0:	100984c0 	call	100984c <strlen>
 100b3d4:	10800044 	addi	r2,r2,1
 100b3d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100b3dc:	00000d06 	br	100b414 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100b3e0:	e0bffc17 	ldw	r2,-16(fp)
 100b3e4:	10800217 	ldw	r2,8(r2)
 100b3e8:	e0fffd17 	ldw	r3,-12(fp)
 100b3ec:	180d883a 	mov	r6,r3
 100b3f0:	e17ffe17 	ldw	r5,-8(fp)
 100b3f4:	1009883a 	mov	r4,r2
 100b3f8:	100beec0 	call	100beec <memcmp>
 100b3fc:	1000021e 	bne	r2,zero,100b408 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100b400:	e0bffc17 	ldw	r2,-16(fp)
 100b404:	00000706 	br	100b424 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100b408:	e0bffc17 	ldw	r2,-16(fp)
 100b40c:	10800017 	ldw	r2,0(r2)
 100b410:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100b414:	e0fffc17 	ldw	r3,-16(fp)
 100b418:	e0bfff17 	ldw	r2,-4(fp)
 100b41c:	18bff01e 	bne	r3,r2,100b3e0 <_gp+0xffff5d84>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100b420:	0005883a 	mov	r2,zero
}
 100b424:	e037883a 	mov	sp,fp
 100b428:	dfc00117 	ldw	ra,4(sp)
 100b42c:	df000017 	ldw	fp,0(sp)
 100b430:	dec00204 	addi	sp,sp,8
 100b434:	f800283a 	ret

0100b438 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100b438:	defffe04 	addi	sp,sp,-8
 100b43c:	dfc00115 	stw	ra,4(sp)
 100b440:	df000015 	stw	fp,0(sp)
 100b444:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 100b448:	01440004 	movi	r5,4096
 100b44c:	0009883a 	mov	r4,zero
 100b450:	100bda00 	call	100bda0 <alt_icache_flush>
#endif
}
 100b454:	0001883a 	nop
 100b458:	e037883a 	mov	sp,fp
 100b45c:	dfc00117 	ldw	ra,4(sp)
 100b460:	df000017 	ldw	fp,0(sp)
 100b464:	dec00204 	addi	sp,sp,8
 100b468:	f800283a 	ret

0100b46c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100b46c:	defff904 	addi	sp,sp,-28
 100b470:	dfc00615 	stw	ra,24(sp)
 100b474:	df000515 	stw	fp,20(sp)
 100b478:	df000504 	addi	fp,sp,20
 100b47c:	e13ffc15 	stw	r4,-16(fp)
 100b480:	e17ffd15 	stw	r5,-12(fp)
 100b484:	e1bffe15 	stw	r6,-8(fp)
 100b488:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100b48c:	e1bfff17 	ldw	r6,-4(fp)
 100b490:	e17ffe17 	ldw	r5,-8(fp)
 100b494:	e13ffd17 	ldw	r4,-12(fp)
 100b498:	100b8780 	call	100b878 <open>
 100b49c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100b4a0:	e0bffb17 	ldw	r2,-20(fp)
 100b4a4:	10001c16 	blt	r2,zero,100b518 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 100b4a8:	00804074 	movhi	r2,257
 100b4ac:	10b53704 	addi	r2,r2,-11044
 100b4b0:	e0fffb17 	ldw	r3,-20(fp)
 100b4b4:	18c00324 	muli	r3,r3,12
 100b4b8:	10c5883a 	add	r2,r2,r3
 100b4bc:	10c00017 	ldw	r3,0(r2)
 100b4c0:	e0bffc17 	ldw	r2,-16(fp)
 100b4c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100b4c8:	00804074 	movhi	r2,257
 100b4cc:	10b53704 	addi	r2,r2,-11044
 100b4d0:	e0fffb17 	ldw	r3,-20(fp)
 100b4d4:	18c00324 	muli	r3,r3,12
 100b4d8:	10c5883a 	add	r2,r2,r3
 100b4dc:	10800104 	addi	r2,r2,4
 100b4e0:	10c00017 	ldw	r3,0(r2)
 100b4e4:	e0bffc17 	ldw	r2,-16(fp)
 100b4e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100b4ec:	00804074 	movhi	r2,257
 100b4f0:	10b53704 	addi	r2,r2,-11044
 100b4f4:	e0fffb17 	ldw	r3,-20(fp)
 100b4f8:	18c00324 	muli	r3,r3,12
 100b4fc:	10c5883a 	add	r2,r2,r3
 100b500:	10800204 	addi	r2,r2,8
 100b504:	10c00017 	ldw	r3,0(r2)
 100b508:	e0bffc17 	ldw	r2,-16(fp)
 100b50c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100b510:	e13ffb17 	ldw	r4,-20(fp)
 100b514:	100b9d00 	call	100b9d0 <alt_release_fd>
  }
} 
 100b518:	0001883a 	nop
 100b51c:	e037883a 	mov	sp,fp
 100b520:	dfc00117 	ldw	ra,4(sp)
 100b524:	df000017 	ldw	fp,0(sp)
 100b528:	dec00204 	addi	sp,sp,8
 100b52c:	f800283a 	ret

0100b530 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100b530:	defffb04 	addi	sp,sp,-20
 100b534:	dfc00415 	stw	ra,16(sp)
 100b538:	df000315 	stw	fp,12(sp)
 100b53c:	df000304 	addi	fp,sp,12
 100b540:	e13ffd15 	stw	r4,-12(fp)
 100b544:	e17ffe15 	stw	r5,-8(fp)
 100b548:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100b54c:	01c07fc4 	movi	r7,511
 100b550:	01800044 	movi	r6,1
 100b554:	e17ffd17 	ldw	r5,-12(fp)
 100b558:	01004074 	movhi	r4,257
 100b55c:	21353a04 	addi	r4,r4,-11032
 100b560:	100b46c0 	call	100b46c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100b564:	01c07fc4 	movi	r7,511
 100b568:	000d883a 	mov	r6,zero
 100b56c:	e17ffe17 	ldw	r5,-8(fp)
 100b570:	01004074 	movhi	r4,257
 100b574:	21353704 	addi	r4,r4,-11044
 100b578:	100b46c0 	call	100b46c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100b57c:	01c07fc4 	movi	r7,511
 100b580:	01800044 	movi	r6,1
 100b584:	e17fff17 	ldw	r5,-4(fp)
 100b588:	01004074 	movhi	r4,257
 100b58c:	21353d04 	addi	r4,r4,-11020
 100b590:	100b46c0 	call	100b46c <alt_open_fd>
}  
 100b594:	0001883a 	nop
 100b598:	e037883a 	mov	sp,fp
 100b59c:	dfc00117 	ldw	ra,4(sp)
 100b5a0:	df000017 	ldw	fp,0(sp)
 100b5a4:	dec00204 	addi	sp,sp,8
 100b5a8:	f800283a 	ret

0100b5ac <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 100b5ac:	defff004 	addi	sp,sp,-64
 100b5b0:	df000f15 	stw	fp,60(sp)
 100b5b4:	df000f04 	addi	fp,sp,60
 100b5b8:	e13ffd15 	stw	r4,-12(fp)
 100b5bc:	e17ffe15 	stw	r5,-8(fp)
 100b5c0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 100b5c4:	00bffa84 	movi	r2,-22
 100b5c8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100b5cc:	e0bffd17 	ldw	r2,-12(fp)
 100b5d0:	10800828 	cmpgeui	r2,r2,32
 100b5d4:	10005c1e 	bne	r2,zero,100b748 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b5d8:	0005303a 	rdctl	r2,status
 100b5dc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b5e0:	e0fff617 	ldw	r3,-40(fp)
 100b5e4:	00bfff84 	movi	r2,-2
 100b5e8:	1884703a 	and	r2,r3,r2
 100b5ec:	1001703a 	wrctl	status,r2
  
  return context;
 100b5f0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 100b5f4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 100b5f8:	00804074 	movhi	r2,257
 100b5fc:	10ba8504 	addi	r2,r2,-5612
 100b600:	e0fffd17 	ldw	r3,-12(fp)
 100b604:	180690fa 	slli	r3,r3,3
 100b608:	10c5883a 	add	r2,r2,r3
 100b60c:	e0ffff17 	ldw	r3,-4(fp)
 100b610:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 100b614:	00804074 	movhi	r2,257
 100b618:	10ba8504 	addi	r2,r2,-5612
 100b61c:	e0fffd17 	ldw	r3,-12(fp)
 100b620:	180690fa 	slli	r3,r3,3
 100b624:	10c5883a 	add	r2,r2,r3
 100b628:	10800104 	addi	r2,r2,4
 100b62c:	e0fffe17 	ldw	r3,-8(fp)
 100b630:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 100b634:	e0bfff17 	ldw	r2,-4(fp)
 100b638:	10001f26 	beq	r2,zero,100b6b8 <alt_irq_register+0x10c>
 100b63c:	e0bffd17 	ldw	r2,-12(fp)
 100b640:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b644:	0005303a 	rdctl	r2,status
 100b648:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b64c:	e0fff717 	ldw	r3,-36(fp)
 100b650:	00bfff84 	movi	r2,-2
 100b654:	1884703a 	and	r2,r3,r2
 100b658:	1001703a 	wrctl	status,r2
  
  return context;
 100b65c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100b660:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 100b664:	00c00044 	movi	r3,1
 100b668:	e0bff217 	ldw	r2,-56(fp)
 100b66c:	1884983a 	sll	r2,r3,r2
 100b670:	1007883a 	mov	r3,r2
 100b674:	00804074 	movhi	r2,257
 100b678:	10ba7704 	addi	r2,r2,-5668
 100b67c:	10800017 	ldw	r2,0(r2)
 100b680:	1886b03a 	or	r3,r3,r2
 100b684:	00804074 	movhi	r2,257
 100b688:	10ba7704 	addi	r2,r2,-5668
 100b68c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100b690:	00804074 	movhi	r2,257
 100b694:	10ba7704 	addi	r2,r2,-5668
 100b698:	10800017 	ldw	r2,0(r2)
 100b69c:	100170fa 	wrctl	ienable,r2
 100b6a0:	e0bff817 	ldw	r2,-32(fp)
 100b6a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b6a8:	e0bff917 	ldw	r2,-28(fp)
 100b6ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100b6b0:	0005883a 	mov	r2,zero
 100b6b4:	00001f06 	br	100b734 <alt_irq_register+0x188>
 100b6b8:	e0bffd17 	ldw	r2,-12(fp)
 100b6bc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b6c0:	0005303a 	rdctl	r2,status
 100b6c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b6c8:	e0fffa17 	ldw	r3,-24(fp)
 100b6cc:	00bfff84 	movi	r2,-2
 100b6d0:	1884703a 	and	r2,r3,r2
 100b6d4:	1001703a 	wrctl	status,r2
  
  return context;
 100b6d8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100b6dc:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 100b6e0:	00c00044 	movi	r3,1
 100b6e4:	e0bff417 	ldw	r2,-48(fp)
 100b6e8:	1884983a 	sll	r2,r3,r2
 100b6ec:	0084303a 	nor	r2,zero,r2
 100b6f0:	1007883a 	mov	r3,r2
 100b6f4:	00804074 	movhi	r2,257
 100b6f8:	10ba7704 	addi	r2,r2,-5668
 100b6fc:	10800017 	ldw	r2,0(r2)
 100b700:	1886703a 	and	r3,r3,r2
 100b704:	00804074 	movhi	r2,257
 100b708:	10ba7704 	addi	r2,r2,-5668
 100b70c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100b710:	00804074 	movhi	r2,257
 100b714:	10ba7704 	addi	r2,r2,-5668
 100b718:	10800017 	ldw	r2,0(r2)
 100b71c:	100170fa 	wrctl	ienable,r2
 100b720:	e0bffb17 	ldw	r2,-20(fp)
 100b724:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b728:	e0bffc17 	ldw	r2,-16(fp)
 100b72c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100b730:	0005883a 	mov	r2,zero
 100b734:	e0bff115 	stw	r2,-60(fp)
 100b738:	e0bff317 	ldw	r2,-52(fp)
 100b73c:	e0bff515 	stw	r2,-44(fp)
 100b740:	e0bff517 	ldw	r2,-44(fp)
 100b744:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 100b748:	e0bff117 	ldw	r2,-60(fp)
}
 100b74c:	e037883a 	mov	sp,fp
 100b750:	df000017 	ldw	fp,0(sp)
 100b754:	dec00104 	addi	sp,sp,4
 100b758:	f800283a 	ret

0100b75c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b75c:	defffe04 	addi	sp,sp,-8
 100b760:	dfc00115 	stw	ra,4(sp)
 100b764:	df000015 	stw	fp,0(sp)
 100b768:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100b76c:	00804074 	movhi	r2,257
 100b770:	10b59e04 	addi	r2,r2,-10632
 100b774:	10800017 	ldw	r2,0(r2)
 100b778:	10000526 	beq	r2,zero,100b790 <alt_get_errno+0x34>
 100b77c:	00804074 	movhi	r2,257
 100b780:	10b59e04 	addi	r2,r2,-10632
 100b784:	10800017 	ldw	r2,0(r2)
 100b788:	103ee83a 	callr	r2
 100b78c:	00000206 	br	100b798 <alt_get_errno+0x3c>
 100b790:	00804074 	movhi	r2,257
 100b794:	10ba7304 	addi	r2,r2,-5684
}
 100b798:	e037883a 	mov	sp,fp
 100b79c:	dfc00117 	ldw	ra,4(sp)
 100b7a0:	df000017 	ldw	fp,0(sp)
 100b7a4:	dec00204 	addi	sp,sp,8
 100b7a8:	f800283a 	ret

0100b7ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100b7ac:	defffd04 	addi	sp,sp,-12
 100b7b0:	df000215 	stw	fp,8(sp)
 100b7b4:	df000204 	addi	fp,sp,8
 100b7b8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100b7bc:	e0bfff17 	ldw	r2,-4(fp)
 100b7c0:	10800217 	ldw	r2,8(r2)
 100b7c4:	10d00034 	orhi	r3,r2,16384
 100b7c8:	e0bfff17 	ldw	r2,-4(fp)
 100b7cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100b7d0:	e03ffe15 	stw	zero,-8(fp)
 100b7d4:	00001d06 	br	100b84c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100b7d8:	00804074 	movhi	r2,257
 100b7dc:	10b53704 	addi	r2,r2,-11044
 100b7e0:	e0fffe17 	ldw	r3,-8(fp)
 100b7e4:	18c00324 	muli	r3,r3,12
 100b7e8:	10c5883a 	add	r2,r2,r3
 100b7ec:	10c00017 	ldw	r3,0(r2)
 100b7f0:	e0bfff17 	ldw	r2,-4(fp)
 100b7f4:	10800017 	ldw	r2,0(r2)
 100b7f8:	1880111e 	bne	r3,r2,100b840 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100b7fc:	00804074 	movhi	r2,257
 100b800:	10b53704 	addi	r2,r2,-11044
 100b804:	e0fffe17 	ldw	r3,-8(fp)
 100b808:	18c00324 	muli	r3,r3,12
 100b80c:	10c5883a 	add	r2,r2,r3
 100b810:	10800204 	addi	r2,r2,8
 100b814:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100b818:	1000090e 	bge	r2,zero,100b840 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 100b81c:	e0bffe17 	ldw	r2,-8(fp)
 100b820:	10c00324 	muli	r3,r2,12
 100b824:	00804074 	movhi	r2,257
 100b828:	10b53704 	addi	r2,r2,-11044
 100b82c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100b830:	e0bfff17 	ldw	r2,-4(fp)
 100b834:	18800226 	beq	r3,r2,100b840 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100b838:	00bffcc4 	movi	r2,-13
 100b83c:	00000a06 	br	100b868 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100b840:	e0bffe17 	ldw	r2,-8(fp)
 100b844:	10800044 	addi	r2,r2,1
 100b848:	e0bffe15 	stw	r2,-8(fp)
 100b84c:	00804074 	movhi	r2,257
 100b850:	10b59d04 	addi	r2,r2,-10636
 100b854:	10800017 	ldw	r2,0(r2)
 100b858:	1007883a 	mov	r3,r2
 100b85c:	e0bffe17 	ldw	r2,-8(fp)
 100b860:	18bfdd2e 	bgeu	r3,r2,100b7d8 <_gp+0xffff617c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100b864:	0005883a 	mov	r2,zero
}
 100b868:	e037883a 	mov	sp,fp
 100b86c:	df000017 	ldw	fp,0(sp)
 100b870:	dec00104 	addi	sp,sp,4
 100b874:	f800283a 	ret

0100b878 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100b878:	defff604 	addi	sp,sp,-40
 100b87c:	dfc00915 	stw	ra,36(sp)
 100b880:	df000815 	stw	fp,32(sp)
 100b884:	df000804 	addi	fp,sp,32
 100b888:	e13ffd15 	stw	r4,-12(fp)
 100b88c:	e17ffe15 	stw	r5,-8(fp)
 100b890:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100b894:	00bfffc4 	movi	r2,-1
 100b898:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 100b89c:	00bffb44 	movi	r2,-19
 100b8a0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 100b8a4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100b8a8:	01404074 	movhi	r5,257
 100b8ac:	29759b04 	addi	r5,r5,-10644
 100b8b0:	e13ffd17 	ldw	r4,-12(fp)
 100b8b4:	100b3a80 	call	100b3a8 <alt_find_dev>
 100b8b8:	e0bff815 	stw	r2,-32(fp)
 100b8bc:	e0bff817 	ldw	r2,-32(fp)
 100b8c0:	1000051e 	bne	r2,zero,100b8d8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100b8c4:	e13ffd17 	ldw	r4,-12(fp)
 100b8c8:	100bbd80 	call	100bbd8 <alt_find_file>
 100b8cc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 100b8d0:	00800044 	movi	r2,1
 100b8d4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100b8d8:	e0bff817 	ldw	r2,-32(fp)
 100b8dc:	10002926 	beq	r2,zero,100b984 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100b8e0:	e13ff817 	ldw	r4,-32(fp)
 100b8e4:	100bcec0 	call	100bcec <alt_get_fd>
 100b8e8:	e0bff915 	stw	r2,-28(fp)
 100b8ec:	e0bff917 	ldw	r2,-28(fp)
 100b8f0:	1000030e 	bge	r2,zero,100b900 <open+0x88>
    {
      status = index;
 100b8f4:	e0bff917 	ldw	r2,-28(fp)
 100b8f8:	e0bffa15 	stw	r2,-24(fp)
 100b8fc:	00002306 	br	100b98c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 100b900:	e0bff917 	ldw	r2,-28(fp)
 100b904:	10c00324 	muli	r3,r2,12
 100b908:	00804074 	movhi	r2,257
 100b90c:	10b53704 	addi	r2,r2,-11044
 100b910:	1885883a 	add	r2,r3,r2
 100b914:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100b918:	e0fffe17 	ldw	r3,-8(fp)
 100b91c:	00900034 	movhi	r2,16384
 100b920:	10bfffc4 	addi	r2,r2,-1
 100b924:	1886703a 	and	r3,r3,r2
 100b928:	e0bffc17 	ldw	r2,-16(fp)
 100b92c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100b930:	e0bffb17 	ldw	r2,-20(fp)
 100b934:	1000051e 	bne	r2,zero,100b94c <open+0xd4>
 100b938:	e13ffc17 	ldw	r4,-16(fp)
 100b93c:	100b7ac0 	call	100b7ac <alt_file_locked>
 100b940:	e0bffa15 	stw	r2,-24(fp)
 100b944:	e0bffa17 	ldw	r2,-24(fp)
 100b948:	10001016 	blt	r2,zero,100b98c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100b94c:	e0bff817 	ldw	r2,-32(fp)
 100b950:	10800317 	ldw	r2,12(r2)
 100b954:	10000826 	beq	r2,zero,100b978 <open+0x100>
 100b958:	e0bff817 	ldw	r2,-32(fp)
 100b95c:	10800317 	ldw	r2,12(r2)
 100b960:	e1ffff17 	ldw	r7,-4(fp)
 100b964:	e1bffe17 	ldw	r6,-8(fp)
 100b968:	e17ffd17 	ldw	r5,-12(fp)
 100b96c:	e13ffc17 	ldw	r4,-16(fp)
 100b970:	103ee83a 	callr	r2
 100b974:	00000106 	br	100b97c <open+0x104>
 100b978:	0005883a 	mov	r2,zero
 100b97c:	e0bffa15 	stw	r2,-24(fp)
 100b980:	00000206 	br	100b98c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100b984:	00bffb44 	movi	r2,-19
 100b988:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100b98c:	e0bffa17 	ldw	r2,-24(fp)
 100b990:	1000090e 	bge	r2,zero,100b9b8 <open+0x140>
  {
    alt_release_fd (index);  
 100b994:	e13ff917 	ldw	r4,-28(fp)
 100b998:	100b9d00 	call	100b9d0 <alt_release_fd>
    ALT_ERRNO = -status;
 100b99c:	100b75c0 	call	100b75c <alt_get_errno>
 100b9a0:	1007883a 	mov	r3,r2
 100b9a4:	e0bffa17 	ldw	r2,-24(fp)
 100b9a8:	0085c83a 	sub	r2,zero,r2
 100b9ac:	18800015 	stw	r2,0(r3)
    return -1;
 100b9b0:	00bfffc4 	movi	r2,-1
 100b9b4:	00000106 	br	100b9bc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 100b9b8:	e0bff917 	ldw	r2,-28(fp)
}
 100b9bc:	e037883a 	mov	sp,fp
 100b9c0:	dfc00117 	ldw	ra,4(sp)
 100b9c4:	df000017 	ldw	fp,0(sp)
 100b9c8:	dec00204 	addi	sp,sp,8
 100b9cc:	f800283a 	ret

0100b9d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100b9d0:	defffe04 	addi	sp,sp,-8
 100b9d4:	df000115 	stw	fp,4(sp)
 100b9d8:	df000104 	addi	fp,sp,4
 100b9dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100b9e0:	e0bfff17 	ldw	r2,-4(fp)
 100b9e4:	108000d0 	cmplti	r2,r2,3
 100b9e8:	10000d1e 	bne	r2,zero,100ba20 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 100b9ec:	00804074 	movhi	r2,257
 100b9f0:	10b53704 	addi	r2,r2,-11044
 100b9f4:	e0ffff17 	ldw	r3,-4(fp)
 100b9f8:	18c00324 	muli	r3,r3,12
 100b9fc:	10c5883a 	add	r2,r2,r3
 100ba00:	10800204 	addi	r2,r2,8
 100ba04:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100ba08:	00804074 	movhi	r2,257
 100ba0c:	10b53704 	addi	r2,r2,-11044
 100ba10:	e0ffff17 	ldw	r3,-4(fp)
 100ba14:	18c00324 	muli	r3,r3,12
 100ba18:	10c5883a 	add	r2,r2,r3
 100ba1c:	10000015 	stw	zero,0(r2)
  }
}
 100ba20:	0001883a 	nop
 100ba24:	e037883a 	mov	sp,fp
 100ba28:	df000017 	ldw	fp,0(sp)
 100ba2c:	dec00104 	addi	sp,sp,4
 100ba30:	f800283a 	ret

0100ba34 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100ba34:	defffa04 	addi	sp,sp,-24
 100ba38:	df000515 	stw	fp,20(sp)
 100ba3c:	df000504 	addi	fp,sp,20
 100ba40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ba44:	0005303a 	rdctl	r2,status
 100ba48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ba4c:	e0fffc17 	ldw	r3,-16(fp)
 100ba50:	00bfff84 	movi	r2,-2
 100ba54:	1884703a 	and	r2,r3,r2
 100ba58:	1001703a 	wrctl	status,r2
  
  return context;
 100ba5c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100ba60:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 100ba64:	e0bfff17 	ldw	r2,-4(fp)
 100ba68:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100ba6c:	e0bffd17 	ldw	r2,-12(fp)
 100ba70:	10800017 	ldw	r2,0(r2)
 100ba74:	e0fffd17 	ldw	r3,-12(fp)
 100ba78:	18c00117 	ldw	r3,4(r3)
 100ba7c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 100ba80:	e0bffd17 	ldw	r2,-12(fp)
 100ba84:	10800117 	ldw	r2,4(r2)
 100ba88:	e0fffd17 	ldw	r3,-12(fp)
 100ba8c:	18c00017 	ldw	r3,0(r3)
 100ba90:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100ba94:	e0bffd17 	ldw	r2,-12(fp)
 100ba98:	e0fffd17 	ldw	r3,-12(fp)
 100ba9c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 100baa0:	e0bffd17 	ldw	r2,-12(fp)
 100baa4:	e0fffd17 	ldw	r3,-12(fp)
 100baa8:	10c00015 	stw	r3,0(r2)
 100baac:	e0bffb17 	ldw	r2,-20(fp)
 100bab0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bab4:	e0bffe17 	ldw	r2,-8(fp)
 100bab8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100babc:	0001883a 	nop
 100bac0:	e037883a 	mov	sp,fp
 100bac4:	df000017 	ldw	fp,0(sp)
 100bac8:	dec00104 	addi	sp,sp,4
 100bacc:	f800283a 	ret

0100bad0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100bad0:	defffb04 	addi	sp,sp,-20
 100bad4:	dfc00415 	stw	ra,16(sp)
 100bad8:	df000315 	stw	fp,12(sp)
 100badc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100bae0:	d0a00917 	ldw	r2,-32732(gp)
 100bae4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100bae8:	d0a4e217 	ldw	r2,-27768(gp)
 100baec:	10800044 	addi	r2,r2,1
 100baf0:	d0a4e215 	stw	r2,-27768(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100baf4:	00002e06 	br	100bbb0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 100baf8:	e0bffd17 	ldw	r2,-12(fp)
 100bafc:	10800017 	ldw	r2,0(r2)
 100bb00:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100bb04:	e0bffd17 	ldw	r2,-12(fp)
 100bb08:	10800403 	ldbu	r2,16(r2)
 100bb0c:	10803fcc 	andi	r2,r2,255
 100bb10:	10000426 	beq	r2,zero,100bb24 <alt_tick+0x54>
 100bb14:	d0a4e217 	ldw	r2,-27768(gp)
 100bb18:	1000021e 	bne	r2,zero,100bb24 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 100bb1c:	e0bffd17 	ldw	r2,-12(fp)
 100bb20:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100bb24:	e0bffd17 	ldw	r2,-12(fp)
 100bb28:	10800217 	ldw	r2,8(r2)
 100bb2c:	d0e4e217 	ldw	r3,-27768(gp)
 100bb30:	18801d36 	bltu	r3,r2,100bba8 <alt_tick+0xd8>
 100bb34:	e0bffd17 	ldw	r2,-12(fp)
 100bb38:	10800403 	ldbu	r2,16(r2)
 100bb3c:	10803fcc 	andi	r2,r2,255
 100bb40:	1000191e 	bne	r2,zero,100bba8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 100bb44:	e0bffd17 	ldw	r2,-12(fp)
 100bb48:	10800317 	ldw	r2,12(r2)
 100bb4c:	e0fffd17 	ldw	r3,-12(fp)
 100bb50:	18c00517 	ldw	r3,20(r3)
 100bb54:	1809883a 	mov	r4,r3
 100bb58:	103ee83a 	callr	r2
 100bb5c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100bb60:	e0bfff17 	ldw	r2,-4(fp)
 100bb64:	1000031e 	bne	r2,zero,100bb74 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 100bb68:	e13ffd17 	ldw	r4,-12(fp)
 100bb6c:	100ba340 	call	100ba34 <alt_alarm_stop>
 100bb70:	00000d06 	br	100bba8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 100bb74:	e0bffd17 	ldw	r2,-12(fp)
 100bb78:	10c00217 	ldw	r3,8(r2)
 100bb7c:	e0bfff17 	ldw	r2,-4(fp)
 100bb80:	1887883a 	add	r3,r3,r2
 100bb84:	e0bffd17 	ldw	r2,-12(fp)
 100bb88:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100bb8c:	e0bffd17 	ldw	r2,-12(fp)
 100bb90:	10c00217 	ldw	r3,8(r2)
 100bb94:	d0a4e217 	ldw	r2,-27768(gp)
 100bb98:	1880032e 	bgeu	r3,r2,100bba8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 100bb9c:	e0bffd17 	ldw	r2,-12(fp)
 100bba0:	00c00044 	movi	r3,1
 100bba4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 100bba8:	e0bffe17 	ldw	r2,-8(fp)
 100bbac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100bbb0:	e0fffd17 	ldw	r3,-12(fp)
 100bbb4:	d0a00904 	addi	r2,gp,-32732
 100bbb8:	18bfcf1e 	bne	r3,r2,100baf8 <_gp+0xffff649c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 100bbbc:	0001883a 	nop
}
 100bbc0:	0001883a 	nop
 100bbc4:	e037883a 	mov	sp,fp
 100bbc8:	dfc00117 	ldw	ra,4(sp)
 100bbcc:	df000017 	ldw	fp,0(sp)
 100bbd0:	dec00204 	addi	sp,sp,8
 100bbd4:	f800283a 	ret

0100bbd8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100bbd8:	defffb04 	addi	sp,sp,-20
 100bbdc:	dfc00415 	stw	ra,16(sp)
 100bbe0:	df000315 	stw	fp,12(sp)
 100bbe4:	df000304 	addi	fp,sp,12
 100bbe8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100bbec:	00804074 	movhi	r2,257
 100bbf0:	10b59904 	addi	r2,r2,-10652
 100bbf4:	10800017 	ldw	r2,0(r2)
 100bbf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100bbfc:	00003106 	br	100bcc4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 100bc00:	e0bffd17 	ldw	r2,-12(fp)
 100bc04:	10800217 	ldw	r2,8(r2)
 100bc08:	1009883a 	mov	r4,r2
 100bc0c:	100984c0 	call	100984c <strlen>
 100bc10:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 100bc14:	e0bffd17 	ldw	r2,-12(fp)
 100bc18:	10c00217 	ldw	r3,8(r2)
 100bc1c:	e0bffe17 	ldw	r2,-8(fp)
 100bc20:	10bfffc4 	addi	r2,r2,-1
 100bc24:	1885883a 	add	r2,r3,r2
 100bc28:	10800003 	ldbu	r2,0(r2)
 100bc2c:	10803fcc 	andi	r2,r2,255
 100bc30:	1080201c 	xori	r2,r2,128
 100bc34:	10bfe004 	addi	r2,r2,-128
 100bc38:	10800bd8 	cmpnei	r2,r2,47
 100bc3c:	1000031e 	bne	r2,zero,100bc4c <alt_find_file+0x74>
    {
      len -= 1;
 100bc40:	e0bffe17 	ldw	r2,-8(fp)
 100bc44:	10bfffc4 	addi	r2,r2,-1
 100bc48:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100bc4c:	e0bffe17 	ldw	r2,-8(fp)
 100bc50:	e0ffff17 	ldw	r3,-4(fp)
 100bc54:	1885883a 	add	r2,r3,r2
 100bc58:	10800003 	ldbu	r2,0(r2)
 100bc5c:	10803fcc 	andi	r2,r2,255
 100bc60:	1080201c 	xori	r2,r2,128
 100bc64:	10bfe004 	addi	r2,r2,-128
 100bc68:	10800be0 	cmpeqi	r2,r2,47
 100bc6c:	1000081e 	bne	r2,zero,100bc90 <alt_find_file+0xb8>
 100bc70:	e0bffe17 	ldw	r2,-8(fp)
 100bc74:	e0ffff17 	ldw	r3,-4(fp)
 100bc78:	1885883a 	add	r2,r3,r2
 100bc7c:	10800003 	ldbu	r2,0(r2)
 100bc80:	10803fcc 	andi	r2,r2,255
 100bc84:	1080201c 	xori	r2,r2,128
 100bc88:	10bfe004 	addi	r2,r2,-128
 100bc8c:	10000a1e 	bne	r2,zero,100bcb8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 100bc90:	e0bffd17 	ldw	r2,-12(fp)
 100bc94:	10800217 	ldw	r2,8(r2)
 100bc98:	e0fffe17 	ldw	r3,-8(fp)
 100bc9c:	180d883a 	mov	r6,r3
 100bca0:	e17fff17 	ldw	r5,-4(fp)
 100bca4:	1009883a 	mov	r4,r2
 100bca8:	100beec0 	call	100beec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100bcac:	1000021e 	bne	r2,zero,100bcb8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100bcb0:	e0bffd17 	ldw	r2,-12(fp)
 100bcb4:	00000806 	br	100bcd8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 100bcb8:	e0bffd17 	ldw	r2,-12(fp)
 100bcbc:	10800017 	ldw	r2,0(r2)
 100bcc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100bcc4:	e0fffd17 	ldw	r3,-12(fp)
 100bcc8:	00804074 	movhi	r2,257
 100bccc:	10b59904 	addi	r2,r2,-10652
 100bcd0:	18bfcb1e 	bne	r3,r2,100bc00 <_gp+0xffff65a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100bcd4:	0005883a 	mov	r2,zero
}
 100bcd8:	e037883a 	mov	sp,fp
 100bcdc:	dfc00117 	ldw	ra,4(sp)
 100bce0:	df000017 	ldw	fp,0(sp)
 100bce4:	dec00204 	addi	sp,sp,8
 100bce8:	f800283a 	ret

0100bcec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100bcec:	defffc04 	addi	sp,sp,-16
 100bcf0:	df000315 	stw	fp,12(sp)
 100bcf4:	df000304 	addi	fp,sp,12
 100bcf8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100bcfc:	00bffa04 	movi	r2,-24
 100bd00:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100bd04:	e03ffd15 	stw	zero,-12(fp)
 100bd08:	00001d06 	br	100bd80 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 100bd0c:	00804074 	movhi	r2,257
 100bd10:	10b53704 	addi	r2,r2,-11044
 100bd14:	e0fffd17 	ldw	r3,-12(fp)
 100bd18:	18c00324 	muli	r3,r3,12
 100bd1c:	10c5883a 	add	r2,r2,r3
 100bd20:	10800017 	ldw	r2,0(r2)
 100bd24:	1000131e 	bne	r2,zero,100bd74 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 100bd28:	00804074 	movhi	r2,257
 100bd2c:	10b53704 	addi	r2,r2,-11044
 100bd30:	e0fffd17 	ldw	r3,-12(fp)
 100bd34:	18c00324 	muli	r3,r3,12
 100bd38:	10c5883a 	add	r2,r2,r3
 100bd3c:	e0ffff17 	ldw	r3,-4(fp)
 100bd40:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 100bd44:	00804074 	movhi	r2,257
 100bd48:	10b59d04 	addi	r2,r2,-10636
 100bd4c:	10c00017 	ldw	r3,0(r2)
 100bd50:	e0bffd17 	ldw	r2,-12(fp)
 100bd54:	1880040e 	bge	r3,r2,100bd68 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 100bd58:	00804074 	movhi	r2,257
 100bd5c:	10b59d04 	addi	r2,r2,-10636
 100bd60:	e0fffd17 	ldw	r3,-12(fp)
 100bd64:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 100bd68:	e0bffd17 	ldw	r2,-12(fp)
 100bd6c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 100bd70:	00000606 	br	100bd8c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100bd74:	e0bffd17 	ldw	r2,-12(fp)
 100bd78:	10800044 	addi	r2,r2,1
 100bd7c:	e0bffd15 	stw	r2,-12(fp)
 100bd80:	e0bffd17 	ldw	r2,-12(fp)
 100bd84:	10800810 	cmplti	r2,r2,32
 100bd88:	103fe01e 	bne	r2,zero,100bd0c <_gp+0xffff66b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100bd8c:	e0bffe17 	ldw	r2,-8(fp)
}
 100bd90:	e037883a 	mov	sp,fp
 100bd94:	df000017 	ldw	fp,0(sp)
 100bd98:	dec00104 	addi	sp,sp,4
 100bd9c:	f800283a 	ret

0100bda0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 100bda0:	defffb04 	addi	sp,sp,-20
 100bda4:	df000415 	stw	fp,16(sp)
 100bda8:	df000404 	addi	fp,sp,16
 100bdac:	e13ffe15 	stw	r4,-8(fp)
 100bdb0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 100bdb4:	e0bfff17 	ldw	r2,-4(fp)
 100bdb8:	10840070 	cmpltui	r2,r2,4097
 100bdbc:	1000021e 	bne	r2,zero,100bdc8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 100bdc0:	00840004 	movi	r2,4096
 100bdc4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 100bdc8:	e0fffe17 	ldw	r3,-8(fp)
 100bdcc:	e0bfff17 	ldw	r2,-4(fp)
 100bdd0:	1885883a 	add	r2,r3,r2
 100bdd4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100bdd8:	e0bffe17 	ldw	r2,-8(fp)
 100bddc:	e0bffc15 	stw	r2,-16(fp)
 100bde0:	00000506 	br	100bdf8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100bde4:	e0bffc17 	ldw	r2,-16(fp)
 100bde8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100bdec:	e0bffc17 	ldw	r2,-16(fp)
 100bdf0:	10800804 	addi	r2,r2,32
 100bdf4:	e0bffc15 	stw	r2,-16(fp)
 100bdf8:	e0fffc17 	ldw	r3,-16(fp)
 100bdfc:	e0bffd17 	ldw	r2,-12(fp)
 100be00:	18bff836 	bltu	r3,r2,100bde4 <_gp+0xffff6788>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100be04:	e0bffe17 	ldw	r2,-8(fp)
 100be08:	108007cc 	andi	r2,r2,31
 100be0c:	10000226 	beq	r2,zero,100be18 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 100be10:	e0bffc17 	ldw	r2,-16(fp)
 100be14:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 100be18:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 100be1c:	0001883a 	nop
 100be20:	e037883a 	mov	sp,fp
 100be24:	df000017 	ldw	fp,0(sp)
 100be28:	dec00104 	addi	sp,sp,4
 100be2c:	f800283a 	ret

0100be30 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 100be30:	defffe04 	addi	sp,sp,-8
 100be34:	df000115 	stw	fp,4(sp)
 100be38:	df000104 	addi	fp,sp,4
 100be3c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 100be40:	e0bfff17 	ldw	r2,-4(fp)
 100be44:	10bffe84 	addi	r2,r2,-6
 100be48:	10c00428 	cmpgeui	r3,r2,16
 100be4c:	18001a1e 	bne	r3,zero,100beb8 <alt_exception_cause_generated_bad_addr+0x88>
 100be50:	100690ba 	slli	r3,r2,2
 100be54:	00804074 	movhi	r2,257
 100be58:	10af9a04 	addi	r2,r2,-16792
 100be5c:	1885883a 	add	r2,r3,r2
 100be60:	10800017 	ldw	r2,0(r2)
 100be64:	1000683a 	jmp	r2
 100be68:	0100bea8 	cmpgeui	r4,zero,762
 100be6c:	0100bea8 	cmpgeui	r4,zero,762
 100be70:	0100beb8 	rdprs	r4,zero,762
 100be74:	0100beb8 	rdprs	r4,zero,762
 100be78:	0100beb8 	rdprs	r4,zero,762
 100be7c:	0100bea8 	cmpgeui	r4,zero,762
 100be80:	0100beb0 	cmpltui	r4,zero,762
 100be84:	0100beb8 	rdprs	r4,zero,762
 100be88:	0100bea8 	cmpgeui	r4,zero,762
 100be8c:	0100bea8 	cmpgeui	r4,zero,762
 100be90:	0100beb8 	rdprs	r4,zero,762
 100be94:	0100bea8 	cmpgeui	r4,zero,762
 100be98:	0100beb0 	cmpltui	r4,zero,762
 100be9c:	0100beb8 	rdprs	r4,zero,762
 100bea0:	0100beb8 	rdprs	r4,zero,762
 100bea4:	0100bea8 	cmpgeui	r4,zero,762
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 100bea8:	00800044 	movi	r2,1
 100beac:	00000306 	br	100bebc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 100beb0:	0005883a 	mov	r2,zero
 100beb4:	00000106 	br	100bebc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 100beb8:	0005883a 	mov	r2,zero
  }
}
 100bebc:	e037883a 	mov	sp,fp
 100bec0:	df000017 	ldw	fp,0(sp)
 100bec4:	dec00104 	addi	sp,sp,4
 100bec8:	f800283a 	ret

0100becc <exit>:
 100becc:	defffe04 	addi	sp,sp,-8
 100bed0:	000b883a 	mov	r5,zero
 100bed4:	dc000015 	stw	r16,0(sp)
 100bed8:	dfc00115 	stw	ra,4(sp)
 100bedc:	2021883a 	mov	r16,r4
 100bee0:	100bf440 	call	100bf44 <__call_exitprocs>
 100bee4:	8009883a 	mov	r4,r16
 100bee8:	100c2880 	call	100c288 <_exit>

0100beec <memcmp>:
 100beec:	218d883a 	add	r6,r4,r6
 100bef0:	21800826 	beq	r4,r6,100bf14 <memcmp+0x28>
 100bef4:	20800003 	ldbu	r2,0(r4)
 100bef8:	28c00003 	ldbu	r3,0(r5)
 100befc:	10c00226 	beq	r2,r3,100bf08 <memcmp+0x1c>
 100bf00:	10c5c83a 	sub	r2,r2,r3
 100bf04:	f800283a 	ret
 100bf08:	21000044 	addi	r4,r4,1
 100bf0c:	29400044 	addi	r5,r5,1
 100bf10:	003ff706 	br	100bef0 <_gp+0xffff6894>
 100bf14:	0005883a 	mov	r2,zero
 100bf18:	f800283a 	ret

0100bf1c <memcpy>:
 100bf1c:	2005883a 	mov	r2,r4
 100bf20:	2007883a 	mov	r3,r4
 100bf24:	218d883a 	add	r6,r4,r6
 100bf28:	19800526 	beq	r3,r6,100bf40 <memcpy+0x24>
 100bf2c:	29000003 	ldbu	r4,0(r5)
 100bf30:	18c00044 	addi	r3,r3,1
 100bf34:	29400044 	addi	r5,r5,1
 100bf38:	193fffc5 	stb	r4,-1(r3)
 100bf3c:	003ffa06 	br	100bf28 <_gp+0xffff68cc>
 100bf40:	f800283a 	ret

0100bf44 <__call_exitprocs>:
 100bf44:	defff504 	addi	sp,sp,-44
 100bf48:	dd000515 	stw	r20,20(sp)
 100bf4c:	05004074 	movhi	r20,257
 100bf50:	dc800315 	stw	r18,12(sp)
 100bf54:	dfc00a15 	stw	ra,40(sp)
 100bf58:	df000915 	stw	fp,36(sp)
 100bf5c:	ddc00815 	stw	r23,32(sp)
 100bf60:	dd800715 	stw	r22,28(sp)
 100bf64:	dd400615 	stw	r21,24(sp)
 100bf68:	dcc00415 	stw	r19,16(sp)
 100bf6c:	dc400215 	stw	r17,8(sp)
 100bf70:	dc000115 	stw	r16,4(sp)
 100bf74:	d9000015 	stw	r4,0(sp)
 100bf78:	2825883a 	mov	r18,r5
 100bf7c:	a5359704 	addi	r20,r20,-10660
 100bf80:	a4400017 	ldw	r17,0(r20)
 100bf84:	8cc00c17 	ldw	r19,48(r17)
 100bf88:	8c400c04 	addi	r17,r17,48
 100bf8c:	98004526 	beq	r19,zero,100c0a4 <__call_exitprocs+0x160>
 100bf90:	9c000117 	ldw	r16,4(r19)
 100bf94:	00900034 	movhi	r2,16384
 100bf98:	10bfffc4 	addi	r2,r2,-1
 100bf9c:	9d402217 	ldw	r21,136(r19)
 100bfa0:	85bfffc4 	addi	r22,r16,-1
 100bfa4:	80a1883a 	add	r16,r16,r2
 100bfa8:	8421883a 	add	r16,r16,r16
 100bfac:	8421883a 	add	r16,r16,r16
 100bfb0:	ac2f883a 	add	r23,r21,r16
 100bfb4:	84000204 	addi	r16,r16,8
 100bfb8:	9c21883a 	add	r16,r19,r16
 100bfbc:	b0002716 	blt	r22,zero,100c05c <__call_exitprocs+0x118>
 100bfc0:	90000726 	beq	r18,zero,100bfe0 <__call_exitprocs+0x9c>
 100bfc4:	a800041e 	bne	r21,zero,100bfd8 <__call_exitprocs+0x94>
 100bfc8:	b5bfffc4 	addi	r22,r22,-1
 100bfcc:	bdffff04 	addi	r23,r23,-4
 100bfd0:	843fff04 	addi	r16,r16,-4
 100bfd4:	003ff906 	br	100bfbc <_gp+0xffff6960>
 100bfd8:	b9002017 	ldw	r4,128(r23)
 100bfdc:	913ffa1e 	bne	r18,r4,100bfc8 <_gp+0xffff696c>
 100bfe0:	99000117 	ldw	r4,4(r19)
 100bfe4:	82000017 	ldw	r8,0(r16)
 100bfe8:	213fffc4 	addi	r4,r4,-1
 100bfec:	b100021e 	bne	r22,r4,100bff8 <__call_exitprocs+0xb4>
 100bff0:	9d800115 	stw	r22,4(r19)
 100bff4:	00000106 	br	100bffc <__call_exitprocs+0xb8>
 100bff8:	80000015 	stw	zero,0(r16)
 100bffc:	403ff226 	beq	r8,zero,100bfc8 <_gp+0xffff696c>
 100c000:	9f000117 	ldw	fp,4(r19)
 100c004:	a8000526 	beq	r21,zero,100c01c <__call_exitprocs+0xd8>
 100c008:	00800044 	movi	r2,1
 100c00c:	1592983a 	sll	r9,r2,r22
 100c010:	a9404017 	ldw	r5,256(r21)
 100c014:	494a703a 	and	r5,r9,r5
 100c018:	2800021e 	bne	r5,zero,100c024 <__call_exitprocs+0xe0>
 100c01c:	403ee83a 	callr	r8
 100c020:	00000906 	br	100c048 <__call_exitprocs+0x104>
 100c024:	a9004117 	ldw	r4,260(r21)
 100c028:	4908703a 	and	r4,r9,r4
 100c02c:	2000041e 	bne	r4,zero,100c040 <__call_exitprocs+0xfc>
 100c030:	b9400017 	ldw	r5,0(r23)
 100c034:	d9000017 	ldw	r4,0(sp)
 100c038:	403ee83a 	callr	r8
 100c03c:	00000206 	br	100c048 <__call_exitprocs+0x104>
 100c040:	b9000017 	ldw	r4,0(r23)
 100c044:	403ee83a 	callr	r8
 100c048:	99000117 	ldw	r4,4(r19)
 100c04c:	e13fcc1e 	bne	fp,r4,100bf80 <_gp+0xffff6924>
 100c050:	89000017 	ldw	r4,0(r17)
 100c054:	993fdc26 	beq	r19,r4,100bfc8 <_gp+0xffff696c>
 100c058:	003fc906 	br	100bf80 <_gp+0xffff6924>
 100c05c:	00800034 	movhi	r2,0
 100c060:	10800004 	addi	r2,r2,0
 100c064:	10000f26 	beq	r2,zero,100c0a4 <__call_exitprocs+0x160>
 100c068:	99400117 	ldw	r5,4(r19)
 100c06c:	99000017 	ldw	r4,0(r19)
 100c070:	2800091e 	bne	r5,zero,100c098 <__call_exitprocs+0x154>
 100c074:	20000826 	beq	r4,zero,100c098 <__call_exitprocs+0x154>
 100c078:	89000015 	stw	r4,0(r17)
 100c07c:	a8000226 	beq	r21,zero,100c088 <__call_exitprocs+0x144>
 100c080:	a809883a 	mov	r4,r21
 100c084:	00000000 	call	0 <__reset-0x1008000>
 100c088:	9809883a 	mov	r4,r19
 100c08c:	00000000 	call	0 <__reset-0x1008000>
 100c090:	8cc00017 	ldw	r19,0(r17)
 100c094:	003fbd06 	br	100bf8c <_gp+0xffff6930>
 100c098:	9823883a 	mov	r17,r19
 100c09c:	2027883a 	mov	r19,r4
 100c0a0:	003fba06 	br	100bf8c <_gp+0xffff6930>
 100c0a4:	dfc00a17 	ldw	ra,40(sp)
 100c0a8:	df000917 	ldw	fp,36(sp)
 100c0ac:	ddc00817 	ldw	r23,32(sp)
 100c0b0:	dd800717 	ldw	r22,28(sp)
 100c0b4:	dd400617 	ldw	r21,24(sp)
 100c0b8:	dd000517 	ldw	r20,20(sp)
 100c0bc:	dcc00417 	ldw	r19,16(sp)
 100c0c0:	dc800317 	ldw	r18,12(sp)
 100c0c4:	dc400217 	ldw	r17,8(sp)
 100c0c8:	dc000117 	ldw	r16,4(sp)
 100c0cc:	dec00b04 	addi	sp,sp,44
 100c0d0:	f800283a 	ret

0100c0d4 <__divsi3>:
 100c0d4:	20001b16 	blt	r4,zero,100c144 <__divsi3+0x70>
 100c0d8:	000f883a 	mov	r7,zero
 100c0dc:	28001616 	blt	r5,zero,100c138 <__divsi3+0x64>
 100c0e0:	200d883a 	mov	r6,r4
 100c0e4:	29001a2e 	bgeu	r5,r4,100c150 <__divsi3+0x7c>
 100c0e8:	00800804 	movi	r2,32
 100c0ec:	00c00044 	movi	r3,1
 100c0f0:	00000106 	br	100c0f8 <__divsi3+0x24>
 100c0f4:	10000d26 	beq	r2,zero,100c12c <__divsi3+0x58>
 100c0f8:	294b883a 	add	r5,r5,r5
 100c0fc:	10bfffc4 	addi	r2,r2,-1
 100c100:	18c7883a 	add	r3,r3,r3
 100c104:	293ffb36 	bltu	r5,r4,100c0f4 <_gp+0xffff6a98>
 100c108:	0005883a 	mov	r2,zero
 100c10c:	18000726 	beq	r3,zero,100c12c <__divsi3+0x58>
 100c110:	0005883a 	mov	r2,zero
 100c114:	31400236 	bltu	r6,r5,100c120 <__divsi3+0x4c>
 100c118:	314dc83a 	sub	r6,r6,r5
 100c11c:	10c4b03a 	or	r2,r2,r3
 100c120:	1806d07a 	srli	r3,r3,1
 100c124:	280ad07a 	srli	r5,r5,1
 100c128:	183ffa1e 	bne	r3,zero,100c114 <_gp+0xffff6ab8>
 100c12c:	38000126 	beq	r7,zero,100c134 <__divsi3+0x60>
 100c130:	0085c83a 	sub	r2,zero,r2
 100c134:	f800283a 	ret
 100c138:	014bc83a 	sub	r5,zero,r5
 100c13c:	39c0005c 	xori	r7,r7,1
 100c140:	003fe706 	br	100c0e0 <_gp+0xffff6a84>
 100c144:	0109c83a 	sub	r4,zero,r4
 100c148:	01c00044 	movi	r7,1
 100c14c:	003fe306 	br	100c0dc <_gp+0xffff6a80>
 100c150:	00c00044 	movi	r3,1
 100c154:	003fee06 	br	100c110 <_gp+0xffff6ab4>

0100c158 <__modsi3>:
 100c158:	20001716 	blt	r4,zero,100c1b8 <__modsi3+0x60>
 100c15c:	000f883a 	mov	r7,zero
 100c160:	2005883a 	mov	r2,r4
 100c164:	28001216 	blt	r5,zero,100c1b0 <__modsi3+0x58>
 100c168:	2900162e 	bgeu	r5,r4,100c1c4 <__modsi3+0x6c>
 100c16c:	01800804 	movi	r6,32
 100c170:	00c00044 	movi	r3,1
 100c174:	00000106 	br	100c17c <__modsi3+0x24>
 100c178:	30000a26 	beq	r6,zero,100c1a4 <__modsi3+0x4c>
 100c17c:	294b883a 	add	r5,r5,r5
 100c180:	31bfffc4 	addi	r6,r6,-1
 100c184:	18c7883a 	add	r3,r3,r3
 100c188:	293ffb36 	bltu	r5,r4,100c178 <_gp+0xffff6b1c>
 100c18c:	18000526 	beq	r3,zero,100c1a4 <__modsi3+0x4c>
 100c190:	1806d07a 	srli	r3,r3,1
 100c194:	11400136 	bltu	r2,r5,100c19c <__modsi3+0x44>
 100c198:	1145c83a 	sub	r2,r2,r5
 100c19c:	280ad07a 	srli	r5,r5,1
 100c1a0:	183ffb1e 	bne	r3,zero,100c190 <_gp+0xffff6b34>
 100c1a4:	38000126 	beq	r7,zero,100c1ac <__modsi3+0x54>
 100c1a8:	0085c83a 	sub	r2,zero,r2
 100c1ac:	f800283a 	ret
 100c1b0:	014bc83a 	sub	r5,zero,r5
 100c1b4:	003fec06 	br	100c168 <_gp+0xffff6b0c>
 100c1b8:	0109c83a 	sub	r4,zero,r4
 100c1bc:	01c00044 	movi	r7,1
 100c1c0:	003fe706 	br	100c160 <_gp+0xffff6b04>
 100c1c4:	00c00044 	movi	r3,1
 100c1c8:	003ff106 	br	100c190 <_gp+0xffff6b34>

0100c1cc <__udivsi3>:
 100c1cc:	200d883a 	mov	r6,r4
 100c1d0:	2900152e 	bgeu	r5,r4,100c228 <__udivsi3+0x5c>
 100c1d4:	28001416 	blt	r5,zero,100c228 <__udivsi3+0x5c>
 100c1d8:	00800804 	movi	r2,32
 100c1dc:	00c00044 	movi	r3,1
 100c1e0:	00000206 	br	100c1ec <__udivsi3+0x20>
 100c1e4:	10000e26 	beq	r2,zero,100c220 <__udivsi3+0x54>
 100c1e8:	28000516 	blt	r5,zero,100c200 <__udivsi3+0x34>
 100c1ec:	294b883a 	add	r5,r5,r5
 100c1f0:	10bfffc4 	addi	r2,r2,-1
 100c1f4:	18c7883a 	add	r3,r3,r3
 100c1f8:	293ffa36 	bltu	r5,r4,100c1e4 <_gp+0xffff6b88>
 100c1fc:	18000826 	beq	r3,zero,100c220 <__udivsi3+0x54>
 100c200:	0005883a 	mov	r2,zero
 100c204:	31400236 	bltu	r6,r5,100c210 <__udivsi3+0x44>
 100c208:	314dc83a 	sub	r6,r6,r5
 100c20c:	10c4b03a 	or	r2,r2,r3
 100c210:	1806d07a 	srli	r3,r3,1
 100c214:	280ad07a 	srli	r5,r5,1
 100c218:	183ffa1e 	bne	r3,zero,100c204 <_gp+0xffff6ba8>
 100c21c:	f800283a 	ret
 100c220:	0005883a 	mov	r2,zero
 100c224:	f800283a 	ret
 100c228:	00c00044 	movi	r3,1
 100c22c:	003ff406 	br	100c200 <_gp+0xffff6ba4>

0100c230 <__umodsi3>:
 100c230:	2005883a 	mov	r2,r4
 100c234:	2900122e 	bgeu	r5,r4,100c280 <__umodsi3+0x50>
 100c238:	28001116 	blt	r5,zero,100c280 <__umodsi3+0x50>
 100c23c:	01800804 	movi	r6,32
 100c240:	00c00044 	movi	r3,1
 100c244:	00000206 	br	100c250 <__umodsi3+0x20>
 100c248:	30000c26 	beq	r6,zero,100c27c <__umodsi3+0x4c>
 100c24c:	28000516 	blt	r5,zero,100c264 <__umodsi3+0x34>
 100c250:	294b883a 	add	r5,r5,r5
 100c254:	31bfffc4 	addi	r6,r6,-1
 100c258:	18c7883a 	add	r3,r3,r3
 100c25c:	293ffa36 	bltu	r5,r4,100c248 <_gp+0xffff6bec>
 100c260:	18000626 	beq	r3,zero,100c27c <__umodsi3+0x4c>
 100c264:	1806d07a 	srli	r3,r3,1
 100c268:	11400136 	bltu	r2,r5,100c270 <__umodsi3+0x40>
 100c26c:	1145c83a 	sub	r2,r2,r5
 100c270:	280ad07a 	srli	r5,r5,1
 100c274:	183ffb1e 	bne	r3,zero,100c264 <_gp+0xffff6c08>
 100c278:	f800283a 	ret
 100c27c:	f800283a 	ret
 100c280:	00c00044 	movi	r3,1
 100c284:	003ff706 	br	100c264 <_gp+0xffff6c08>

0100c288 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100c288:	defffd04 	addi	sp,sp,-12
 100c28c:	df000215 	stw	fp,8(sp)
 100c290:	df000204 	addi	fp,sp,8
 100c294:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 100c298:	0001883a 	nop
 100c29c:	e0bfff17 	ldw	r2,-4(fp)
 100c2a0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 100c2a4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100c2a8:	10000226 	beq	r2,zero,100c2b4 <_exit+0x2c>
    ALT_SIM_FAIL();
 100c2ac:	002af070 	cmpltui	zero,zero,43969
 100c2b0:	00000106 	br	100c2b8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 100c2b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100c2b8:	003fff06 	br	100c2b8 <_gp+0xffff6c5c>
