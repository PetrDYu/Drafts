
Oscill_PO.elf:     file format elf32-littlenios2
Oscill_PO.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080248

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00003d64 memsz 0x00003d64 flags r-x
    LOAD off    0x00004d84 vaddr 0x00083d84 paddr 0x0008514c align 2**12
         filesz 0x000013c8 memsz 0x000013c8 flags rw-
    LOAD off    0x00006514 vaddr 0x00086514 paddr 0x00086514 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003a5c  00080248  00080248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e0  00083ca4  00083ca4  00004ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000013c8  00083d84  0008514c  00004d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00086514  00086514  00006514  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00086634  00086634  0000614c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000614c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000638  00000000  00000000  00006170  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009606  00000000  00000000  000067a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003110  00000000  00000000  0000fdae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000396f  00000000  00000000  00012ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000de4  00000000  00000000  00016830  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000216a  00000000  00000000  00017614  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000141d  00000000  00000000  0001977e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0001ab9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002e0  00000000  00000000  0001abd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001cc96  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  0001cc99  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001cc9f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001cca0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001cca1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001cca5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001cca9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001ccad  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001ccb6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001ccbf  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001ccc8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002f  00000000  00000000  0001ccd3  2**0
                  CONTENTS, READONLY
 29 .jdi          00003d1f  00000000  00000000  0001cd02  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a7881  00000000  00000000  00020a21  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080248 l    d  .text	00000000 .text
00083ca4 l    d  .rodata	00000000 .rodata
00083d84 l    d  .rwdata	00000000 .rwdata
00086514 l    d  .bss	00000000 .bss
00086634 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Oscill_PO_bsp//obj/HAL/src/crt0.o
00080290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00080470 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00083d84 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00080ce0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00080e38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00080f80 l     F .text	00000038 alt_dev_reg
00083e64 l     O .rwdata	00001060 jtag_uart
00084ec4 l     O .rwdata	00000030 av_config
00084ef4 l     O .rwdata	00000030 audio_transf
00084f24 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00081450 l     F .text	00000210 altera_avalon_jtag_uart_irq
00081660 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00082c98 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00082e00 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00082e2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00082fe4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000832d4 l     F .text	00000050 alt_get_errno
00083324 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00086530 g     O .bss	00000004 alt_instruction_exception_handler
00080dcc g     F .text	0000006c alt_main
00082578 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
000803c0 g     F .text	00000080 _puts_r
00086534 g     O .bss	00000100 alt_irq
0008514c g       *ABS*	00000000 __flash_rwdata_start
00080374 g     F .text	0000004c printf
00081ce0 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
00083750 g     F .text	00000024 altera_nios2_gen2_irq_init
00081ca0 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00086514 g     O .bss	00000004 errno
0008651c g     O .bss	00000004 alt_argv
0008d120 g       *ABS*	00000000 _gp
00081e74 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
00084fa0 g     O .rwdata	00000180 alt_fd_list
00082f20 g     F .text	00000090 alt_find_dev
00083ab8 g     F .text	00000028 memcpy
000830a8 g     F .text	0000007c alt_io_redirect
00080440 g     F .text	00000014 puts
000839cc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00081f30 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00081860 g     F .text	0000021c altera_avalon_jtag_uart_read
00080338 g     F .text	0000003c _printf_r
00080c24 g     F .text	00000064 .hidden __udivsi3
00082368 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
0008393c g     F .text	00000090 alt_icache_flush
0008288c g     F .text	00000084 helper_plot_pixel
00085138 g     O .rwdata	00000004 alt_max_fd
00083124 g     F .text	000001b0 alt_irq_register
00081f64 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
00085120 g     O .rwdata	00000004 _global_impure_ptr
00086634 g       *ABS*	00000000 __bss_end
0008208c g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
00083648 g     F .text	00000108 alt_tick
000835ac g     F .text	0000009c alt_alarm_stop
00086524 g     O .bss	00000004 alt_irq_active
000800fc g     F .exceptions	000000d8 alt_irq_handler
00084f78 g     O .rwdata	00000028 alt_dev_null
00082db8 g     F .text	00000048 alt_dcache_flush_all
000827c4 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
0008514c g       *ABS*	00000000 __ram_rwdata_end
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory
00085130 g     O .rwdata	00000008 alt_dev_list
00080e88 g     F .text	000000f8 write
00082910 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
00083d84 g       *ABS*	00000000 __ram_rodata_end
00080c88 g     F .text	00000058 .hidden __umodsi3
00086634 g       *ABS*	00000000 end
00081394 g     F .text	000000bc altera_avalon_jtag_uart_init
000801d4 g     F .exceptions	00000074 alt_instruction_exception_entry
000ce200 g       *ABS*	00000000 __alt_stack_pointer
00081a7c g     F .text	00000224 altera_avalon_jtag_uart_write
000804dc g     F .text	00000524 ___vfprintf_internal_r
00083ae0 g     F .text	00000190 __call_exitprocs
00080248 g     F .text	0000004c _start
00086528 g     O .bss	00000004 _alt_tick_rate
0008652c g     O .bss	00000004 _alt_nticks
00080ff0 g     F .text	00000240 alt_sys_init
00081708 g     F .text	00000068 altera_avalon_jtag_uart_close
00083d84 g       *ABS*	00000000 __ram_rwdata_start
00083ca4 g       *ABS*	00000000 __ram_rodata_start
00081230 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00083888 g     F .text	000000b4 alt_get_fd
00083a88 g     F .text	00000030 memcmp
000812f0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00086634 g       *ABS*	00000000 __alt_stack_base
00081340 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00083774 g     F .text	00000114 alt_find_file
00082e7c g     F .text	000000a4 alt_dev_llist_insert
00080a1c g     F .text	000000b8 __sfvwrite_small_dev
00086514 g       *ABS*	00000000 __bss_start
00080294 g     F .text	000000a4 main
00086520 g     O .bss	00000004 alt_envp
00081ed0 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
00081290 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008513c g     O .rwdata	00000004 alt_errno
00080b2c g     F .text	00000084 .hidden __divsi3
00083ca4 g       *ABS*	00000000 __flash_rodata_start
00080fb8 g     F .text	00000038 alt_irq_init
00083548 g     F .text	00000064 alt_release_fd
00080ad4 g     F .text	00000058 _write_r
00085124 g     O .rwdata	00000004 _impure_ptr
00086518 g     O .bss	00000004 alt_argc
00080020 g       .exceptions	00000000 alt_irq_entry
00085128 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008514c g       *ABS*	00000000 _edata
00086634 g       *ABS*	00000000 _end
00080248 g       *ABS*	00000000 __ram_exceptions_end
00081770 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00083a68 g     F .text	00000020 exit
00080bb0 g     F .text	00000074 .hidden __modsi3
000ce200 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00083c70 g     F .text	00000034 _exit
00082b58 g     F .text	00000140 alt_alarm_start
00080454 g     F .text	0000001c strlen
000833f0 g     F .text	00000158 open
00082fb0 g     F .text	00000034 alt_icache_flush_all
00085140 g     O .rwdata	00000004 alt_priority_mask
00080a00 g     F .text	0000001c __vfprintf_internal
00085144 g     O .rwdata	00000008 alt_alarm_list
00082ce8 g     F .text	000000d0 close
00080d48 g     F .text	00000084 alt_load



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__alt_data_end+0xfffb1e04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409214 	ori	at,at,584
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d40 	call	801d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001526 	beq	r2,zero,80190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   8013c:	00800234 	movhi	r2,8
   80140:	10994d04 	addi	r2,r2,25908
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800234 	movhi	r2,8
   80158:	10994d04 	addi	r2,r2,25908
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	e17ffd17 	ldw	r5,-12(fp)
   80174:	1009883a 	mov	r4,r2
   80178:	183ee83a 	callr	r3
#endif
        break;
   8017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80180:	0005313a 	rdctl	r2,ipending
   80184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80188:	e0bfff17 	ldw	r2,-4(fp)
   8018c:	00000706 	br	801ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   80190:	e0bffc17 	ldw	r2,-16(fp)
   80194:	1085883a 	add	r2,r2,r2
   80198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   8019c:	e0bffd17 	ldw	r2,-12(fp)
   801a0:	10800044 	addi	r2,r2,1
   801a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a8:	003fe006 	br	8012c <__alt_data_end+0xfffb1f2c>

    active = alt_irq_pending ();
   801ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801b0:	e0bffb17 	ldw	r2,-20(fp)
   801b4:	103fda1e 	bne	r2,zero,80120 <__alt_data_end+0xfffb1f20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b8:	0001883a 	nop
}
   801bc:	0001883a 	nop
   801c0:	e037883a 	mov	sp,fp
   801c4:	dfc00117 	ldw	ra,4(sp)
   801c8:	df000017 	ldw	fp,0(sp)
   801cc:	dec00204 	addi	sp,sp,8
   801d0:	f800283a 	ret

000801d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d4:	defffb04 	addi	sp,sp,-20
   801d8:	dfc00415 	stw	ra,16(sp)
   801dc:	df000315 	stw	fp,12(sp)
   801e0:	df000304 	addi	fp,sp,12
   801e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e8:	000531fa 	rdctl	r2,exception
   801ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801f0:	e0bffd17 	ldw	r2,-12(fp)
   801f4:	10801f0c 	andi	r2,r2,124
   801f8:	1004d0ba 	srli	r2,r2,2
   801fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   80200:	0005333a 	rdctl	r2,badaddr
   80204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80208:	d0a50417 	ldw	r2,-27632(gp)
   8020c:	10000726 	beq	r2,zero,8022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   80210:	d0a50417 	ldw	r2,-27632(gp)
   80214:	e0fffd17 	ldw	r3,-12(fp)
   80218:	e1bffe17 	ldw	r6,-8(fp)
   8021c:	e17fff17 	ldw	r5,-4(fp)
   80220:	1809883a 	mov	r4,r3
   80224:	103ee83a 	callr	r2
   80228:	00000206 	br	80234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   8022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80230:	0005883a 	mov	r2,zero
}
   80234:	e037883a 	mov	sp,fp
   80238:	dfc00117 	ldw	ra,4(sp)
   8023c:	df000017 	ldw	fp,0(sp)
   80240:	dec00204 	addi	sp,sp,8
   80244:	f800283a 	ret

Disassembly of section .text:

00080248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   8024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   80250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80254:	00bffd16 	blt	zero,r2,8024c <__alt_data_end+0xfffb204c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80258:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   8025c:	def88014 	ori	sp,sp,57856
    movhi gp, %hi(_gp)
   80260:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   80264:	d6b44814 	ori	gp,gp,53536
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80268:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   8026c:	10994514 	ori	r2,r2,25876

    movhi r3, %hi(__bss_end)
   80270:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   80274:	18d98d14 	ori	r3,r3,26164

    beq r2, r3, 1f
   80278:	10c00326 	beq	r2,r3,80288 <_start+0x40>

0:
    stw zero, (r2)
   8027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80284:	10fffd36 	bltu	r2,r3,8027c <__alt_data_end+0xfffb207c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80288:	0080d480 	call	80d48 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   8028c:	0080dcc0 	call	80dcc <alt_main>

00080290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80290:	003fff06 	br	80290 <__alt_data_end+0xfffb2090>

00080294 <main>:
#define SIZEX 640
#define SIZEY 480
#define NUM_POINT 40

int main()
{
   80294:	defffa04 	addi	sp,sp,-24
   80298:	dfc00515 	stw	ra,20(sp)
   8029c:	df000415 	stw	fp,16(sp)
   802a0:	df000404 	addi	fp,sp,16
		}
	}*/

	alt_up_pixel_buffer_dma_dev * pixel_buf_dev;

	pixel_buf_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/video_pixel_buffer_dma_0");
   802a4:	01000234 	movhi	r4,8
   802a8:	210f2904 	addi	r4,r4,15524
   802ac:	0081ca00 	call	81ca0 <alt_up_pixel_buffer_dma_open_dev>
   802b0:	e0bfff15 	stw	r2,-4(fp)
	if( pixel_buf_dev == NULL)
   802b4:	e0bfff17 	ldw	r2,-4(fp)
   802b8:	1000041e 	bne	r2,zero,802cc <main+0x38>
		printf ("Error: could not open pixel buffer device \n");
   802bc:	01000234 	movhi	r4,8
   802c0:	210f3104 	addi	r4,r4,15556
   802c4:	00804400 	call	80440 <puts>
   802c8:	00000306 	br	802d8 <main+0x44>
	else
		printf ("Opened pixel buffer device \n");
   802cc:	01000234 	movhi	r4,8
   802d0:	210f3c04 	addi	r4,r4,15600
   802d4:	00804400 	call	80440 <puts>

	printf("%d\n", pixel_buf_dev);
   802d8:	e17fff17 	ldw	r5,-4(fp)
   802dc:	01000234 	movhi	r4,8
   802e0:	210f4304 	addi	r4,r4,15628
   802e4:	00803740 	call	80374 <printf>

	}*/

	while(1)
	{
		alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buf_dev, 0x00011000);
   802e8:	01400074 	movhi	r5,1
   802ec:	29440004 	addi	r5,r5,4096
   802f0:	e13fff17 	ldw	r4,-4(fp)
   802f4:	0081e740 	call	81e74 <alt_up_pixel_buffer_dma_change_back_buffer_address>
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);
   802f8:	e13fff17 	ldw	r4,-4(fp)
   802fc:	0081ed00 	call	81ed0 <alt_up_pixel_buffer_dma_swap_buffers>
		alt_up_pixel_buffer_dma_clear_screen (pixel_buf_dev,0);
   80300:	000b883a 	mov	r5,zero
   80304:	e13fff17 	ldw	r4,-4(fp)
   80308:	0081f640 	call	81f64 <alt_up_pixel_buffer_dma_clear_screen>

		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dev, 0, 0, 159, 119, 0xF, 0);
   8030c:	d8000215 	stw	zero,8(sp)
   80310:	008003c4 	movi	r2,15
   80314:	d8800115 	stw	r2,4(sp)
   80318:	00801dc4 	movi	r2,119
   8031c:	d8800015 	stw	r2,0(sp)
   80320:	01c027c4 	movi	r7,159
   80324:	000d883a 	mov	r6,zero
   80328:	000b883a 	mov	r5,zero
   8032c:	e13fff17 	ldw	r4,-4(fp)
   80330:	008208c0 	call	8208c <alt_up_pixel_buffer_dma_draw_box>
	}
   80334:	003fec06 	br	802e8 <__alt_data_end+0xfffb20e8>

00080338 <_printf_r>:
   80338:	defffd04 	addi	sp,sp,-12
   8033c:	dfc00015 	stw	ra,0(sp)
   80340:	d9800115 	stw	r6,4(sp)
   80344:	d9c00215 	stw	r7,8(sp)
   80348:	20c00217 	ldw	r3,8(r4)
   8034c:	01800234 	movhi	r6,8
   80350:	31828704 	addi	r6,r6,2588
   80354:	19800115 	stw	r6,4(r3)
   80358:	280d883a 	mov	r6,r5
   8035c:	21400217 	ldw	r5,8(r4)
   80360:	d9c00104 	addi	r7,sp,4
   80364:	00804dc0 	call	804dc <___vfprintf_internal_r>
   80368:	dfc00017 	ldw	ra,0(sp)
   8036c:	dec00304 	addi	sp,sp,12
   80370:	f800283a 	ret

00080374 <printf>:
   80374:	defffc04 	addi	sp,sp,-16
   80378:	dfc00015 	stw	ra,0(sp)
   8037c:	d9400115 	stw	r5,4(sp)
   80380:	d9800215 	stw	r6,8(sp)
   80384:	d9c00315 	stw	r7,12(sp)
   80388:	00800234 	movhi	r2,8
   8038c:	10944904 	addi	r2,r2,20772
   80390:	10800017 	ldw	r2,0(r2)
   80394:	01400234 	movhi	r5,8
   80398:	29428704 	addi	r5,r5,2588
   8039c:	10c00217 	ldw	r3,8(r2)
   803a0:	d9800104 	addi	r6,sp,4
   803a4:	19400115 	stw	r5,4(r3)
   803a8:	200b883a 	mov	r5,r4
   803ac:	11000217 	ldw	r4,8(r2)
   803b0:	0080a000 	call	80a00 <__vfprintf_internal>
   803b4:	dfc00017 	ldw	ra,0(sp)
   803b8:	dec00404 	addi	sp,sp,16
   803bc:	f800283a 	ret

000803c0 <_puts_r>:
   803c0:	defffd04 	addi	sp,sp,-12
   803c4:	dc000015 	stw	r16,0(sp)
   803c8:	2021883a 	mov	r16,r4
   803cc:	2809883a 	mov	r4,r5
   803d0:	dfc00215 	stw	ra,8(sp)
   803d4:	dc400115 	stw	r17,4(sp)
   803d8:	2823883a 	mov	r17,r5
   803dc:	00804540 	call	80454 <strlen>
   803e0:	81400217 	ldw	r5,8(r16)
   803e4:	01000234 	movhi	r4,8
   803e8:	21028704 	addi	r4,r4,2588
   803ec:	29000115 	stw	r4,4(r5)
   803f0:	100f883a 	mov	r7,r2
   803f4:	880d883a 	mov	r6,r17
   803f8:	8009883a 	mov	r4,r16
   803fc:	0080a1c0 	call	80a1c <__sfvwrite_small_dev>
   80400:	00ffffc4 	movi	r3,-1
   80404:	10c00926 	beq	r2,r3,8042c <_puts_r+0x6c>
   80408:	81400217 	ldw	r5,8(r16)
   8040c:	01800234 	movhi	r6,8
   80410:	01c00044 	movi	r7,1
   80414:	28800117 	ldw	r2,4(r5)
   80418:	318f4404 	addi	r6,r6,15632
   8041c:	8009883a 	mov	r4,r16
   80420:	103ee83a 	callr	r2
   80424:	10bfffe0 	cmpeqi	r2,r2,-1
   80428:	0085c83a 	sub	r2,zero,r2
   8042c:	dfc00217 	ldw	ra,8(sp)
   80430:	dc400117 	ldw	r17,4(sp)
   80434:	dc000017 	ldw	r16,0(sp)
   80438:	dec00304 	addi	sp,sp,12
   8043c:	f800283a 	ret

00080440 <puts>:
   80440:	00800234 	movhi	r2,8
   80444:	10944904 	addi	r2,r2,20772
   80448:	200b883a 	mov	r5,r4
   8044c:	11000017 	ldw	r4,0(r2)
   80450:	00803c01 	jmpi	803c0 <_puts_r>

00080454 <strlen>:
   80454:	2005883a 	mov	r2,r4
   80458:	10c00007 	ldb	r3,0(r2)
   8045c:	18000226 	beq	r3,zero,80468 <strlen+0x14>
   80460:	10800044 	addi	r2,r2,1
   80464:	003ffc06 	br	80458 <__alt_data_end+0xfffb2258>
   80468:	1105c83a 	sub	r2,r2,r4
   8046c:	f800283a 	ret

00080470 <print_repeat>:
   80470:	defffb04 	addi	sp,sp,-20
   80474:	dc800315 	stw	r18,12(sp)
   80478:	dc400215 	stw	r17,8(sp)
   8047c:	dc000115 	stw	r16,4(sp)
   80480:	dfc00415 	stw	ra,16(sp)
   80484:	2025883a 	mov	r18,r4
   80488:	2823883a 	mov	r17,r5
   8048c:	d9800005 	stb	r6,0(sp)
   80490:	3821883a 	mov	r16,r7
   80494:	04000a0e 	bge	zero,r16,804c0 <print_repeat+0x50>
   80498:	88800117 	ldw	r2,4(r17)
   8049c:	01c00044 	movi	r7,1
   804a0:	d80d883a 	mov	r6,sp
   804a4:	880b883a 	mov	r5,r17
   804a8:	9009883a 	mov	r4,r18
   804ac:	103ee83a 	callr	r2
   804b0:	843fffc4 	addi	r16,r16,-1
   804b4:	103ff726 	beq	r2,zero,80494 <__alt_data_end+0xfffb2294>
   804b8:	00bfffc4 	movi	r2,-1
   804bc:	00000106 	br	804c4 <print_repeat+0x54>
   804c0:	0005883a 	mov	r2,zero
   804c4:	dfc00417 	ldw	ra,16(sp)
   804c8:	dc800317 	ldw	r18,12(sp)
   804cc:	dc400217 	ldw	r17,8(sp)
   804d0:	dc000117 	ldw	r16,4(sp)
   804d4:	dec00504 	addi	sp,sp,20
   804d8:	f800283a 	ret

000804dc <___vfprintf_internal_r>:
   804dc:	deffe504 	addi	sp,sp,-108
   804e0:	d8c00804 	addi	r3,sp,32
   804e4:	df001915 	stw	fp,100(sp)
   804e8:	ddc01815 	stw	r23,96(sp)
   804ec:	dd801715 	stw	r22,92(sp)
   804f0:	dd401615 	stw	r21,88(sp)
   804f4:	dd001515 	stw	r20,84(sp)
   804f8:	dcc01415 	stw	r19,80(sp)
   804fc:	dc801315 	stw	r18,76(sp)
   80500:	dc401215 	stw	r17,72(sp)
   80504:	dc001115 	stw	r16,68(sp)
   80508:	dfc01a15 	stw	ra,104(sp)
   8050c:	2027883a 	mov	r19,r4
   80510:	2839883a 	mov	fp,r5
   80514:	382d883a 	mov	r22,r7
   80518:	d9800f15 	stw	r6,60(sp)
   8051c:	0021883a 	mov	r16,zero
   80520:	d8000e15 	stw	zero,56(sp)
   80524:	002f883a 	mov	r23,zero
   80528:	002b883a 	mov	r21,zero
   8052c:	0025883a 	mov	r18,zero
   80530:	0023883a 	mov	r17,zero
   80534:	d8000c15 	stw	zero,48(sp)
   80538:	d8000b15 	stw	zero,44(sp)
   8053c:	0029883a 	mov	r20,zero
   80540:	d8c00915 	stw	r3,36(sp)
   80544:	d8c00f17 	ldw	r3,60(sp)
   80548:	19000003 	ldbu	r4,0(r3)
   8054c:	20803fcc 	andi	r2,r4,255
   80550:	1080201c 	xori	r2,r2,128
   80554:	10bfe004 	addi	r2,r2,-128
   80558:	10011c26 	beq	r2,zero,809cc <___vfprintf_internal_r+0x4f0>
   8055c:	00c00044 	movi	r3,1
   80560:	a0c01426 	beq	r20,r3,805b4 <___vfprintf_internal_r+0xd8>
   80564:	1d000216 	blt	r3,r20,80570 <___vfprintf_internal_r+0x94>
   80568:	a0000626 	beq	r20,zero,80584 <___vfprintf_internal_r+0xa8>
   8056c:	00011306 	br	809bc <___vfprintf_internal_r+0x4e0>
   80570:	01400084 	movi	r5,2
   80574:	a1401d26 	beq	r20,r5,805ec <___vfprintf_internal_r+0x110>
   80578:	014000c4 	movi	r5,3
   8057c:	a1402926 	beq	r20,r5,80624 <___vfprintf_internal_r+0x148>
   80580:	00010e06 	br	809bc <___vfprintf_internal_r+0x4e0>
   80584:	01400944 	movi	r5,37
   80588:	1140fb26 	beq	r2,r5,80978 <___vfprintf_internal_r+0x49c>
   8058c:	e0800117 	ldw	r2,4(fp)
   80590:	d9000005 	stb	r4,0(sp)
   80594:	01c00044 	movi	r7,1
   80598:	d80d883a 	mov	r6,sp
   8059c:	e00b883a 	mov	r5,fp
   805a0:	9809883a 	mov	r4,r19
   805a4:	103ee83a 	callr	r2
   805a8:	1000d61e 	bne	r2,zero,80904 <___vfprintf_internal_r+0x428>
   805ac:	84000044 	addi	r16,r16,1
   805b0:	00010206 	br	809bc <___vfprintf_internal_r+0x4e0>
   805b4:	01400c04 	movi	r5,48
   805b8:	1140f826 	beq	r2,r5,8099c <___vfprintf_internal_r+0x4c0>
   805bc:	01400944 	movi	r5,37
   805c0:	11400a1e 	bne	r2,r5,805ec <___vfprintf_internal_r+0x110>
   805c4:	d8800005 	stb	r2,0(sp)
   805c8:	e0800117 	ldw	r2,4(fp)
   805cc:	a00f883a 	mov	r7,r20
   805d0:	d80d883a 	mov	r6,sp
   805d4:	e00b883a 	mov	r5,fp
   805d8:	9809883a 	mov	r4,r19
   805dc:	103ee83a 	callr	r2
   805e0:	1000c81e 	bne	r2,zero,80904 <___vfprintf_internal_r+0x428>
   805e4:	84000044 	addi	r16,r16,1
   805e8:	0000f306 	br	809b8 <___vfprintf_internal_r+0x4dc>
   805ec:	217ff404 	addi	r5,r4,-48
   805f0:	29403fcc 	andi	r5,r5,255
   805f4:	00c00244 	movi	r3,9
   805f8:	19400736 	bltu	r3,r5,80618 <___vfprintf_internal_r+0x13c>
   805fc:	00bfffc4 	movi	r2,-1
   80600:	88800226 	beq	r17,r2,8060c <___vfprintf_internal_r+0x130>
   80604:	8c4002a4 	muli	r17,r17,10
   80608:	00000106 	br	80610 <___vfprintf_internal_r+0x134>
   8060c:	0023883a 	mov	r17,zero
   80610:	2c63883a 	add	r17,r5,r17
   80614:	0000e206 	br	809a0 <___vfprintf_internal_r+0x4c4>
   80618:	01400b84 	movi	r5,46
   8061c:	1140e426 	beq	r2,r5,809b0 <___vfprintf_internal_r+0x4d4>
   80620:	05000084 	movi	r20,2
   80624:	213ff404 	addi	r4,r4,-48
   80628:	21003fcc 	andi	r4,r4,255
   8062c:	00c00244 	movi	r3,9
   80630:	19000736 	bltu	r3,r4,80650 <___vfprintf_internal_r+0x174>
   80634:	00bfffc4 	movi	r2,-1
   80638:	90800226 	beq	r18,r2,80644 <___vfprintf_internal_r+0x168>
   8063c:	948002a4 	muli	r18,r18,10
   80640:	00000106 	br	80648 <___vfprintf_internal_r+0x16c>
   80644:	0025883a 	mov	r18,zero
   80648:	24a5883a 	add	r18,r4,r18
   8064c:	0000db06 	br	809bc <___vfprintf_internal_r+0x4e0>
   80650:	00c01b04 	movi	r3,108
   80654:	10c0d426 	beq	r2,r3,809a8 <___vfprintf_internal_r+0x4cc>
   80658:	013fffc4 	movi	r4,-1
   8065c:	91000226 	beq	r18,r4,80668 <___vfprintf_internal_r+0x18c>
   80660:	d8000b15 	stw	zero,44(sp)
   80664:	00000106 	br	8066c <___vfprintf_internal_r+0x190>
   80668:	04800044 	movi	r18,1
   8066c:	01001a44 	movi	r4,105
   80670:	11001626 	beq	r2,r4,806cc <___vfprintf_internal_r+0x1f0>
   80674:	20800916 	blt	r4,r2,8069c <___vfprintf_internal_r+0x1c0>
   80678:	010018c4 	movi	r4,99
   8067c:	11008a26 	beq	r2,r4,808a8 <___vfprintf_internal_r+0x3cc>
   80680:	01001904 	movi	r4,100
   80684:	11001126 	beq	r2,r4,806cc <___vfprintf_internal_r+0x1f0>
   80688:	01001604 	movi	r4,88
   8068c:	1100ca1e 	bne	r2,r4,809b8 <___vfprintf_internal_r+0x4dc>
   80690:	00c00044 	movi	r3,1
   80694:	d8c00e15 	stw	r3,56(sp)
   80698:	00001406 	br	806ec <___vfprintf_internal_r+0x210>
   8069c:	01001cc4 	movi	r4,115
   806a0:	11009a26 	beq	r2,r4,8090c <___vfprintf_internal_r+0x430>
   806a4:	20800416 	blt	r4,r2,806b8 <___vfprintf_internal_r+0x1dc>
   806a8:	01001bc4 	movi	r4,111
   806ac:	1100c21e 	bne	r2,r4,809b8 <___vfprintf_internal_r+0x4dc>
   806b0:	05400204 	movi	r21,8
   806b4:	00000e06 	br	806f0 <___vfprintf_internal_r+0x214>
   806b8:	01001d44 	movi	r4,117
   806bc:	11000c26 	beq	r2,r4,806f0 <___vfprintf_internal_r+0x214>
   806c0:	01001e04 	movi	r4,120
   806c4:	11000926 	beq	r2,r4,806ec <___vfprintf_internal_r+0x210>
   806c8:	0000bb06 	br	809b8 <___vfprintf_internal_r+0x4dc>
   806cc:	b5000104 	addi	r20,r22,4
   806d0:	b8000726 	beq	r23,zero,806f0 <___vfprintf_internal_r+0x214>
   806d4:	dd000d15 	stw	r20,52(sp)
   806d8:	b5800017 	ldw	r22,0(r22)
   806dc:	b000080e 	bge	r22,zero,80700 <___vfprintf_internal_r+0x224>
   806e0:	05adc83a 	sub	r22,zero,r22
   806e4:	02800044 	movi	r10,1
   806e8:	00000606 	br	80704 <___vfprintf_internal_r+0x228>
   806ec:	05400404 	movi	r21,16
   806f0:	b0c00104 	addi	r3,r22,4
   806f4:	d8c00d15 	stw	r3,52(sp)
   806f8:	b5800017 	ldw	r22,0(r22)
   806fc:	002f883a 	mov	r23,zero
   80700:	0015883a 	mov	r10,zero
   80704:	d829883a 	mov	r20,sp
   80708:	b0001426 	beq	r22,zero,8075c <___vfprintf_internal_r+0x280>
   8070c:	b009883a 	mov	r4,r22
   80710:	a80b883a 	mov	r5,r21
   80714:	da801015 	stw	r10,64(sp)
   80718:	0080c240 	call	80c24 <__udivsi3>
   8071c:	1549383a 	mul	r4,r2,r21
   80720:	00c00244 	movi	r3,9
   80724:	da801017 	ldw	r10,64(sp)
   80728:	b12dc83a 	sub	r22,r22,r4
   8072c:	1d800216 	blt	r3,r22,80738 <___vfprintf_internal_r+0x25c>
   80730:	b5800c04 	addi	r22,r22,48
   80734:	00000506 	br	8074c <___vfprintf_internal_r+0x270>
   80738:	d8c00e17 	ldw	r3,56(sp)
   8073c:	18000226 	beq	r3,zero,80748 <___vfprintf_internal_r+0x26c>
   80740:	b5800dc4 	addi	r22,r22,55
   80744:	00000106 	br	8074c <___vfprintf_internal_r+0x270>
   80748:	b58015c4 	addi	r22,r22,87
   8074c:	a5800005 	stb	r22,0(r20)
   80750:	a5000044 	addi	r20,r20,1
   80754:	102d883a 	mov	r22,r2
   80758:	003feb06 	br	80708 <__alt_data_end+0xfffb2508>
   8075c:	a6c7c83a 	sub	r3,r20,sp
   80760:	d8c00a15 	stw	r3,40(sp)
   80764:	90c5c83a 	sub	r2,r18,r3
   80768:	00800a0e 	bge	zero,r2,80794 <___vfprintf_internal_r+0x2b8>
   8076c:	a085883a 	add	r2,r20,r2
   80770:	01400c04 	movi	r5,48
   80774:	d8c00917 	ldw	r3,36(sp)
   80778:	a009883a 	mov	r4,r20
   8077c:	a0c0032e 	bgeu	r20,r3,8078c <___vfprintf_internal_r+0x2b0>
   80780:	a5000044 	addi	r20,r20,1
   80784:	21400005 	stb	r5,0(r4)
   80788:	a0bffa1e 	bne	r20,r2,80774 <__alt_data_end+0xfffb2574>
   8078c:	a6c7c83a 	sub	r3,r20,sp
   80790:	d8c00a15 	stw	r3,40(sp)
   80794:	d8c00a17 	ldw	r3,40(sp)
   80798:	50d3883a 	add	r9,r10,r3
   8079c:	d8c00b17 	ldw	r3,44(sp)
   807a0:	8a6dc83a 	sub	r22,r17,r9
   807a4:	18001726 	beq	r3,zero,80804 <___vfprintf_internal_r+0x328>
   807a8:	50000a26 	beq	r10,zero,807d4 <___vfprintf_internal_r+0x2f8>
   807ac:	00800b44 	movi	r2,45
   807b0:	d8800805 	stb	r2,32(sp)
   807b4:	e0800117 	ldw	r2,4(fp)
   807b8:	01c00044 	movi	r7,1
   807bc:	d9800804 	addi	r6,sp,32
   807c0:	e00b883a 	mov	r5,fp
   807c4:	9809883a 	mov	r4,r19
   807c8:	103ee83a 	callr	r2
   807cc:	10004d1e 	bne	r2,zero,80904 <___vfprintf_internal_r+0x428>
   807d0:	84000044 	addi	r16,r16,1
   807d4:	0580070e 	bge	zero,r22,807f4 <___vfprintf_internal_r+0x318>
   807d8:	b00f883a 	mov	r7,r22
   807dc:	01800c04 	movi	r6,48
   807e0:	e00b883a 	mov	r5,fp
   807e4:	9809883a 	mov	r4,r19
   807e8:	00804700 	call	80470 <print_repeat>
   807ec:	1000451e 	bne	r2,zero,80904 <___vfprintf_internal_r+0x428>
   807f0:	85a1883a 	add	r16,r16,r22
   807f4:	d8c00a17 	ldw	r3,40(sp)
   807f8:	a013883a 	mov	r9,r20
   807fc:	1d2dc83a 	sub	r22,r3,r20
   80800:	00002206 	br	8088c <___vfprintf_internal_r+0x3b0>
   80804:	0580090e 	bge	zero,r22,8082c <___vfprintf_internal_r+0x350>
   80808:	b00f883a 	mov	r7,r22
   8080c:	01800804 	movi	r6,32
   80810:	e00b883a 	mov	r5,fp
   80814:	9809883a 	mov	r4,r19
   80818:	da801015 	stw	r10,64(sp)
   8081c:	00804700 	call	80470 <print_repeat>
   80820:	da801017 	ldw	r10,64(sp)
   80824:	1000371e 	bne	r2,zero,80904 <___vfprintf_internal_r+0x428>
   80828:	85a1883a 	add	r16,r16,r22
   8082c:	503ff126 	beq	r10,zero,807f4 <__alt_data_end+0xfffb25f4>
   80830:	00800b44 	movi	r2,45
   80834:	d8800805 	stb	r2,32(sp)
   80838:	e0800117 	ldw	r2,4(fp)
   8083c:	01c00044 	movi	r7,1
   80840:	d9800804 	addi	r6,sp,32
   80844:	e00b883a 	mov	r5,fp
   80848:	9809883a 	mov	r4,r19
   8084c:	103ee83a 	callr	r2
   80850:	10002c1e 	bne	r2,zero,80904 <___vfprintf_internal_r+0x428>
   80854:	84000044 	addi	r16,r16,1
   80858:	003fe606 	br	807f4 <__alt_data_end+0xfffb25f4>
   8085c:	4a7fffc4 	addi	r9,r9,-1
   80860:	48800003 	ldbu	r2,0(r9)
   80864:	01c00044 	movi	r7,1
   80868:	d9800804 	addi	r6,sp,32
   8086c:	d8800805 	stb	r2,32(sp)
   80870:	e0800117 	ldw	r2,4(fp)
   80874:	e00b883a 	mov	r5,fp
   80878:	da401015 	stw	r9,64(sp)
   8087c:	9809883a 	mov	r4,r19
   80880:	103ee83a 	callr	r2
   80884:	da401017 	ldw	r9,64(sp)
   80888:	10001e1e 	bne	r2,zero,80904 <___vfprintf_internal_r+0x428>
   8088c:	8245c83a 	sub	r2,r16,r9
   80890:	4d89883a 	add	r4,r9,r22
   80894:	a085883a 	add	r2,r20,r2
   80898:	013ff016 	blt	zero,r4,8085c <__alt_data_end+0xfffb265c>
   8089c:	1021883a 	mov	r16,r2
   808a0:	dd800d17 	ldw	r22,52(sp)
   808a4:	00004406 	br	809b8 <___vfprintf_internal_r+0x4dc>
   808a8:	00800044 	movi	r2,1
   808ac:	1440080e 	bge	r2,r17,808d0 <___vfprintf_internal_r+0x3f4>
   808b0:	8d3fffc4 	addi	r20,r17,-1
   808b4:	a00f883a 	mov	r7,r20
   808b8:	01800804 	movi	r6,32
   808bc:	e00b883a 	mov	r5,fp
   808c0:	9809883a 	mov	r4,r19
   808c4:	00804700 	call	80470 <print_repeat>
   808c8:	10000e1e 	bne	r2,zero,80904 <___vfprintf_internal_r+0x428>
   808cc:	8521883a 	add	r16,r16,r20
   808d0:	b0800017 	ldw	r2,0(r22)
   808d4:	01c00044 	movi	r7,1
   808d8:	d80d883a 	mov	r6,sp
   808dc:	d8800005 	stb	r2,0(sp)
   808e0:	e0800117 	ldw	r2,4(fp)
   808e4:	e00b883a 	mov	r5,fp
   808e8:	9809883a 	mov	r4,r19
   808ec:	b5000104 	addi	r20,r22,4
   808f0:	103ee83a 	callr	r2
   808f4:	1000031e 	bne	r2,zero,80904 <___vfprintf_internal_r+0x428>
   808f8:	84000044 	addi	r16,r16,1
   808fc:	a02d883a 	mov	r22,r20
   80900:	00002d06 	br	809b8 <___vfprintf_internal_r+0x4dc>
   80904:	00bfffc4 	movi	r2,-1
   80908:	00003106 	br	809d0 <___vfprintf_internal_r+0x4f4>
   8090c:	b5000017 	ldw	r20,0(r22)
   80910:	b0c00104 	addi	r3,r22,4
   80914:	d8c00a15 	stw	r3,40(sp)
   80918:	a009883a 	mov	r4,r20
   8091c:	00804540 	call	80454 <strlen>
   80920:	8893c83a 	sub	r9,r17,r2
   80924:	102d883a 	mov	r22,r2
   80928:	0240090e 	bge	zero,r9,80950 <___vfprintf_internal_r+0x474>
   8092c:	480f883a 	mov	r7,r9
   80930:	01800804 	movi	r6,32
   80934:	e00b883a 	mov	r5,fp
   80938:	9809883a 	mov	r4,r19
   8093c:	da401015 	stw	r9,64(sp)
   80940:	00804700 	call	80470 <print_repeat>
   80944:	da401017 	ldw	r9,64(sp)
   80948:	103fee1e 	bne	r2,zero,80904 <__alt_data_end+0xfffb2704>
   8094c:	8261883a 	add	r16,r16,r9
   80950:	e0800117 	ldw	r2,4(fp)
   80954:	b00f883a 	mov	r7,r22
   80958:	a00d883a 	mov	r6,r20
   8095c:	e00b883a 	mov	r5,fp
   80960:	9809883a 	mov	r4,r19
   80964:	103ee83a 	callr	r2
   80968:	103fe61e 	bne	r2,zero,80904 <__alt_data_end+0xfffb2704>
   8096c:	85a1883a 	add	r16,r16,r22
   80970:	dd800a17 	ldw	r22,40(sp)
   80974:	00001006 	br	809b8 <___vfprintf_internal_r+0x4dc>
   80978:	05c00044 	movi	r23,1
   8097c:	04bfffc4 	movi	r18,-1
   80980:	d8000e15 	stw	zero,56(sp)
   80984:	05400284 	movi	r21,10
   80988:	9023883a 	mov	r17,r18
   8098c:	d8000c15 	stw	zero,48(sp)
   80990:	d8000b15 	stw	zero,44(sp)
   80994:	b829883a 	mov	r20,r23
   80998:	00000806 	br	809bc <___vfprintf_internal_r+0x4e0>
   8099c:	dd000b15 	stw	r20,44(sp)
   809a0:	05000084 	movi	r20,2
   809a4:	00000506 	br	809bc <___vfprintf_internal_r+0x4e0>
   809a8:	00c00044 	movi	r3,1
   809ac:	d8c00c15 	stw	r3,48(sp)
   809b0:	050000c4 	movi	r20,3
   809b4:	00000106 	br	809bc <___vfprintf_internal_r+0x4e0>
   809b8:	0029883a 	mov	r20,zero
   809bc:	d8c00f17 	ldw	r3,60(sp)
   809c0:	18c00044 	addi	r3,r3,1
   809c4:	d8c00f15 	stw	r3,60(sp)
   809c8:	003ede06 	br	80544 <__alt_data_end+0xfffb2344>
   809cc:	8005883a 	mov	r2,r16
   809d0:	dfc01a17 	ldw	ra,104(sp)
   809d4:	df001917 	ldw	fp,100(sp)
   809d8:	ddc01817 	ldw	r23,96(sp)
   809dc:	dd801717 	ldw	r22,92(sp)
   809e0:	dd401617 	ldw	r21,88(sp)
   809e4:	dd001517 	ldw	r20,84(sp)
   809e8:	dcc01417 	ldw	r19,80(sp)
   809ec:	dc801317 	ldw	r18,76(sp)
   809f0:	dc401217 	ldw	r17,72(sp)
   809f4:	dc001117 	ldw	r16,68(sp)
   809f8:	dec01b04 	addi	sp,sp,108
   809fc:	f800283a 	ret

00080a00 <__vfprintf_internal>:
   80a00:	00800234 	movhi	r2,8
   80a04:	10944904 	addi	r2,r2,20772
   80a08:	300f883a 	mov	r7,r6
   80a0c:	280d883a 	mov	r6,r5
   80a10:	200b883a 	mov	r5,r4
   80a14:	11000017 	ldw	r4,0(r2)
   80a18:	00804dc1 	jmpi	804dc <___vfprintf_internal_r>

00080a1c <__sfvwrite_small_dev>:
   80a1c:	2880000b 	ldhu	r2,0(r5)
   80a20:	1080020c 	andi	r2,r2,8
   80a24:	10002126 	beq	r2,zero,80aac <__sfvwrite_small_dev+0x90>
   80a28:	2880008f 	ldh	r2,2(r5)
   80a2c:	defffa04 	addi	sp,sp,-24
   80a30:	dc000015 	stw	r16,0(sp)
   80a34:	dfc00515 	stw	ra,20(sp)
   80a38:	dd000415 	stw	r20,16(sp)
   80a3c:	dcc00315 	stw	r19,12(sp)
   80a40:	dc800215 	stw	r18,8(sp)
   80a44:	dc400115 	stw	r17,4(sp)
   80a48:	2821883a 	mov	r16,r5
   80a4c:	10001216 	blt	r2,zero,80a98 <__sfvwrite_small_dev+0x7c>
   80a50:	2027883a 	mov	r19,r4
   80a54:	3025883a 	mov	r18,r6
   80a58:	3823883a 	mov	r17,r7
   80a5c:	05010004 	movi	r20,1024
   80a60:	04400b0e 	bge	zero,r17,80a90 <__sfvwrite_small_dev+0x74>
   80a64:	880f883a 	mov	r7,r17
   80a68:	a440010e 	bge	r20,r17,80a70 <__sfvwrite_small_dev+0x54>
   80a6c:	01c10004 	movi	r7,1024
   80a70:	8140008f 	ldh	r5,2(r16)
   80a74:	900d883a 	mov	r6,r18
   80a78:	9809883a 	mov	r4,r19
   80a7c:	0080ad40 	call	80ad4 <_write_r>
   80a80:	0080050e 	bge	zero,r2,80a98 <__sfvwrite_small_dev+0x7c>
   80a84:	88a3c83a 	sub	r17,r17,r2
   80a88:	90a5883a 	add	r18,r18,r2
   80a8c:	003ff406 	br	80a60 <__alt_data_end+0xfffb2860>
   80a90:	0005883a 	mov	r2,zero
   80a94:	00000706 	br	80ab4 <__sfvwrite_small_dev+0x98>
   80a98:	8080000b 	ldhu	r2,0(r16)
   80a9c:	10801014 	ori	r2,r2,64
   80aa0:	8080000d 	sth	r2,0(r16)
   80aa4:	00bfffc4 	movi	r2,-1
   80aa8:	00000206 	br	80ab4 <__sfvwrite_small_dev+0x98>
   80aac:	00bfffc4 	movi	r2,-1
   80ab0:	f800283a 	ret
   80ab4:	dfc00517 	ldw	ra,20(sp)
   80ab8:	dd000417 	ldw	r20,16(sp)
   80abc:	dcc00317 	ldw	r19,12(sp)
   80ac0:	dc800217 	ldw	r18,8(sp)
   80ac4:	dc400117 	ldw	r17,4(sp)
   80ac8:	dc000017 	ldw	r16,0(sp)
   80acc:	dec00604 	addi	sp,sp,24
   80ad0:	f800283a 	ret

00080ad4 <_write_r>:
   80ad4:	defffd04 	addi	sp,sp,-12
   80ad8:	dc000015 	stw	r16,0(sp)
   80adc:	04000234 	movhi	r16,8
   80ae0:	dc400115 	stw	r17,4(sp)
   80ae4:	84194504 	addi	r16,r16,25876
   80ae8:	2023883a 	mov	r17,r4
   80aec:	2809883a 	mov	r4,r5
   80af0:	300b883a 	mov	r5,r6
   80af4:	380d883a 	mov	r6,r7
   80af8:	dfc00215 	stw	ra,8(sp)
   80afc:	80000015 	stw	zero,0(r16)
   80b00:	0080e880 	call	80e88 <write>
   80b04:	00ffffc4 	movi	r3,-1
   80b08:	10c0031e 	bne	r2,r3,80b18 <_write_r+0x44>
   80b0c:	80c00017 	ldw	r3,0(r16)
   80b10:	18000126 	beq	r3,zero,80b18 <_write_r+0x44>
   80b14:	88c00015 	stw	r3,0(r17)
   80b18:	dfc00217 	ldw	ra,8(sp)
   80b1c:	dc400117 	ldw	r17,4(sp)
   80b20:	dc000017 	ldw	r16,0(sp)
   80b24:	dec00304 	addi	sp,sp,12
   80b28:	f800283a 	ret

00080b2c <__divsi3>:
   80b2c:	20001b16 	blt	r4,zero,80b9c <__divsi3+0x70>
   80b30:	000f883a 	mov	r7,zero
   80b34:	28001616 	blt	r5,zero,80b90 <__divsi3+0x64>
   80b38:	200d883a 	mov	r6,r4
   80b3c:	29001a2e 	bgeu	r5,r4,80ba8 <__divsi3+0x7c>
   80b40:	00800804 	movi	r2,32
   80b44:	00c00044 	movi	r3,1
   80b48:	00000106 	br	80b50 <__divsi3+0x24>
   80b4c:	10000d26 	beq	r2,zero,80b84 <__divsi3+0x58>
   80b50:	294b883a 	add	r5,r5,r5
   80b54:	10bfffc4 	addi	r2,r2,-1
   80b58:	18c7883a 	add	r3,r3,r3
   80b5c:	293ffb36 	bltu	r5,r4,80b4c <__alt_data_end+0xfffb294c>
   80b60:	0005883a 	mov	r2,zero
   80b64:	18000726 	beq	r3,zero,80b84 <__divsi3+0x58>
   80b68:	0005883a 	mov	r2,zero
   80b6c:	31400236 	bltu	r6,r5,80b78 <__divsi3+0x4c>
   80b70:	314dc83a 	sub	r6,r6,r5
   80b74:	10c4b03a 	or	r2,r2,r3
   80b78:	1806d07a 	srli	r3,r3,1
   80b7c:	280ad07a 	srli	r5,r5,1
   80b80:	183ffa1e 	bne	r3,zero,80b6c <__alt_data_end+0xfffb296c>
   80b84:	38000126 	beq	r7,zero,80b8c <__divsi3+0x60>
   80b88:	0085c83a 	sub	r2,zero,r2
   80b8c:	f800283a 	ret
   80b90:	014bc83a 	sub	r5,zero,r5
   80b94:	39c0005c 	xori	r7,r7,1
   80b98:	003fe706 	br	80b38 <__alt_data_end+0xfffb2938>
   80b9c:	0109c83a 	sub	r4,zero,r4
   80ba0:	01c00044 	movi	r7,1
   80ba4:	003fe306 	br	80b34 <__alt_data_end+0xfffb2934>
   80ba8:	00c00044 	movi	r3,1
   80bac:	003fee06 	br	80b68 <__alt_data_end+0xfffb2968>

00080bb0 <__modsi3>:
   80bb0:	20001716 	blt	r4,zero,80c10 <__modsi3+0x60>
   80bb4:	000f883a 	mov	r7,zero
   80bb8:	2005883a 	mov	r2,r4
   80bbc:	28001216 	blt	r5,zero,80c08 <__modsi3+0x58>
   80bc0:	2900162e 	bgeu	r5,r4,80c1c <__modsi3+0x6c>
   80bc4:	01800804 	movi	r6,32
   80bc8:	00c00044 	movi	r3,1
   80bcc:	00000106 	br	80bd4 <__modsi3+0x24>
   80bd0:	30000a26 	beq	r6,zero,80bfc <__modsi3+0x4c>
   80bd4:	294b883a 	add	r5,r5,r5
   80bd8:	31bfffc4 	addi	r6,r6,-1
   80bdc:	18c7883a 	add	r3,r3,r3
   80be0:	293ffb36 	bltu	r5,r4,80bd0 <__alt_data_end+0xfffb29d0>
   80be4:	18000526 	beq	r3,zero,80bfc <__modsi3+0x4c>
   80be8:	1806d07a 	srli	r3,r3,1
   80bec:	11400136 	bltu	r2,r5,80bf4 <__modsi3+0x44>
   80bf0:	1145c83a 	sub	r2,r2,r5
   80bf4:	280ad07a 	srli	r5,r5,1
   80bf8:	183ffb1e 	bne	r3,zero,80be8 <__alt_data_end+0xfffb29e8>
   80bfc:	38000126 	beq	r7,zero,80c04 <__modsi3+0x54>
   80c00:	0085c83a 	sub	r2,zero,r2
   80c04:	f800283a 	ret
   80c08:	014bc83a 	sub	r5,zero,r5
   80c0c:	003fec06 	br	80bc0 <__alt_data_end+0xfffb29c0>
   80c10:	0109c83a 	sub	r4,zero,r4
   80c14:	01c00044 	movi	r7,1
   80c18:	003fe706 	br	80bb8 <__alt_data_end+0xfffb29b8>
   80c1c:	00c00044 	movi	r3,1
   80c20:	003ff106 	br	80be8 <__alt_data_end+0xfffb29e8>

00080c24 <__udivsi3>:
   80c24:	200d883a 	mov	r6,r4
   80c28:	2900152e 	bgeu	r5,r4,80c80 <__udivsi3+0x5c>
   80c2c:	28001416 	blt	r5,zero,80c80 <__udivsi3+0x5c>
   80c30:	00800804 	movi	r2,32
   80c34:	00c00044 	movi	r3,1
   80c38:	00000206 	br	80c44 <__udivsi3+0x20>
   80c3c:	10000e26 	beq	r2,zero,80c78 <__udivsi3+0x54>
   80c40:	28000516 	blt	r5,zero,80c58 <__udivsi3+0x34>
   80c44:	294b883a 	add	r5,r5,r5
   80c48:	10bfffc4 	addi	r2,r2,-1
   80c4c:	18c7883a 	add	r3,r3,r3
   80c50:	293ffa36 	bltu	r5,r4,80c3c <__alt_data_end+0xfffb2a3c>
   80c54:	18000826 	beq	r3,zero,80c78 <__udivsi3+0x54>
   80c58:	0005883a 	mov	r2,zero
   80c5c:	31400236 	bltu	r6,r5,80c68 <__udivsi3+0x44>
   80c60:	314dc83a 	sub	r6,r6,r5
   80c64:	10c4b03a 	or	r2,r2,r3
   80c68:	1806d07a 	srli	r3,r3,1
   80c6c:	280ad07a 	srli	r5,r5,1
   80c70:	183ffa1e 	bne	r3,zero,80c5c <__alt_data_end+0xfffb2a5c>
   80c74:	f800283a 	ret
   80c78:	0005883a 	mov	r2,zero
   80c7c:	f800283a 	ret
   80c80:	00c00044 	movi	r3,1
   80c84:	003ff406 	br	80c58 <__alt_data_end+0xfffb2a58>

00080c88 <__umodsi3>:
   80c88:	2005883a 	mov	r2,r4
   80c8c:	2900122e 	bgeu	r5,r4,80cd8 <__umodsi3+0x50>
   80c90:	28001116 	blt	r5,zero,80cd8 <__umodsi3+0x50>
   80c94:	01800804 	movi	r6,32
   80c98:	00c00044 	movi	r3,1
   80c9c:	00000206 	br	80ca8 <__umodsi3+0x20>
   80ca0:	30000c26 	beq	r6,zero,80cd4 <__umodsi3+0x4c>
   80ca4:	28000516 	blt	r5,zero,80cbc <__umodsi3+0x34>
   80ca8:	294b883a 	add	r5,r5,r5
   80cac:	31bfffc4 	addi	r6,r6,-1
   80cb0:	18c7883a 	add	r3,r3,r3
   80cb4:	293ffa36 	bltu	r5,r4,80ca0 <__alt_data_end+0xfffb2aa0>
   80cb8:	18000626 	beq	r3,zero,80cd4 <__umodsi3+0x4c>
   80cbc:	1806d07a 	srli	r3,r3,1
   80cc0:	11400136 	bltu	r2,r5,80cc8 <__umodsi3+0x40>
   80cc4:	1145c83a 	sub	r2,r2,r5
   80cc8:	280ad07a 	srli	r5,r5,1
   80ccc:	183ffb1e 	bne	r3,zero,80cbc <__alt_data_end+0xfffb2abc>
   80cd0:	f800283a 	ret
   80cd4:	f800283a 	ret
   80cd8:	00c00044 	movi	r3,1
   80cdc:	003ff706 	br	80cbc <__alt_data_end+0xfffb2abc>

00080ce0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   80ce0:	defffc04 	addi	sp,sp,-16
   80ce4:	df000315 	stw	fp,12(sp)
   80ce8:	df000304 	addi	fp,sp,12
   80cec:	e13ffd15 	stw	r4,-12(fp)
   80cf0:	e17ffe15 	stw	r5,-8(fp)
   80cf4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   80cf8:	e0fffe17 	ldw	r3,-8(fp)
   80cfc:	e0bffd17 	ldw	r2,-12(fp)
   80d00:	18800c26 	beq	r3,r2,80d34 <alt_load_section+0x54>
  {
    while( to != end )
   80d04:	00000806 	br	80d28 <alt_load_section+0x48>
    {
      *to++ = *from++;
   80d08:	e0bffe17 	ldw	r2,-8(fp)
   80d0c:	10c00104 	addi	r3,r2,4
   80d10:	e0fffe15 	stw	r3,-8(fp)
   80d14:	e0fffd17 	ldw	r3,-12(fp)
   80d18:	19000104 	addi	r4,r3,4
   80d1c:	e13ffd15 	stw	r4,-12(fp)
   80d20:	18c00017 	ldw	r3,0(r3)
   80d24:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80d28:	e0fffe17 	ldw	r3,-8(fp)
   80d2c:	e0bfff17 	ldw	r2,-4(fp)
   80d30:	18bff51e 	bne	r3,r2,80d08 <__alt_data_end+0xfffb2b08>
    {
      *to++ = *from++;
    }
  }
}
   80d34:	0001883a 	nop
   80d38:	e037883a 	mov	sp,fp
   80d3c:	df000017 	ldw	fp,0(sp)
   80d40:	dec00104 	addi	sp,sp,4
   80d44:	f800283a 	ret

00080d48 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80d48:	defffe04 	addi	sp,sp,-8
   80d4c:	dfc00115 	stw	ra,4(sp)
   80d50:	df000015 	stw	fp,0(sp)
   80d54:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   80d58:	01800234 	movhi	r6,8
   80d5c:	31945304 	addi	r6,r6,20812
   80d60:	01400234 	movhi	r5,8
   80d64:	294f6104 	addi	r5,r5,15748
   80d68:	01000234 	movhi	r4,8
   80d6c:	21145304 	addi	r4,r4,20812
   80d70:	0080ce00 	call	80ce0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   80d74:	01800234 	movhi	r6,8
   80d78:	31809204 	addi	r6,r6,584
   80d7c:	01400234 	movhi	r5,8
   80d80:	29400804 	addi	r5,r5,32
   80d84:	01000234 	movhi	r4,8
   80d88:	21000804 	addi	r4,r4,32
   80d8c:	0080ce00 	call	80ce0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   80d90:	01800234 	movhi	r6,8
   80d94:	318f6104 	addi	r6,r6,15748
   80d98:	01400234 	movhi	r5,8
   80d9c:	294f2904 	addi	r5,r5,15524
   80da0:	01000234 	movhi	r4,8
   80da4:	210f2904 	addi	r4,r4,15524
   80da8:	0080ce00 	call	80ce0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   80dac:	0082db80 	call	82db8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   80db0:	0082fb00 	call	82fb0 <alt_icache_flush_all>
}
   80db4:	0001883a 	nop
   80db8:	e037883a 	mov	sp,fp
   80dbc:	dfc00117 	ldw	ra,4(sp)
   80dc0:	df000017 	ldw	fp,0(sp)
   80dc4:	dec00204 	addi	sp,sp,8
   80dc8:	f800283a 	ret

00080dcc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80dcc:	defffd04 	addi	sp,sp,-12
   80dd0:	dfc00215 	stw	ra,8(sp)
   80dd4:	df000115 	stw	fp,4(sp)
   80dd8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80ddc:	0009883a 	mov	r4,zero
   80de0:	0080fb80 	call	80fb8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   80de4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   80de8:	0080ff00 	call	80ff0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   80dec:	01800234 	movhi	r6,8
   80df0:	318f4504 	addi	r6,r6,15636
   80df4:	01400234 	movhi	r5,8
   80df8:	294f4504 	addi	r5,r5,15636
   80dfc:	01000234 	movhi	r4,8
   80e00:	210f4504 	addi	r4,r4,15636
   80e04:	00830a80 	call	830a8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   80e08:	d0a4fe17 	ldw	r2,-27656(gp)
   80e0c:	d0e4ff17 	ldw	r3,-27652(gp)
   80e10:	d1250017 	ldw	r4,-27648(gp)
   80e14:	200d883a 	mov	r6,r4
   80e18:	180b883a 	mov	r5,r3
   80e1c:	1009883a 	mov	r4,r2
   80e20:	00802940 	call	80294 <main>
   80e24:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   80e28:	01000044 	movi	r4,1
   80e2c:	0082ce80 	call	82ce8 <close>
  exit (result);
   80e30:	e13fff17 	ldw	r4,-4(fp)
   80e34:	0083a680 	call	83a68 <exit>

00080e38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   80e38:	defffe04 	addi	sp,sp,-8
   80e3c:	dfc00115 	stw	ra,4(sp)
   80e40:	df000015 	stw	fp,0(sp)
   80e44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   80e48:	00800234 	movhi	r2,8
   80e4c:	10944f04 	addi	r2,r2,20796
   80e50:	10800017 	ldw	r2,0(r2)
   80e54:	10000526 	beq	r2,zero,80e6c <alt_get_errno+0x34>
   80e58:	00800234 	movhi	r2,8
   80e5c:	10944f04 	addi	r2,r2,20796
   80e60:	10800017 	ldw	r2,0(r2)
   80e64:	103ee83a 	callr	r2
   80e68:	00000206 	br	80e74 <alt_get_errno+0x3c>
   80e6c:	00800234 	movhi	r2,8
   80e70:	10994504 	addi	r2,r2,25876
}
   80e74:	e037883a 	mov	sp,fp
   80e78:	dfc00117 	ldw	ra,4(sp)
   80e7c:	df000017 	ldw	fp,0(sp)
   80e80:	dec00204 	addi	sp,sp,8
   80e84:	f800283a 	ret

00080e88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   80e88:	defff904 	addi	sp,sp,-28
   80e8c:	dfc00615 	stw	ra,24(sp)
   80e90:	df000515 	stw	fp,20(sp)
   80e94:	df000504 	addi	fp,sp,20
   80e98:	e13ffd15 	stw	r4,-12(fp)
   80e9c:	e17ffe15 	stw	r5,-8(fp)
   80ea0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   80ea4:	e0bffd17 	ldw	r2,-12(fp)
   80ea8:	10000616 	blt	r2,zero,80ec4 <write+0x3c>
   80eac:	e0bffd17 	ldw	r2,-12(fp)
   80eb0:	10c00324 	muli	r3,r2,12
   80eb4:	00800234 	movhi	r2,8
   80eb8:	1093e804 	addi	r2,r2,20384
   80ebc:	1885883a 	add	r2,r3,r2
   80ec0:	00000106 	br	80ec8 <write+0x40>
   80ec4:	0005883a 	mov	r2,zero
   80ec8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   80ecc:	e0bffb17 	ldw	r2,-20(fp)
   80ed0:	10002126 	beq	r2,zero,80f58 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   80ed4:	e0bffb17 	ldw	r2,-20(fp)
   80ed8:	10800217 	ldw	r2,8(r2)
   80edc:	108000cc 	andi	r2,r2,3
   80ee0:	10001826 	beq	r2,zero,80f44 <write+0xbc>
   80ee4:	e0bffb17 	ldw	r2,-20(fp)
   80ee8:	10800017 	ldw	r2,0(r2)
   80eec:	10800617 	ldw	r2,24(r2)
   80ef0:	10001426 	beq	r2,zero,80f44 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   80ef4:	e0bffb17 	ldw	r2,-20(fp)
   80ef8:	10800017 	ldw	r2,0(r2)
   80efc:	10800617 	ldw	r2,24(r2)
   80f00:	e0ffff17 	ldw	r3,-4(fp)
   80f04:	180d883a 	mov	r6,r3
   80f08:	e17ffe17 	ldw	r5,-8(fp)
   80f0c:	e13ffb17 	ldw	r4,-20(fp)
   80f10:	103ee83a 	callr	r2
   80f14:	e0bffc15 	stw	r2,-16(fp)
   80f18:	e0bffc17 	ldw	r2,-16(fp)
   80f1c:	1000070e 	bge	r2,zero,80f3c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   80f20:	0080e380 	call	80e38 <alt_get_errno>
   80f24:	1007883a 	mov	r3,r2
   80f28:	e0bffc17 	ldw	r2,-16(fp)
   80f2c:	0085c83a 	sub	r2,zero,r2
   80f30:	18800015 	stw	r2,0(r3)
        return -1;
   80f34:	00bfffc4 	movi	r2,-1
   80f38:	00000c06 	br	80f6c <write+0xe4>
      }
      return rval;
   80f3c:	e0bffc17 	ldw	r2,-16(fp)
   80f40:	00000a06 	br	80f6c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   80f44:	0080e380 	call	80e38 <alt_get_errno>
   80f48:	1007883a 	mov	r3,r2
   80f4c:	00800344 	movi	r2,13
   80f50:	18800015 	stw	r2,0(r3)
   80f54:	00000406 	br	80f68 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   80f58:	0080e380 	call	80e38 <alt_get_errno>
   80f5c:	1007883a 	mov	r3,r2
   80f60:	00801444 	movi	r2,81
   80f64:	18800015 	stw	r2,0(r3)
  }
  return -1;
   80f68:	00bfffc4 	movi	r2,-1
}
   80f6c:	e037883a 	mov	sp,fp
   80f70:	dfc00117 	ldw	ra,4(sp)
   80f74:	df000017 	ldw	fp,0(sp)
   80f78:	dec00204 	addi	sp,sp,8
   80f7c:	f800283a 	ret

00080f80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   80f80:	defffd04 	addi	sp,sp,-12
   80f84:	dfc00215 	stw	ra,8(sp)
   80f88:	df000115 	stw	fp,4(sp)
   80f8c:	df000104 	addi	fp,sp,4
   80f90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   80f94:	01400234 	movhi	r5,8
   80f98:	29544c04 	addi	r5,r5,20784
   80f9c:	e13fff17 	ldw	r4,-4(fp)
   80fa0:	0082e7c0 	call	82e7c <alt_dev_llist_insert>
}
   80fa4:	e037883a 	mov	sp,fp
   80fa8:	dfc00117 	ldw	ra,4(sp)
   80fac:	df000017 	ldw	fp,0(sp)
   80fb0:	dec00204 	addi	sp,sp,8
   80fb4:	f800283a 	ret

00080fb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80fb8:	defffd04 	addi	sp,sp,-12
   80fbc:	dfc00215 	stw	ra,8(sp)
   80fc0:	df000115 	stw	fp,4(sp)
   80fc4:	df000104 	addi	fp,sp,4
   80fc8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII, niosII);
   80fcc:	00837500 	call	83750 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80fd0:	00800044 	movi	r2,1
   80fd4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80fd8:	0001883a 	nop
   80fdc:	e037883a 	mov	sp,fp
   80fe0:	dfc00117 	ldw	ra,4(sp)
   80fe4:	df000017 	ldw	fp,0(sp)
   80fe8:	dec00204 	addi	sp,sp,8
   80fec:	f800283a 	ret

00080ff0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80ff0:	defffd04 	addi	sp,sp,-12
   80ff4:	dfc00215 	stw	ra,8(sp)
   80ff8:	df000115 	stw	fp,4(sp)
   80ffc:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   81000:	000d883a 	mov	r6,zero
   81004:	000b883a 	mov	r5,zero
   81008:	01000234 	movhi	r4,8
   8100c:	210fa304 	addi	r4,r4,16012
   81010:	00813940 	call	81394 <altera_avalon_jtag_uart_init>
   81014:	01000234 	movhi	r4,8
   81018:	210f9904 	addi	r4,r4,15972
   8101c:	0080f800 	call	80f80 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   81020:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, av_config);
   81024:	01000234 	movhi	r4,8
   81028:	2113b104 	addi	r4,r4,20164
   8102c:	0080f800 	call	80f80 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_TRANSF, audio_transf);
   81030:	01000234 	movhi	r4,8
   81034:	2113bd04 	addi	r4,r4,20212
   81038:	0080f800 	call	80f80 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
   8103c:	00800234 	movhi	r2,8
   81040:	1093c904 	addi	r2,r2,20260
   81044:	10800a17 	ldw	r2,40(r2)
   81048:	10800017 	ldw	r2,0(r2)
   8104c:	1007883a 	mov	r3,r2
   81050:	00800234 	movhi	r2,8
   81054:	1093c904 	addi	r2,r2,20260
   81058:	10c00b15 	stw	r3,44(r2)
   8105c:	00800234 	movhi	r2,8
   81060:	1093c904 	addi	r2,r2,20260
   81064:	10800a17 	ldw	r2,40(r2)
   81068:	10800104 	addi	r2,r2,4
   8106c:	10800017 	ldw	r2,0(r2)
   81070:	1007883a 	mov	r3,r2
   81074:	00800234 	movhi	r2,8
   81078:	1093c904 	addi	r2,r2,20260
   8107c:	10c00c15 	stw	r3,48(r2)
   81080:	00800234 	movhi	r2,8
   81084:	1093c904 	addi	r2,r2,20260
   81088:	10800a17 	ldw	r2,40(r2)
   8108c:	10800204 	addi	r2,r2,8
   81090:	10800017 	ldw	r2,0(r2)
   81094:	10ffffcc 	andi	r3,r2,65535
   81098:	00800234 	movhi	r2,8
   8109c:	1093c904 	addi	r2,r2,20260
   810a0:	10c00f15 	stw	r3,60(r2)
   810a4:	00800234 	movhi	r2,8
   810a8:	1093c904 	addi	r2,r2,20260
   810ac:	10800a17 	ldw	r2,40(r2)
   810b0:	10800204 	addi	r2,r2,8
   810b4:	10800017 	ldw	r2,0(r2)
   810b8:	1006d43a 	srli	r3,r2,16
   810bc:	00800234 	movhi	r2,8
   810c0:	1093c904 	addi	r2,r2,20260
   810c4:	10c01015 	stw	r3,64(r2)
   810c8:	00800234 	movhi	r2,8
   810cc:	1093c904 	addi	r2,r2,20260
   810d0:	10800a17 	ldw	r2,40(r2)
   810d4:	10800304 	addi	r2,r2,12
   810d8:	10800017 	ldw	r2,0(r2)
   810dc:	1005d07a 	srai	r2,r2,1
   810e0:	10c0004c 	andi	r3,r2,1
   810e4:	00800234 	movhi	r2,8
   810e8:	1093c904 	addi	r2,r2,20260
   810ec:	10c00d15 	stw	r3,52(r2)
   810f0:	00800234 	movhi	r2,8
   810f4:	1093c904 	addi	r2,r2,20260
   810f8:	10800a17 	ldw	r2,40(r2)
   810fc:	10800304 	addi	r2,r2,12
   81100:	10800017 	ldw	r2,0(r2)
   81104:	1005d13a 	srai	r2,r2,4
   81108:	10c003cc 	andi	r3,r2,15
   8110c:	00800234 	movhi	r2,8
   81110:	1093c904 	addi	r2,r2,20260
   81114:	10c00e15 	stw	r3,56(r2)
   81118:	00800234 	movhi	r2,8
   8111c:	1093c904 	addi	r2,r2,20260
   81120:	10800a17 	ldw	r2,40(r2)
   81124:	10800304 	addi	r2,r2,12
   81128:	10800017 	ldw	r2,0(r2)
   8112c:	1005d43a 	srai	r2,r2,16
   81130:	e0bfff05 	stb	r2,-4(fp)
   81134:	00800234 	movhi	r2,8
   81138:	1093c904 	addi	r2,r2,20260
   8113c:	10800a17 	ldw	r2,40(r2)
   81140:	10800304 	addi	r2,r2,12
   81144:	10800017 	ldw	r2,0(r2)
   81148:	1004d63a 	srli	r2,r2,24
   8114c:	e0bfff45 	stb	r2,-3(fp)
   81150:	00800234 	movhi	r2,8
   81154:	1093c904 	addi	r2,r2,20260
   81158:	10800e17 	ldw	r2,56(r2)
   8115c:	10800058 	cmpnei	r2,r2,1
   81160:	1000041e 	bne	r2,zero,81174 <alt_sys_init+0x184>
   81164:	00800234 	movhi	r2,8
   81168:	1093c904 	addi	r2,r2,20260
   8116c:	10001115 	stw	zero,68(r2)
   81170:	00000e06 	br	811ac <alt_sys_init+0x1bc>
   81174:	00800234 	movhi	r2,8
   81178:	1093c904 	addi	r2,r2,20260
   8117c:	10800e17 	ldw	r2,56(r2)
   81180:	10800098 	cmpnei	r2,r2,2
   81184:	1000051e 	bne	r2,zero,8119c <alt_sys_init+0x1ac>
   81188:	00800234 	movhi	r2,8
   8118c:	1093c904 	addi	r2,r2,20260
   81190:	00c00044 	movi	r3,1
   81194:	10c01115 	stw	r3,68(r2)
   81198:	00000406 	br	811ac <alt_sys_init+0x1bc>
   8119c:	00800234 	movhi	r2,8
   811a0:	1093c904 	addi	r2,r2,20260
   811a4:	00c00084 	movi	r3,2
   811a8:	10c01115 	stw	r3,68(r2)
   811ac:	e0bfff03 	ldbu	r2,-4(fp)
   811b0:	00c00804 	movi	r3,32
   811b4:	1885c83a 	sub	r2,r3,r2
   811b8:	00ffffc4 	movi	r3,-1
   811bc:	1886d83a 	srl	r3,r3,r2
   811c0:	00800234 	movhi	r2,8
   811c4:	1093c904 	addi	r2,r2,20260
   811c8:	10c01215 	stw	r3,72(r2)
   811cc:	e0ffff03 	ldbu	r3,-4(fp)
   811d0:	00800234 	movhi	r2,8
   811d4:	1093c904 	addi	r2,r2,20260
   811d8:	10801117 	ldw	r2,68(r2)
   811dc:	1887883a 	add	r3,r3,r2
   811e0:	00800234 	movhi	r2,8
   811e4:	1093c904 	addi	r2,r2,20260
   811e8:	10c01315 	stw	r3,76(r2)
   811ec:	e0bfff43 	ldbu	r2,-3(fp)
   811f0:	00c00804 	movi	r3,32
   811f4:	1885c83a 	sub	r2,r3,r2
   811f8:	00ffffc4 	movi	r3,-1
   811fc:	1886d83a 	srl	r3,r3,r2
   81200:	00800234 	movhi	r2,8
   81204:	1093c904 	addi	r2,r2,20260
   81208:	10c01415 	stw	r3,80(r2)
   8120c:	01000234 	movhi	r4,8
   81210:	2113c904 	addi	r4,r4,20260
   81214:	0080f800 	call	80f80 <alt_dev_reg>
}
   81218:	0001883a 	nop
   8121c:	e037883a 	mov	sp,fp
   81220:	dfc00117 	ldw	ra,4(sp)
   81224:	df000017 	ldw	fp,0(sp)
   81228:	dec00204 	addi	sp,sp,8
   8122c:	f800283a 	ret

00081230 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   81230:	defffa04 	addi	sp,sp,-24
   81234:	dfc00515 	stw	ra,20(sp)
   81238:	df000415 	stw	fp,16(sp)
   8123c:	df000404 	addi	fp,sp,16
   81240:	e13ffd15 	stw	r4,-12(fp)
   81244:	e17ffe15 	stw	r5,-8(fp)
   81248:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8124c:	e0bffd17 	ldw	r2,-12(fp)
   81250:	10800017 	ldw	r2,0(r2)
   81254:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   81258:	e0bffc17 	ldw	r2,-16(fp)
   8125c:	10c00a04 	addi	r3,r2,40
   81260:	e0bffd17 	ldw	r2,-12(fp)
   81264:	10800217 	ldw	r2,8(r2)
   81268:	100f883a 	mov	r7,r2
   8126c:	e1bfff17 	ldw	r6,-4(fp)
   81270:	e17ffe17 	ldw	r5,-8(fp)
   81274:	1809883a 	mov	r4,r3
   81278:	00818600 	call	81860 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8127c:	e037883a 	mov	sp,fp
   81280:	dfc00117 	ldw	ra,4(sp)
   81284:	df000017 	ldw	fp,0(sp)
   81288:	dec00204 	addi	sp,sp,8
   8128c:	f800283a 	ret

00081290 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   81290:	defffa04 	addi	sp,sp,-24
   81294:	dfc00515 	stw	ra,20(sp)
   81298:	df000415 	stw	fp,16(sp)
   8129c:	df000404 	addi	fp,sp,16
   812a0:	e13ffd15 	stw	r4,-12(fp)
   812a4:	e17ffe15 	stw	r5,-8(fp)
   812a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   812ac:	e0bffd17 	ldw	r2,-12(fp)
   812b0:	10800017 	ldw	r2,0(r2)
   812b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   812b8:	e0bffc17 	ldw	r2,-16(fp)
   812bc:	10c00a04 	addi	r3,r2,40
   812c0:	e0bffd17 	ldw	r2,-12(fp)
   812c4:	10800217 	ldw	r2,8(r2)
   812c8:	100f883a 	mov	r7,r2
   812cc:	e1bfff17 	ldw	r6,-4(fp)
   812d0:	e17ffe17 	ldw	r5,-8(fp)
   812d4:	1809883a 	mov	r4,r3
   812d8:	0081a7c0 	call	81a7c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   812dc:	e037883a 	mov	sp,fp
   812e0:	dfc00117 	ldw	ra,4(sp)
   812e4:	df000017 	ldw	fp,0(sp)
   812e8:	dec00204 	addi	sp,sp,8
   812ec:	f800283a 	ret

000812f0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   812f0:	defffc04 	addi	sp,sp,-16
   812f4:	dfc00315 	stw	ra,12(sp)
   812f8:	df000215 	stw	fp,8(sp)
   812fc:	df000204 	addi	fp,sp,8
   81300:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   81304:	e0bfff17 	ldw	r2,-4(fp)
   81308:	10800017 	ldw	r2,0(r2)
   8130c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   81310:	e0bffe17 	ldw	r2,-8(fp)
   81314:	10c00a04 	addi	r3,r2,40
   81318:	e0bfff17 	ldw	r2,-4(fp)
   8131c:	10800217 	ldw	r2,8(r2)
   81320:	100b883a 	mov	r5,r2
   81324:	1809883a 	mov	r4,r3
   81328:	00817080 	call	81708 <altera_avalon_jtag_uart_close>
}
   8132c:	e037883a 	mov	sp,fp
   81330:	dfc00117 	ldw	ra,4(sp)
   81334:	df000017 	ldw	fp,0(sp)
   81338:	dec00204 	addi	sp,sp,8
   8133c:	f800283a 	ret

00081340 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   81340:	defffa04 	addi	sp,sp,-24
   81344:	dfc00515 	stw	ra,20(sp)
   81348:	df000415 	stw	fp,16(sp)
   8134c:	df000404 	addi	fp,sp,16
   81350:	e13ffd15 	stw	r4,-12(fp)
   81354:	e17ffe15 	stw	r5,-8(fp)
   81358:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8135c:	e0bffd17 	ldw	r2,-12(fp)
   81360:	10800017 	ldw	r2,0(r2)
   81364:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   81368:	e0bffc17 	ldw	r2,-16(fp)
   8136c:	10800a04 	addi	r2,r2,40
   81370:	e1bfff17 	ldw	r6,-4(fp)
   81374:	e17ffe17 	ldw	r5,-8(fp)
   81378:	1009883a 	mov	r4,r2
   8137c:	00817700 	call	81770 <altera_avalon_jtag_uart_ioctl>
}
   81380:	e037883a 	mov	sp,fp
   81384:	dfc00117 	ldw	ra,4(sp)
   81388:	df000017 	ldw	fp,0(sp)
   8138c:	dec00204 	addi	sp,sp,8
   81390:	f800283a 	ret

00081394 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   81394:	defffb04 	addi	sp,sp,-20
   81398:	dfc00415 	stw	ra,16(sp)
   8139c:	df000315 	stw	fp,12(sp)
   813a0:	df000304 	addi	fp,sp,12
   813a4:	e13ffd15 	stw	r4,-12(fp)
   813a8:	e17ffe15 	stw	r5,-8(fp)
   813ac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   813b0:	e0bffd17 	ldw	r2,-12(fp)
   813b4:	00c00044 	movi	r3,1
   813b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   813bc:	e0bffd17 	ldw	r2,-12(fp)
   813c0:	10800017 	ldw	r2,0(r2)
   813c4:	10800104 	addi	r2,r2,4
   813c8:	1007883a 	mov	r3,r2
   813cc:	e0bffd17 	ldw	r2,-12(fp)
   813d0:	10800817 	ldw	r2,32(r2)
   813d4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   813d8:	e0bfff17 	ldw	r2,-4(fp)
   813dc:	01800234 	movhi	r6,8
   813e0:	31851404 	addi	r6,r6,5200
   813e4:	e17ffd17 	ldw	r5,-12(fp)
   813e8:	1009883a 	mov	r4,r2
   813ec:	00831240 	call	83124 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   813f0:	e0bffd17 	ldw	r2,-12(fp)
   813f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   813f8:	e0bffd17 	ldw	r2,-12(fp)
   813fc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   81400:	00800234 	movhi	r2,8
   81404:	10994a04 	addi	r2,r2,25896
   81408:	10800017 	ldw	r2,0(r2)
   8140c:	e1fffd17 	ldw	r7,-12(fp)
   81410:	01800234 	movhi	r6,8
   81414:	31859804 	addi	r6,r6,5728
   81418:	100b883a 	mov	r5,r2
   8141c:	1809883a 	mov	r4,r3
   81420:	0082b580 	call	82b58 <alt_alarm_start>
   81424:	1000040e 	bge	r2,zero,81438 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   81428:	e0fffd17 	ldw	r3,-12(fp)
   8142c:	00a00034 	movhi	r2,32768
   81430:	10bfffc4 	addi	r2,r2,-1
   81434:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   81438:	0001883a 	nop
   8143c:	e037883a 	mov	sp,fp
   81440:	dfc00117 	ldw	ra,4(sp)
   81444:	df000017 	ldw	fp,0(sp)
   81448:	dec00204 	addi	sp,sp,8
   8144c:	f800283a 	ret

00081450 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   81450:	defff704 	addi	sp,sp,-36
   81454:	df000815 	stw	fp,32(sp)
   81458:	df000804 	addi	fp,sp,32
   8145c:	e13ffe15 	stw	r4,-8(fp)
   81460:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   81464:	e0bffe17 	ldw	r2,-8(fp)
   81468:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   8146c:	e0bffa17 	ldw	r2,-24(fp)
   81470:	10800017 	ldw	r2,0(r2)
   81474:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   81478:	e0bffb17 	ldw	r2,-20(fp)
   8147c:	10800104 	addi	r2,r2,4
   81480:	10800037 	ldwio	r2,0(r2)
   81484:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   81488:	e0bffc17 	ldw	r2,-16(fp)
   8148c:	1080c00c 	andi	r2,r2,768
   81490:	10006d26 	beq	r2,zero,81648 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   81494:	e0bffc17 	ldw	r2,-16(fp)
   81498:	1080400c 	andi	r2,r2,256
   8149c:	10003526 	beq	r2,zero,81574 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   814a0:	00800074 	movhi	r2,1
   814a4:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   814a8:	e0bffa17 	ldw	r2,-24(fp)
   814ac:	10800a17 	ldw	r2,40(r2)
   814b0:	10800044 	addi	r2,r2,1
   814b4:	1081ffcc 	andi	r2,r2,2047
   814b8:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   814bc:	e0bffa17 	ldw	r2,-24(fp)
   814c0:	10c00b17 	ldw	r3,44(r2)
   814c4:	e0bffd17 	ldw	r2,-12(fp)
   814c8:	18801526 	beq	r3,r2,81520 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   814cc:	e0bffb17 	ldw	r2,-20(fp)
   814d0:	10800037 	ldwio	r2,0(r2)
   814d4:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   814d8:	e0bff817 	ldw	r2,-32(fp)
   814dc:	10a0000c 	andi	r2,r2,32768
   814e0:	10001126 	beq	r2,zero,81528 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   814e4:	e0bffa17 	ldw	r2,-24(fp)
   814e8:	10800a17 	ldw	r2,40(r2)
   814ec:	e0fff817 	ldw	r3,-32(fp)
   814f0:	1809883a 	mov	r4,r3
   814f4:	e0fffa17 	ldw	r3,-24(fp)
   814f8:	1885883a 	add	r2,r3,r2
   814fc:	10800e04 	addi	r2,r2,56
   81500:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81504:	e0bffa17 	ldw	r2,-24(fp)
   81508:	10800a17 	ldw	r2,40(r2)
   8150c:	10800044 	addi	r2,r2,1
   81510:	10c1ffcc 	andi	r3,r2,2047
   81514:	e0bffa17 	ldw	r2,-24(fp)
   81518:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8151c:	003fe206 	br	814a8 <__alt_data_end+0xfffb32a8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   81520:	0001883a 	nop
   81524:	00000106 	br	8152c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   81528:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8152c:	e0bff817 	ldw	r2,-32(fp)
   81530:	10bfffec 	andhi	r2,r2,65535
   81534:	10000f26 	beq	r2,zero,81574 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   81538:	e0bffa17 	ldw	r2,-24(fp)
   8153c:	10c00817 	ldw	r3,32(r2)
   81540:	00bfff84 	movi	r2,-2
   81544:	1886703a 	and	r3,r3,r2
   81548:	e0bffa17 	ldw	r2,-24(fp)
   8154c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   81550:	e0bffb17 	ldw	r2,-20(fp)
   81554:	10800104 	addi	r2,r2,4
   81558:	1007883a 	mov	r3,r2
   8155c:	e0bffa17 	ldw	r2,-24(fp)
   81560:	10800817 	ldw	r2,32(r2)
   81564:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   81568:	e0bffb17 	ldw	r2,-20(fp)
   8156c:	10800104 	addi	r2,r2,4
   81570:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   81574:	e0bffc17 	ldw	r2,-16(fp)
   81578:	1080800c 	andi	r2,r2,512
   8157c:	103fbe26 	beq	r2,zero,81478 <__alt_data_end+0xfffb3278>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   81580:	e0bffc17 	ldw	r2,-16(fp)
   81584:	1004d43a 	srli	r2,r2,16
   81588:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8158c:	00001406 	br	815e0 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   81590:	e0bffb17 	ldw	r2,-20(fp)
   81594:	e0fffa17 	ldw	r3,-24(fp)
   81598:	18c00d17 	ldw	r3,52(r3)
   8159c:	e13ffa17 	ldw	r4,-24(fp)
   815a0:	20c7883a 	add	r3,r4,r3
   815a4:	18c20e04 	addi	r3,r3,2104
   815a8:	18c00003 	ldbu	r3,0(r3)
   815ac:	18c03fcc 	andi	r3,r3,255
   815b0:	18c0201c 	xori	r3,r3,128
   815b4:	18ffe004 	addi	r3,r3,-128
   815b8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   815bc:	e0bffa17 	ldw	r2,-24(fp)
   815c0:	10800d17 	ldw	r2,52(r2)
   815c4:	10800044 	addi	r2,r2,1
   815c8:	10c1ffcc 	andi	r3,r2,2047
   815cc:	e0bffa17 	ldw	r2,-24(fp)
   815d0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   815d4:	e0bff917 	ldw	r2,-28(fp)
   815d8:	10bfffc4 	addi	r2,r2,-1
   815dc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   815e0:	e0bff917 	ldw	r2,-28(fp)
   815e4:	10000526 	beq	r2,zero,815fc <altera_avalon_jtag_uart_irq+0x1ac>
   815e8:	e0bffa17 	ldw	r2,-24(fp)
   815ec:	10c00d17 	ldw	r3,52(r2)
   815f0:	e0bffa17 	ldw	r2,-24(fp)
   815f4:	10800c17 	ldw	r2,48(r2)
   815f8:	18bfe51e 	bne	r3,r2,81590 <__alt_data_end+0xfffb3390>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   815fc:	e0bff917 	ldw	r2,-28(fp)
   81600:	103f9d26 	beq	r2,zero,81478 <__alt_data_end+0xfffb3278>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   81604:	e0bffa17 	ldw	r2,-24(fp)
   81608:	10c00817 	ldw	r3,32(r2)
   8160c:	00bfff44 	movi	r2,-3
   81610:	1886703a 	and	r3,r3,r2
   81614:	e0bffa17 	ldw	r2,-24(fp)
   81618:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8161c:	e0bffa17 	ldw	r2,-24(fp)
   81620:	10800017 	ldw	r2,0(r2)
   81624:	10800104 	addi	r2,r2,4
   81628:	1007883a 	mov	r3,r2
   8162c:	e0bffa17 	ldw	r2,-24(fp)
   81630:	10800817 	ldw	r2,32(r2)
   81634:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   81638:	e0bffb17 	ldw	r2,-20(fp)
   8163c:	10800104 	addi	r2,r2,4
   81640:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   81644:	003f8c06 	br	81478 <__alt_data_end+0xfffb3278>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   81648:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8164c:	0001883a 	nop
   81650:	e037883a 	mov	sp,fp
   81654:	df000017 	ldw	fp,0(sp)
   81658:	dec00104 	addi	sp,sp,4
   8165c:	f800283a 	ret

00081660 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   81660:	defff804 	addi	sp,sp,-32
   81664:	df000715 	stw	fp,28(sp)
   81668:	df000704 	addi	fp,sp,28
   8166c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   81670:	e0bffb17 	ldw	r2,-20(fp)
   81674:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   81678:	e0bff917 	ldw	r2,-28(fp)
   8167c:	10800017 	ldw	r2,0(r2)
   81680:	10800104 	addi	r2,r2,4
   81684:	10800037 	ldwio	r2,0(r2)
   81688:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8168c:	e0bffa17 	ldw	r2,-24(fp)
   81690:	1081000c 	andi	r2,r2,1024
   81694:	10000b26 	beq	r2,zero,816c4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   81698:	e0bff917 	ldw	r2,-28(fp)
   8169c:	10800017 	ldw	r2,0(r2)
   816a0:	10800104 	addi	r2,r2,4
   816a4:	1007883a 	mov	r3,r2
   816a8:	e0bff917 	ldw	r2,-28(fp)
   816ac:	10800817 	ldw	r2,32(r2)
   816b0:	10810014 	ori	r2,r2,1024
   816b4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   816b8:	e0bff917 	ldw	r2,-28(fp)
   816bc:	10000915 	stw	zero,36(r2)
   816c0:	00000a06 	br	816ec <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   816c4:	e0bff917 	ldw	r2,-28(fp)
   816c8:	10c00917 	ldw	r3,36(r2)
   816cc:	00a00034 	movhi	r2,32768
   816d0:	10bfff04 	addi	r2,r2,-4
   816d4:	10c00536 	bltu	r2,r3,816ec <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   816d8:	e0bff917 	ldw	r2,-28(fp)
   816dc:	10800917 	ldw	r2,36(r2)
   816e0:	10c00044 	addi	r3,r2,1
   816e4:	e0bff917 	ldw	r2,-28(fp)
   816e8:	10c00915 	stw	r3,36(r2)
   816ec:	00800234 	movhi	r2,8
   816f0:	10994a04 	addi	r2,r2,25896
   816f4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   816f8:	e037883a 	mov	sp,fp
   816fc:	df000017 	ldw	fp,0(sp)
   81700:	dec00104 	addi	sp,sp,4
   81704:	f800283a 	ret

00081708 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   81708:	defffd04 	addi	sp,sp,-12
   8170c:	df000215 	stw	fp,8(sp)
   81710:	df000204 	addi	fp,sp,8
   81714:	e13ffe15 	stw	r4,-8(fp)
   81718:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8171c:	00000506 	br	81734 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   81720:	e0bfff17 	ldw	r2,-4(fp)
   81724:	1090000c 	andi	r2,r2,16384
   81728:	10000226 	beq	r2,zero,81734 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8172c:	00bffd44 	movi	r2,-11
   81730:	00000b06 	br	81760 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   81734:	e0bffe17 	ldw	r2,-8(fp)
   81738:	10c00d17 	ldw	r3,52(r2)
   8173c:	e0bffe17 	ldw	r2,-8(fp)
   81740:	10800c17 	ldw	r2,48(r2)
   81744:	18800526 	beq	r3,r2,8175c <altera_avalon_jtag_uart_close+0x54>
   81748:	e0bffe17 	ldw	r2,-8(fp)
   8174c:	10c00917 	ldw	r3,36(r2)
   81750:	e0bffe17 	ldw	r2,-8(fp)
   81754:	10800117 	ldw	r2,4(r2)
   81758:	18bff136 	bltu	r3,r2,81720 <__alt_data_end+0xfffb3520>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8175c:	0005883a 	mov	r2,zero
}
   81760:	e037883a 	mov	sp,fp
   81764:	df000017 	ldw	fp,0(sp)
   81768:	dec00104 	addi	sp,sp,4
   8176c:	f800283a 	ret

00081770 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   81770:	defffa04 	addi	sp,sp,-24
   81774:	df000515 	stw	fp,20(sp)
   81778:	df000504 	addi	fp,sp,20
   8177c:	e13ffd15 	stw	r4,-12(fp)
   81780:	e17ffe15 	stw	r5,-8(fp)
   81784:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   81788:	00bff9c4 	movi	r2,-25
   8178c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   81790:	e0bffe17 	ldw	r2,-8(fp)
   81794:	10da8060 	cmpeqi	r3,r2,27137
   81798:	1800031e 	bne	r3,zero,817a8 <altera_avalon_jtag_uart_ioctl+0x38>
   8179c:	109a80a0 	cmpeqi	r2,r2,27138
   817a0:	1000181e 	bne	r2,zero,81804 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   817a4:	00002906 	br	8184c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   817a8:	e0bffd17 	ldw	r2,-12(fp)
   817ac:	10c00117 	ldw	r3,4(r2)
   817b0:	00a00034 	movhi	r2,32768
   817b4:	10bfffc4 	addi	r2,r2,-1
   817b8:	18802126 	beq	r3,r2,81840 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   817bc:	e0bfff17 	ldw	r2,-4(fp)
   817c0:	10800017 	ldw	r2,0(r2)
   817c4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   817c8:	e0bffc17 	ldw	r2,-16(fp)
   817cc:	10800090 	cmplti	r2,r2,2
   817d0:	1000061e 	bne	r2,zero,817ec <altera_avalon_jtag_uart_ioctl+0x7c>
   817d4:	e0fffc17 	ldw	r3,-16(fp)
   817d8:	00a00034 	movhi	r2,32768
   817dc:	10bfffc4 	addi	r2,r2,-1
   817e0:	18800226 	beq	r3,r2,817ec <altera_avalon_jtag_uart_ioctl+0x7c>
   817e4:	e0bffc17 	ldw	r2,-16(fp)
   817e8:	00000206 	br	817f4 <altera_avalon_jtag_uart_ioctl+0x84>
   817ec:	00a00034 	movhi	r2,32768
   817f0:	10bfff84 	addi	r2,r2,-2
   817f4:	e0fffd17 	ldw	r3,-12(fp)
   817f8:	18800115 	stw	r2,4(r3)
      rc = 0;
   817fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   81800:	00000f06 	br	81840 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   81804:	e0bffd17 	ldw	r2,-12(fp)
   81808:	10c00117 	ldw	r3,4(r2)
   8180c:	00a00034 	movhi	r2,32768
   81810:	10bfffc4 	addi	r2,r2,-1
   81814:	18800c26 	beq	r3,r2,81848 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   81818:	e0bffd17 	ldw	r2,-12(fp)
   8181c:	10c00917 	ldw	r3,36(r2)
   81820:	e0bffd17 	ldw	r2,-12(fp)
   81824:	10800117 	ldw	r2,4(r2)
   81828:	1885803a 	cmpltu	r2,r3,r2
   8182c:	10c03fcc 	andi	r3,r2,255
   81830:	e0bfff17 	ldw	r2,-4(fp)
   81834:	10c00015 	stw	r3,0(r2)
      rc = 0;
   81838:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8183c:	00000206 	br	81848 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   81840:	0001883a 	nop
   81844:	00000106 	br	8184c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   81848:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8184c:	e0bffb17 	ldw	r2,-20(fp)
}
   81850:	e037883a 	mov	sp,fp
   81854:	df000017 	ldw	fp,0(sp)
   81858:	dec00104 	addi	sp,sp,4
   8185c:	f800283a 	ret

00081860 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   81860:	defff304 	addi	sp,sp,-52
   81864:	dfc00c15 	stw	ra,48(sp)
   81868:	df000b15 	stw	fp,44(sp)
   8186c:	df000b04 	addi	fp,sp,44
   81870:	e13ffc15 	stw	r4,-16(fp)
   81874:	e17ffd15 	stw	r5,-12(fp)
   81878:	e1bffe15 	stw	r6,-8(fp)
   8187c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   81880:	e0bffd17 	ldw	r2,-12(fp)
   81884:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   81888:	00004706 	br	819a8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8188c:	e0bffc17 	ldw	r2,-16(fp)
   81890:	10800a17 	ldw	r2,40(r2)
   81894:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   81898:	e0bffc17 	ldw	r2,-16(fp)
   8189c:	10800b17 	ldw	r2,44(r2)
   818a0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   818a4:	e0fff717 	ldw	r3,-36(fp)
   818a8:	e0bff817 	ldw	r2,-32(fp)
   818ac:	18800536 	bltu	r3,r2,818c4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   818b0:	e0fff717 	ldw	r3,-36(fp)
   818b4:	e0bff817 	ldw	r2,-32(fp)
   818b8:	1885c83a 	sub	r2,r3,r2
   818bc:	e0bff615 	stw	r2,-40(fp)
   818c0:	00000406 	br	818d4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   818c4:	00c20004 	movi	r3,2048
   818c8:	e0bff817 	ldw	r2,-32(fp)
   818cc:	1885c83a 	sub	r2,r3,r2
   818d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   818d4:	e0bff617 	ldw	r2,-40(fp)
   818d8:	10001e26 	beq	r2,zero,81954 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   818dc:	e0fffe17 	ldw	r3,-8(fp)
   818e0:	e0bff617 	ldw	r2,-40(fp)
   818e4:	1880022e 	bgeu	r3,r2,818f0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   818e8:	e0bffe17 	ldw	r2,-8(fp)
   818ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   818f0:	e0bffc17 	ldw	r2,-16(fp)
   818f4:	10c00e04 	addi	r3,r2,56
   818f8:	e0bff817 	ldw	r2,-32(fp)
   818fc:	1885883a 	add	r2,r3,r2
   81900:	e1bff617 	ldw	r6,-40(fp)
   81904:	100b883a 	mov	r5,r2
   81908:	e13ff517 	ldw	r4,-44(fp)
   8190c:	0083ab80 	call	83ab8 <memcpy>
      ptr   += n;
   81910:	e0fff517 	ldw	r3,-44(fp)
   81914:	e0bff617 	ldw	r2,-40(fp)
   81918:	1885883a 	add	r2,r3,r2
   8191c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   81920:	e0fffe17 	ldw	r3,-8(fp)
   81924:	e0bff617 	ldw	r2,-40(fp)
   81928:	1885c83a 	sub	r2,r3,r2
   8192c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81930:	e0fff817 	ldw	r3,-32(fp)
   81934:	e0bff617 	ldw	r2,-40(fp)
   81938:	1885883a 	add	r2,r3,r2
   8193c:	10c1ffcc 	andi	r3,r2,2047
   81940:	e0bffc17 	ldw	r2,-16(fp)
   81944:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   81948:	e0bffe17 	ldw	r2,-8(fp)
   8194c:	00bfcf16 	blt	zero,r2,8188c <__alt_data_end+0xfffb368c>
   81950:	00000106 	br	81958 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   81954:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   81958:	e0fff517 	ldw	r3,-44(fp)
   8195c:	e0bffd17 	ldw	r2,-12(fp)
   81960:	1880141e 	bne	r3,r2,819b4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   81964:	e0bfff17 	ldw	r2,-4(fp)
   81968:	1090000c 	andi	r2,r2,16384
   8196c:	1000131e 	bne	r2,zero,819bc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   81970:	0001883a 	nop
   81974:	e0bffc17 	ldw	r2,-16(fp)
   81978:	10c00a17 	ldw	r3,40(r2)
   8197c:	e0bff717 	ldw	r2,-36(fp)
   81980:	1880051e 	bne	r3,r2,81998 <altera_avalon_jtag_uart_read+0x138>
   81984:	e0bffc17 	ldw	r2,-16(fp)
   81988:	10c00917 	ldw	r3,36(r2)
   8198c:	e0bffc17 	ldw	r2,-16(fp)
   81990:	10800117 	ldw	r2,4(r2)
   81994:	18bff736 	bltu	r3,r2,81974 <__alt_data_end+0xfffb3774>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   81998:	e0bffc17 	ldw	r2,-16(fp)
   8199c:	10c00a17 	ldw	r3,40(r2)
   819a0:	e0bff717 	ldw	r2,-36(fp)
   819a4:	18800726 	beq	r3,r2,819c4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   819a8:	e0bffe17 	ldw	r2,-8(fp)
   819ac:	00bfb716 	blt	zero,r2,8188c <__alt_data_end+0xfffb368c>
   819b0:	00000506 	br	819c8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   819b4:	0001883a 	nop
   819b8:	00000306 	br	819c8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   819bc:	0001883a 	nop
   819c0:	00000106 	br	819c8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   819c4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   819c8:	e0fff517 	ldw	r3,-44(fp)
   819cc:	e0bffd17 	ldw	r2,-12(fp)
   819d0:	18801826 	beq	r3,r2,81a34 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   819d4:	0005303a 	rdctl	r2,status
   819d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   819dc:	e0fffb17 	ldw	r3,-20(fp)
   819e0:	00bfff84 	movi	r2,-2
   819e4:	1884703a 	and	r2,r3,r2
   819e8:	1001703a 	wrctl	status,r2
  
  return context;
   819ec:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   819f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   819f4:	e0bffc17 	ldw	r2,-16(fp)
   819f8:	10800817 	ldw	r2,32(r2)
   819fc:	10c00054 	ori	r3,r2,1
   81a00:	e0bffc17 	ldw	r2,-16(fp)
   81a04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   81a08:	e0bffc17 	ldw	r2,-16(fp)
   81a0c:	10800017 	ldw	r2,0(r2)
   81a10:	10800104 	addi	r2,r2,4
   81a14:	1007883a 	mov	r3,r2
   81a18:	e0bffc17 	ldw	r2,-16(fp)
   81a1c:	10800817 	ldw	r2,32(r2)
   81a20:	18800035 	stwio	r2,0(r3)
   81a24:	e0bffa17 	ldw	r2,-24(fp)
   81a28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81a2c:	e0bff917 	ldw	r2,-28(fp)
   81a30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   81a34:	e0fff517 	ldw	r3,-44(fp)
   81a38:	e0bffd17 	ldw	r2,-12(fp)
   81a3c:	18800426 	beq	r3,r2,81a50 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   81a40:	e0fff517 	ldw	r3,-44(fp)
   81a44:	e0bffd17 	ldw	r2,-12(fp)
   81a48:	1885c83a 	sub	r2,r3,r2
   81a4c:	00000606 	br	81a68 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   81a50:	e0bfff17 	ldw	r2,-4(fp)
   81a54:	1090000c 	andi	r2,r2,16384
   81a58:	10000226 	beq	r2,zero,81a64 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   81a5c:	00bffd44 	movi	r2,-11
   81a60:	00000106 	br	81a68 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   81a64:	00bffec4 	movi	r2,-5
}
   81a68:	e037883a 	mov	sp,fp
   81a6c:	dfc00117 	ldw	ra,4(sp)
   81a70:	df000017 	ldw	fp,0(sp)
   81a74:	dec00204 	addi	sp,sp,8
   81a78:	f800283a 	ret

00081a7c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   81a7c:	defff304 	addi	sp,sp,-52
   81a80:	dfc00c15 	stw	ra,48(sp)
   81a84:	df000b15 	stw	fp,44(sp)
   81a88:	df000b04 	addi	fp,sp,44
   81a8c:	e13ffc15 	stw	r4,-16(fp)
   81a90:	e17ffd15 	stw	r5,-12(fp)
   81a94:	e1bffe15 	stw	r6,-8(fp)
   81a98:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   81a9c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   81aa0:	e0bffd17 	ldw	r2,-12(fp)
   81aa4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   81aa8:	00003706 	br	81b88 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   81aac:	e0bffc17 	ldw	r2,-16(fp)
   81ab0:	10800c17 	ldw	r2,48(r2)
   81ab4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   81ab8:	e0bffc17 	ldw	r2,-16(fp)
   81abc:	10800d17 	ldw	r2,52(r2)
   81ac0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   81ac4:	e0fff917 	ldw	r3,-28(fp)
   81ac8:	e0bff517 	ldw	r2,-44(fp)
   81acc:	1880062e 	bgeu	r3,r2,81ae8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   81ad0:	e0fff517 	ldw	r3,-44(fp)
   81ad4:	e0bff917 	ldw	r2,-28(fp)
   81ad8:	1885c83a 	sub	r2,r3,r2
   81adc:	10bfffc4 	addi	r2,r2,-1
   81ae0:	e0bff615 	stw	r2,-40(fp)
   81ae4:	00000b06 	br	81b14 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   81ae8:	e0bff517 	ldw	r2,-44(fp)
   81aec:	10000526 	beq	r2,zero,81b04 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   81af0:	00c20004 	movi	r3,2048
   81af4:	e0bff917 	ldw	r2,-28(fp)
   81af8:	1885c83a 	sub	r2,r3,r2
   81afc:	e0bff615 	stw	r2,-40(fp)
   81b00:	00000406 	br	81b14 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   81b04:	00c1ffc4 	movi	r3,2047
   81b08:	e0bff917 	ldw	r2,-28(fp)
   81b0c:	1885c83a 	sub	r2,r3,r2
   81b10:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   81b14:	e0bff617 	ldw	r2,-40(fp)
   81b18:	10001e26 	beq	r2,zero,81b94 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   81b1c:	e0fffe17 	ldw	r3,-8(fp)
   81b20:	e0bff617 	ldw	r2,-40(fp)
   81b24:	1880022e 	bgeu	r3,r2,81b30 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   81b28:	e0bffe17 	ldw	r2,-8(fp)
   81b2c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   81b30:	e0bffc17 	ldw	r2,-16(fp)
   81b34:	10c20e04 	addi	r3,r2,2104
   81b38:	e0bff917 	ldw	r2,-28(fp)
   81b3c:	1885883a 	add	r2,r3,r2
   81b40:	e1bff617 	ldw	r6,-40(fp)
   81b44:	e17ffd17 	ldw	r5,-12(fp)
   81b48:	1009883a 	mov	r4,r2
   81b4c:	0083ab80 	call	83ab8 <memcpy>
      ptr   += n;
   81b50:	e0fffd17 	ldw	r3,-12(fp)
   81b54:	e0bff617 	ldw	r2,-40(fp)
   81b58:	1885883a 	add	r2,r3,r2
   81b5c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   81b60:	e0fffe17 	ldw	r3,-8(fp)
   81b64:	e0bff617 	ldw	r2,-40(fp)
   81b68:	1885c83a 	sub	r2,r3,r2
   81b6c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81b70:	e0fff917 	ldw	r3,-28(fp)
   81b74:	e0bff617 	ldw	r2,-40(fp)
   81b78:	1885883a 	add	r2,r3,r2
   81b7c:	10c1ffcc 	andi	r3,r2,2047
   81b80:	e0bffc17 	ldw	r2,-16(fp)
   81b84:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   81b88:	e0bffe17 	ldw	r2,-8(fp)
   81b8c:	00bfc716 	blt	zero,r2,81aac <__alt_data_end+0xfffb38ac>
   81b90:	00000106 	br	81b98 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   81b94:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81b98:	0005303a 	rdctl	r2,status
   81b9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81ba0:	e0fffb17 	ldw	r3,-20(fp)
   81ba4:	00bfff84 	movi	r2,-2
   81ba8:	1884703a 	and	r2,r3,r2
   81bac:	1001703a 	wrctl	status,r2
  
  return context;
   81bb0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   81bb4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   81bb8:	e0bffc17 	ldw	r2,-16(fp)
   81bbc:	10800817 	ldw	r2,32(r2)
   81bc0:	10c00094 	ori	r3,r2,2
   81bc4:	e0bffc17 	ldw	r2,-16(fp)
   81bc8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   81bcc:	e0bffc17 	ldw	r2,-16(fp)
   81bd0:	10800017 	ldw	r2,0(r2)
   81bd4:	10800104 	addi	r2,r2,4
   81bd8:	1007883a 	mov	r3,r2
   81bdc:	e0bffc17 	ldw	r2,-16(fp)
   81be0:	10800817 	ldw	r2,32(r2)
   81be4:	18800035 	stwio	r2,0(r3)
   81be8:	e0bffa17 	ldw	r2,-24(fp)
   81bec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81bf0:	e0bff817 	ldw	r2,-32(fp)
   81bf4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   81bf8:	e0bffe17 	ldw	r2,-8(fp)
   81bfc:	0080100e 	bge	zero,r2,81c40 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   81c00:	e0bfff17 	ldw	r2,-4(fp)
   81c04:	1090000c 	andi	r2,r2,16384
   81c08:	1000101e 	bne	r2,zero,81c4c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   81c0c:	0001883a 	nop
   81c10:	e0bffc17 	ldw	r2,-16(fp)
   81c14:	10c00d17 	ldw	r3,52(r2)
   81c18:	e0bff517 	ldw	r2,-44(fp)
   81c1c:	1880051e 	bne	r3,r2,81c34 <altera_avalon_jtag_uart_write+0x1b8>
   81c20:	e0bffc17 	ldw	r2,-16(fp)
   81c24:	10c00917 	ldw	r3,36(r2)
   81c28:	e0bffc17 	ldw	r2,-16(fp)
   81c2c:	10800117 	ldw	r2,4(r2)
   81c30:	18bff736 	bltu	r3,r2,81c10 <__alt_data_end+0xfffb3a10>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   81c34:	e0bffc17 	ldw	r2,-16(fp)
   81c38:	10800917 	ldw	r2,36(r2)
   81c3c:	1000051e 	bne	r2,zero,81c54 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   81c40:	e0bffe17 	ldw	r2,-8(fp)
   81c44:	00bfd016 	blt	zero,r2,81b88 <__alt_data_end+0xfffb3988>
   81c48:	00000306 	br	81c58 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   81c4c:	0001883a 	nop
   81c50:	00000106 	br	81c58 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   81c54:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   81c58:	e0fffd17 	ldw	r3,-12(fp)
   81c5c:	e0bff717 	ldw	r2,-36(fp)
   81c60:	18800426 	beq	r3,r2,81c74 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   81c64:	e0fffd17 	ldw	r3,-12(fp)
   81c68:	e0bff717 	ldw	r2,-36(fp)
   81c6c:	1885c83a 	sub	r2,r3,r2
   81c70:	00000606 	br	81c8c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   81c74:	e0bfff17 	ldw	r2,-4(fp)
   81c78:	1090000c 	andi	r2,r2,16384
   81c7c:	10000226 	beq	r2,zero,81c88 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   81c80:	00bffd44 	movi	r2,-11
   81c84:	00000106 	br	81c8c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   81c88:	00bffec4 	movi	r2,-5
}
   81c8c:	e037883a 	mov	sp,fp
   81c90:	dfc00117 	ldw	ra,4(sp)
   81c94:	df000017 	ldw	fp,0(sp)
   81c98:	dec00204 	addi	sp,sp,8
   81c9c:	f800283a 	ret

00081ca0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
   81ca0:	defffc04 	addi	sp,sp,-16
   81ca4:	dfc00315 	stw	ra,12(sp)
   81ca8:	df000215 	stw	fp,8(sp)
   81cac:	df000204 	addi	fp,sp,8
   81cb0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
   81cb4:	01400234 	movhi	r5,8
   81cb8:	29544c04 	addi	r5,r5,20784
   81cbc:	e13fff17 	ldw	r4,-4(fp)
   81cc0:	0082f200 	call	82f20 <alt_find_dev>
   81cc4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   81cc8:	e0bffe17 	ldw	r2,-8(fp)
}
   81ccc:	e037883a 	mov	sp,fp
   81cd0:	dfc00117 	ldw	ra,4(sp)
   81cd4:	df000017 	ldw	fp,0(sp)
   81cd8:	dec00204 	addi	sp,sp,8
   81cdc:	f800283a 	ret

00081ce0 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
   81ce0:	defffa04 	addi	sp,sp,-24
   81ce4:	df000515 	stw	fp,20(sp)
   81ce8:	df000504 	addi	fp,sp,20
   81cec:	e13ffc15 	stw	r4,-16(fp)
   81cf0:	e17ffd15 	stw	r5,-12(fp)
   81cf4:	e1bffe15 	stw	r6,-8(fp)
   81cf8:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
   81cfc:	e0bffc17 	ldw	r2,-16(fp)
   81d00:	10800f17 	ldw	r2,60(r2)
   81d04:	e0fffe17 	ldw	r3,-8(fp)
   81d08:	1880042e 	bgeu	r3,r2,81d1c <alt_up_pixel_buffer_dma_draw+0x3c>
   81d0c:	e0bffc17 	ldw	r2,-16(fp)
   81d10:	10801017 	ldw	r2,64(r2)
   81d14:	e0ffff17 	ldw	r3,-4(fp)
   81d18:	18800236 	bltu	r3,r2,81d24 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
   81d1c:	00bfffc4 	movi	r2,-1
   81d20:	00005006 	br	81e64 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
   81d24:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   81d28:	e0bffc17 	ldw	r2,-16(fp)
   81d2c:	10800d17 	ldw	r2,52(r2)
   81d30:	1000151e 	bne	r2,zero,81d88 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   81d34:	e0bffc17 	ldw	r2,-16(fp)
   81d38:	10c01217 	ldw	r3,72(r2)
   81d3c:	e0bffe17 	ldw	r2,-8(fp)
   81d40:	1886703a 	and	r3,r3,r2
   81d44:	e0bffc17 	ldw	r2,-16(fp)
   81d48:	10801117 	ldw	r2,68(r2)
   81d4c:	1884983a 	sll	r2,r3,r2
   81d50:	e0fffb17 	ldw	r3,-20(fp)
   81d54:	1885883a 	add	r2,r3,r2
   81d58:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
   81d5c:	e0bffc17 	ldw	r2,-16(fp)
   81d60:	10c01417 	ldw	r3,80(r2)
   81d64:	e0bfff17 	ldw	r2,-4(fp)
   81d68:	1886703a 	and	r3,r3,r2
   81d6c:	e0bffc17 	ldw	r2,-16(fp)
   81d70:	10801317 	ldw	r2,76(r2)
   81d74:	1884983a 	sll	r2,r3,r2
   81d78:	e0fffb17 	ldw	r3,-20(fp)
   81d7c:	1885883a 	add	r2,r3,r2
   81d80:	e0bffb15 	stw	r2,-20(fp)
   81d84:	00001706 	br	81de4 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   81d88:	e0bffc17 	ldw	r2,-16(fp)
   81d8c:	10c01217 	ldw	r3,72(r2)
   81d90:	e0bffe17 	ldw	r2,-8(fp)
   81d94:	1886703a 	and	r3,r3,r2
   81d98:	e0bffc17 	ldw	r2,-16(fp)
   81d9c:	10801117 	ldw	r2,68(r2)
   81da0:	1884983a 	sll	r2,r3,r2
   81da4:	e0fffb17 	ldw	r3,-20(fp)
   81da8:	1885883a 	add	r2,r3,r2
   81dac:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
   81db0:	e0bffc17 	ldw	r2,-16(fp)
   81db4:	10c01417 	ldw	r3,80(r2)
   81db8:	e0bfff17 	ldw	r2,-4(fp)
   81dbc:	1886703a 	and	r3,r3,r2
   81dc0:	e0bffc17 	ldw	r2,-16(fp)
   81dc4:	10800f17 	ldw	r2,60(r2)
   81dc8:	1887383a 	mul	r3,r3,r2
   81dcc:	e0bffc17 	ldw	r2,-16(fp)
   81dd0:	10801117 	ldw	r2,68(r2)
   81dd4:	1884983a 	sll	r2,r3,r2
   81dd8:	e0fffb17 	ldw	r3,-20(fp)
   81ddc:	1885883a 	add	r2,r3,r2
   81de0:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   81de4:	e0bffc17 	ldw	r2,-16(fp)
   81de8:	10800e17 	ldw	r2,56(r2)
   81dec:	10800058 	cmpnei	r2,r2,1
   81df0:	1000081e 	bne	r2,zero,81e14 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   81df4:	e0bffc17 	ldw	r2,-16(fp)
   81df8:	10c00c17 	ldw	r3,48(r2)
   81dfc:	e0bffb17 	ldw	r2,-20(fp)
   81e00:	1885883a 	add	r2,r3,r2
   81e04:	1007883a 	mov	r3,r2
   81e08:	e0bffd17 	ldw	r2,-12(fp)
   81e0c:	18800025 	stbio	r2,0(r3)
   81e10:	00001306 	br	81e60 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   81e14:	e0bffc17 	ldw	r2,-16(fp)
   81e18:	10800e17 	ldw	r2,56(r2)
   81e1c:	10800098 	cmpnei	r2,r2,2
   81e20:	1000081e 	bne	r2,zero,81e44 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   81e24:	e0bffc17 	ldw	r2,-16(fp)
   81e28:	10c00c17 	ldw	r3,48(r2)
   81e2c:	e0bffb17 	ldw	r2,-20(fp)
   81e30:	1885883a 	add	r2,r3,r2
   81e34:	1007883a 	mov	r3,r2
   81e38:	e0bffd17 	ldw	r2,-12(fp)
   81e3c:	1880002d 	sthio	r2,0(r3)
   81e40:	00000706 	br	81e60 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   81e44:	e0bffc17 	ldw	r2,-16(fp)
   81e48:	10c00c17 	ldw	r3,48(r2)
   81e4c:	e0bffb17 	ldw	r2,-20(fp)
   81e50:	1885883a 	add	r2,r3,r2
   81e54:	1007883a 	mov	r3,r2
   81e58:	e0bffd17 	ldw	r2,-12(fp)
   81e5c:	18800035 	stwio	r2,0(r3)
	}

	return 0;
   81e60:	0005883a 	mov	r2,zero
}
   81e64:	e037883a 	mov	sp,fp
   81e68:	df000017 	ldw	fp,0(sp)
   81e6c:	dec00104 	addi	sp,sp,4
   81e70:	f800283a 	ret

00081e74 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
   81e74:	defffd04 	addi	sp,sp,-12
   81e78:	df000215 	stw	fp,8(sp)
   81e7c:	df000204 	addi	fp,sp,8
   81e80:	e13ffe15 	stw	r4,-8(fp)
   81e84:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
   81e88:	e0bffe17 	ldw	r2,-8(fp)
   81e8c:	10800a17 	ldw	r2,40(r2)
   81e90:	10800104 	addi	r2,r2,4
   81e94:	1007883a 	mov	r3,r2
   81e98:	e0bfff17 	ldw	r2,-4(fp)
   81e9c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
   81ea0:	e0bffe17 	ldw	r2,-8(fp)
   81ea4:	10800a17 	ldw	r2,40(r2)
   81ea8:	10800104 	addi	r2,r2,4
   81eac:	10800037 	ldwio	r2,0(r2)
   81eb0:	1007883a 	mov	r3,r2
   81eb4:	e0bffe17 	ldw	r2,-8(fp)
   81eb8:	10c00c15 	stw	r3,48(r2)
	return 0;
   81ebc:	0005883a 	mov	r2,zero
}
   81ec0:	e037883a 	mov	sp,fp
   81ec4:	df000017 	ldw	fp,0(sp)
   81ec8:	dec00104 	addi	sp,sp,4
   81ecc:	f800283a 	ret

00081ed0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
   81ed0:	defffd04 	addi	sp,sp,-12
   81ed4:	df000215 	stw	fp,8(sp)
   81ed8:	dc000115 	stw	r16,4(sp)
   81edc:	df000204 	addi	fp,sp,8
   81ee0:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
   81ee4:	e0bffe17 	ldw	r2,-8(fp)
   81ee8:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
   81eec:	e0bffe17 	ldw	r2,-8(fp)
   81ef0:	10800a17 	ldw	r2,40(r2)
   81ef4:	1007883a 	mov	r3,r2
   81ef8:	00800044 	movi	r2,1
   81efc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
   81f00:	e0bffe17 	ldw	r2,-8(fp)
   81f04:	10c00b17 	ldw	r3,44(r2)
   81f08:	e0bffe17 	ldw	r2,-8(fp)
   81f0c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
   81f10:	e0bffe17 	ldw	r2,-8(fp)
   81f14:	14000b15 	stw	r16,44(r2)
	return 0;
   81f18:	0005883a 	mov	r2,zero
}
   81f1c:	e6ffff04 	addi	sp,fp,-4
   81f20:	df000117 	ldw	fp,4(sp)
   81f24:	dc000017 	ldw	r16,0(sp)
   81f28:	dec00204 	addi	sp,sp,8
   81f2c:	f800283a 	ret

00081f30 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
   81f30:	defffe04 	addi	sp,sp,-8
   81f34:	df000115 	stw	fp,4(sp)
   81f38:	df000104 	addi	fp,sp,4
   81f3c:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
   81f40:	e0bfff17 	ldw	r2,-4(fp)
   81f44:	10800a17 	ldw	r2,40(r2)
   81f48:	10800304 	addi	r2,r2,12
   81f4c:	10800037 	ldwio	r2,0(r2)
   81f50:	1080004c 	andi	r2,r2,1
}
   81f54:	e037883a 	mov	sp,fp
   81f58:	df000017 	ldw	fp,0(sp)
   81f5c:	dec00104 	addi	sp,sp,4
   81f60:	f800283a 	ret

00081f64 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
   81f64:	defff704 	addi	sp,sp,-36
   81f68:	df000815 	stw	fp,32(sp)
   81f6c:	dd400715 	stw	r21,28(sp)
   81f70:	dd000615 	stw	r20,24(sp)
   81f74:	dcc00515 	stw	r19,20(sp)
   81f78:	dc800415 	stw	r18,16(sp)
   81f7c:	dc400315 	stw	r17,12(sp)
   81f80:	dc000215 	stw	r16,8(sp)
   81f84:	df000804 	addi	fp,sp,32
   81f88:	e13ff815 	stw	r4,-32(fp)
   81f8c:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   81f90:	e0bff917 	ldw	r2,-28(fp)
   81f94:	10800058 	cmpnei	r2,r2,1
   81f98:	1000031e 	bne	r2,zero,81fa8 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
   81f9c:	e0bff817 	ldw	r2,-32(fp)
   81fa0:	14400c17 	ldw	r17,48(r2)
   81fa4:	00000206 	br	81fb0 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
   81fa8:	e0bff817 	ldw	r2,-32(fp)
   81fac:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
   81fb0:	e0bff817 	ldw	r2,-32(fp)
   81fb4:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   81fb8:	e0bff817 	ldw	r2,-32(fp)
   81fbc:	10800e17 	ldw	r2,56(r2)
   81fc0:	10800098 	cmpnei	r2,r2,2
   81fc4:	1000031e 	bne	r2,zero,81fd4 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
   81fc8:	8405883a 	add	r2,r16,r16
   81fcc:	1021883a 	mov	r16,r2
   81fd0:	00000306 	br	81fe0 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
   81fd4:	8405883a 	add	r2,r16,r16
   81fd8:	1085883a 	add	r2,r2,r2
   81fdc:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
   81fe0:	e0bff817 	ldw	r2,-32(fp)
   81fe4:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   81fe8:	e0bff817 	ldw	r2,-32(fp)
   81fec:	10800d17 	ldw	r2,52(r2)
   81ff0:	1000111e 	bne	r2,zero,82038 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   81ff4:	e0bff817 	ldw	r2,-32(fp)
   81ff8:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
   81ffc:	0029883a 	mov	r20,zero
   82000:	00000b06 	br	82030 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
   82004:	0027883a 	mov	r19,zero
   82008:	00000406 	br	8201c <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
   8200c:	9c45883a 	add	r2,r19,r17
   82010:	0007883a 	mov	r3,zero
   82014:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   82018:	9cc00104 	addi	r19,r19,4
   8201c:	9c3ffb36 	bltu	r19,r16,8200c <__alt_data_end+0xfffb3e0c>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
   82020:	00800044 	movi	r2,1
   82024:	1544983a 	sll	r2,r2,r21
   82028:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
   8202c:	a5000044 	addi	r20,r20,1
   82030:	a4bff436 	bltu	r20,r18,82004 <__alt_data_end+0xfffb3e04>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   82034:	00000a06 	br	82060 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
   82038:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
   8203c:	0021883a 	mov	r16,zero
   82040:	00000506 	br	82058 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
   82044:	8005883a 	mov	r2,r16
   82048:	1445883a 	add	r2,r2,r17
   8204c:	0007883a 	mov	r3,zero
   82050:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
   82054:	84000104 	addi	r16,r16,4
   82058:	8005883a 	mov	r2,r16
   8205c:	14bff936 	bltu	r2,r18,82044 <__alt_data_end+0xfffb3e44>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   82060:	0001883a 	nop
   82064:	e6fffa04 	addi	sp,fp,-24
   82068:	df000617 	ldw	fp,24(sp)
   8206c:	dd400517 	ldw	r21,20(sp)
   82070:	dd000417 	ldw	r20,16(sp)
   82074:	dcc00317 	ldw	r19,12(sp)
   82078:	dc800217 	ldw	r18,8(sp)
   8207c:	dc400117 	ldw	r17,4(sp)
   82080:	dc000017 	ldw	r16,0(sp)
   82084:	dec00704 	addi	sp,sp,28
   82088:	f800283a 	ret

0008208c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
   8208c:	defff304 	addi	sp,sp,-52
   82090:	df000c15 	stw	fp,48(sp)
   82094:	ddc00b15 	stw	r23,44(sp)
   82098:	dd800a15 	stw	r22,40(sp)
   8209c:	dd400915 	stw	r21,36(sp)
   820a0:	dd000815 	stw	r20,32(sp)
   820a4:	dcc00715 	stw	r19,28(sp)
   820a8:	dc800615 	stw	r18,24(sp)
   820ac:	dc400515 	stw	r17,20(sp)
   820b0:	dc000415 	stw	r16,16(sp)
   820b4:	df000c04 	addi	fp,sp,48
   820b8:	e13ff415 	stw	r4,-48(fp)
   820bc:	e17ff515 	stw	r5,-44(fp)
   820c0:	e1bff615 	stw	r6,-40(fp)
   820c4:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   820c8:	e0bff417 	ldw	r2,-48(fp)
   820cc:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   820d0:	e0bff417 	ldw	r2,-48(fp)
   820d4:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
   820d8:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
   820dc:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
   820e0:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
   820e4:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
   820e8:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   820ec:	a580032e 	bgeu	r20,r22,820fc <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
   820f0:	b02b883a 	mov	r21,r22
		l_x = r_x;
   820f4:	a02d883a 	mov	r22,r20
		r_x = temp;
   820f8:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
   820fc:	9c40032e 	bgeu	r19,r17,8210c <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
   82100:	882b883a 	mov	r21,r17
		t_y = b_y;
   82104:	9823883a 	mov	r17,r19
		b_y = temp;
   82108:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
   8210c:	b480892e 	bgeu	r22,r18,82334 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
   82110:	8c00882e 	bgeu	r17,r16,82334 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   82114:	a4800136 	bltu	r20,r18,8211c <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
   82118:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   8211c:	9c000136 	bltu	r19,r16,82124 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
   82120:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   82124:	e0800317 	ldw	r2,12(fp)
   82128:	10800058 	cmpnei	r2,r2,1
   8212c:	1000031e 	bne	r2,zero,8213c <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
   82130:	e0bff417 	ldw	r2,-48(fp)
   82134:	14000c17 	ldw	r16,48(r2)
   82138:	00000206 	br	82144 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
   8213c:	e0bff417 	ldw	r2,-48(fp)
   82140:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   82144:	e0bff417 	ldw	r2,-48(fp)
   82148:	10800d17 	ldw	r2,52(r2)
   8214c:	10003c1e 	bne	r2,zero,82240 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   82150:	e0bff417 	ldw	r2,-48(fp)
   82154:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
   82158:	8d44983a 	sll	r2,r17,r21
   8215c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   82160:	e0bff417 	ldw	r2,-48(fp)
   82164:	10800e17 	ldw	r2,56(r2)
   82168:	10800058 	cmpnei	r2,r2,1
   8216c:	10000f1e 	bne	r2,zero,821ac <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
   82170:	8825883a 	mov	r18,r17
   82174:	00000b06 	br	821a4 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
   82178:	b023883a 	mov	r17,r22
   8217c:	00000406 	br	82190 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
   82180:	8c05883a 	add	r2,r17,r16
   82184:	b807883a 	mov	r3,r23
   82188:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   8218c:	8c400044 	addi	r17,r17,1
   82190:	a47ffb2e 	bgeu	r20,r17,82180 <__alt_data_end+0xfffb3f80>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
   82194:	00800044 	movi	r2,1
   82198:	1544983a 	sll	r2,r2,r21
   8219c:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   821a0:	94800044 	addi	r18,r18,1
   821a4:	9cbff42e 	bgeu	r19,r18,82178 <__alt_data_end+0xfffb3f78>
   821a8:	00006306 	br	82338 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   821ac:	e0bff417 	ldw	r2,-48(fp)
   821b0:	10800e17 	ldw	r2,56(r2)
   821b4:	10800098 	cmpnei	r2,r2,2
   821b8:	1000101e 	bne	r2,zero,821fc <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
   821bc:	8825883a 	mov	r18,r17
   821c0:	00000c06 	br	821f4 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
   821c4:	b023883a 	mov	r17,r22
   821c8:	00000506 	br	821e0 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   821cc:	8c45883a 	add	r2,r17,r17
   821d0:	1405883a 	add	r2,r2,r16
   821d4:	b807883a 	mov	r3,r23
   821d8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   821dc:	8c400044 	addi	r17,r17,1
   821e0:	a47ffa2e 	bgeu	r20,r17,821cc <__alt_data_end+0xfffb3fcc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
   821e4:	00800044 	movi	r2,1
   821e8:	1544983a 	sll	r2,r2,r21
   821ec:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   821f0:	94800044 	addi	r18,r18,1
   821f4:	9cbff32e 	bgeu	r19,r18,821c4 <__alt_data_end+0xfffb3fc4>
   821f8:	00004f06 	br	82338 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   821fc:	8825883a 	mov	r18,r17
   82200:	00000d06 	br	82238 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
   82204:	b023883a 	mov	r17,r22
   82208:	00000606 	br	82224 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   8220c:	8c45883a 	add	r2,r17,r17
   82210:	1085883a 	add	r2,r2,r2
   82214:	1405883a 	add	r2,r2,r16
   82218:	b807883a 	mov	r3,r23
   8221c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   82220:	8c400044 	addi	r17,r17,1
   82224:	a47ff92e 	bgeu	r20,r17,8220c <__alt_data_end+0xfffb400c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
   82228:	00800044 	movi	r2,1
   8222c:	1544983a 	sll	r2,r2,r21
   82230:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   82234:	94800044 	addi	r18,r18,1
   82238:	9cbff22e 	bgeu	r19,r18,82204 <__alt_data_end+0xfffb4004>
   8223c:	00003e06 	br	82338 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   82240:	e0bff417 	ldw	r2,-48(fp)
   82244:	10800e17 	ldw	r2,56(r2)
   82248:	10800058 	cmpnei	r2,r2,1
   8224c:	10000f1e 	bne	r2,zero,8228c <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
   82250:	8c85383a 	mul	r2,r17,r18
   82254:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   82258:	882b883a 	mov	r21,r17
   8225c:	00000906 	br	82284 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
   82260:	b023883a 	mov	r17,r22
   82264:	00000406 	br	82278 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
   82268:	8c05883a 	add	r2,r17,r16
   8226c:	b807883a 	mov	r3,r23
   82270:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   82274:	8c400044 	addi	r17,r17,1
   82278:	a47ffb2e 	bgeu	r20,r17,82268 <__alt_data_end+0xfffb4068>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
   8227c:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   82280:	ad400044 	addi	r21,r21,1
   82284:	9d7ff62e 	bgeu	r19,r21,82260 <__alt_data_end+0xfffb4060>
   82288:	00002b06 	br	82338 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   8228c:	e0bff417 	ldw	r2,-48(fp)
   82290:	10800e17 	ldw	r2,56(r2)
   82294:	10800098 	cmpnei	r2,r2,2
   82298:	1000121e 	bne	r2,zero,822e4 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
   8229c:	9485883a 	add	r2,r18,r18
   822a0:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
   822a4:	8c85383a 	mul	r2,r17,r18
   822a8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   822ac:	882b883a 	mov	r21,r17
   822b0:	00000a06 	br	822dc <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
   822b4:	b023883a 	mov	r17,r22
   822b8:	00000506 	br	822d0 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   822bc:	8c45883a 	add	r2,r17,r17
   822c0:	1405883a 	add	r2,r2,r16
   822c4:	b807883a 	mov	r3,r23
   822c8:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   822cc:	8c400044 	addi	r17,r17,1
   822d0:	a47ffa2e 	bgeu	r20,r17,822bc <__alt_data_end+0xfffb40bc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   822d4:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   822d8:	ad400044 	addi	r21,r21,1
   822dc:	9d7ff52e 	bgeu	r19,r21,822b4 <__alt_data_end+0xfffb40b4>
   822e0:	00001506 	br	82338 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   822e4:	9485883a 	add	r2,r18,r18
   822e8:	1085883a 	add	r2,r2,r2
   822ec:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
   822f0:	8c85383a 	mul	r2,r17,r18
   822f4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   822f8:	882b883a 	mov	r21,r17
   822fc:	00000b06 	br	8232c <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
   82300:	b023883a 	mov	r17,r22
   82304:	00000606 	br	82320 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   82308:	8c45883a 	add	r2,r17,r17
   8230c:	1085883a 	add	r2,r2,r2
   82310:	1405883a 	add	r2,r2,r16
   82314:	b807883a 	mov	r3,r23
   82318:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   8231c:	8c400044 	addi	r17,r17,1
   82320:	a47ff92e 	bgeu	r20,r17,82308 <__alt_data_end+0xfffb4108>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   82324:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   82328:	ad400044 	addi	r21,r21,1
   8232c:	9d7ff42e 	bgeu	r19,r21,82300 <__alt_data_end+0xfffb4100>
   82330:	00000106 	br	82338 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   82334:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
   82338:	e6fff804 	addi	sp,fp,-32
   8233c:	df000817 	ldw	fp,32(sp)
   82340:	ddc00717 	ldw	r23,28(sp)
   82344:	dd800617 	ldw	r22,24(sp)
   82348:	dd400517 	ldw	r21,20(sp)
   8234c:	dd000417 	ldw	r20,16(sp)
   82350:	dcc00317 	ldw	r19,12(sp)
   82354:	dc800217 	ldw	r18,8(sp)
   82358:	dc400117 	ldw	r17,4(sp)
   8235c:	dc000017 	ldw	r16,0(sp)
   82360:	dec00904 	addi	sp,sp,36
   82364:	f800283a 	ret

00082368 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
   82368:	defff404 	addi	sp,sp,-48
   8236c:	df000b15 	stw	fp,44(sp)
   82370:	dd800a15 	stw	r22,40(sp)
   82374:	dd400915 	stw	r21,36(sp)
   82378:	dd000815 	stw	r20,32(sp)
   8237c:	dcc00715 	stw	r19,28(sp)
   82380:	dc800615 	stw	r18,24(sp)
   82384:	dc400515 	stw	r17,20(sp)
   82388:	dc000415 	stw	r16,16(sp)
   8238c:	df000b04 	addi	fp,sp,44
   82390:	e13ff515 	stw	r4,-44(fp)
   82394:	e17ff615 	stw	r5,-40(fp)
   82398:	e1bff715 	stw	r6,-36(fp)
   8239c:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   823a0:	e0bff517 	ldw	r2,-44(fp)
   823a4:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   823a8:	e0bff517 	ldw	r2,-44(fp)
   823ac:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
   823b0:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
   823b4:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
   823b8:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
   823bc:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   823c0:	9c40032e 	bgeu	r19,r17,823d0 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
   823c4:	882d883a 	mov	r22,r17
		l_x = r_x;
   823c8:	9823883a 	mov	r17,r19
		r_x = temp;
   823cc:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   823d0:	8c805d2e 	bgeu	r17,r18,82548 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
   823d4:	a4005c2e 	bgeu	r20,r16,82548 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   823d8:	9c800136 	bltu	r19,r18,823e0 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
   823dc:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   823e0:	e0800217 	ldw	r2,8(fp)
   823e4:	10800058 	cmpnei	r2,r2,1
   823e8:	1000031e 	bne	r2,zero,823f8 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
   823ec:	e0bff517 	ldw	r2,-44(fp)
   823f0:	14000c17 	ldw	r16,48(r2)
   823f4:	00000206 	br	82400 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
   823f8:	e0bff517 	ldw	r2,-44(fp)
   823fc:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   82400:	e0bff517 	ldw	r2,-44(fp)
   82404:	10800d17 	ldw	r2,52(r2)
   82408:	1000231e 	bne	r2,zero,82498 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   8240c:	e0bff517 	ldw	r2,-44(fp)
   82410:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
   82414:	a484983a 	sll	r2,r20,r18
   82418:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   8241c:	e0bff517 	ldw	r2,-44(fp)
   82420:	10800e17 	ldw	r2,56(r2)
   82424:	10800058 	cmpnei	r2,r2,1
   82428:	1000071e 	bne	r2,zero,82448 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
   8242c:	00000406 	br	82440 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
   82430:	8c05883a 	add	r2,r17,r16
   82434:	a807883a 	mov	r3,r21
   82438:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   8243c:	8c400044 	addi	r17,r17,1
   82440:	9c7ffb2e 	bgeu	r19,r17,82430 <__alt_data_end+0xfffb4230>
   82444:	00004106 	br	8254c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   82448:	e0bff517 	ldw	r2,-44(fp)
   8244c:	10800e17 	ldw	r2,56(r2)
   82450:	10800098 	cmpnei	r2,r2,2
   82454:	10000e1e 	bne	r2,zero,82490 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
   82458:	00000506 	br	82470 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   8245c:	8c45883a 	add	r2,r17,r17
   82460:	1405883a 	add	r2,r2,r16
   82464:	a807883a 	mov	r3,r21
   82468:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   8246c:	8c400044 	addi	r17,r17,1
   82470:	9c7ffa2e 	bgeu	r19,r17,8245c <__alt_data_end+0xfffb425c>
   82474:	00003506 	br	8254c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   82478:	8c45883a 	add	r2,r17,r17
   8247c:	1085883a 	add	r2,r2,r2
   82480:	1405883a 	add	r2,r2,r16
   82484:	a807883a 	mov	r3,r21
   82488:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   8248c:	8c400044 	addi	r17,r17,1
   82490:	9c7ff92e 	bgeu	r19,r17,82478 <__alt_data_end+0xfffb4278>
   82494:	00002d06 	br	8254c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   82498:	e0bff517 	ldw	r2,-44(fp)
   8249c:	10800e17 	ldw	r2,56(r2)
   824a0:	10800058 	cmpnei	r2,r2,1
   824a4:	1000091e 	bne	r2,zero,824cc <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
   824a8:	a485383a 	mul	r2,r20,r18
   824ac:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   824b0:	00000406 	br	824c4 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
   824b4:	8c05883a 	add	r2,r17,r16
   824b8:	a807883a 	mov	r3,r21
   824bc:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   824c0:	8c400044 	addi	r17,r17,1
   824c4:	9c7ffb2e 	bgeu	r19,r17,824b4 <__alt_data_end+0xfffb42b4>
   824c8:	00002006 	br	8254c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   824cc:	e0bff517 	ldw	r2,-44(fp)
   824d0:	10800e17 	ldw	r2,56(r2)
   824d4:	10800098 	cmpnei	r2,r2,2
   824d8:	10000c1e 	bne	r2,zero,8250c <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
   824dc:	9485883a 	add	r2,r18,r18
   824e0:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
   824e4:	a485383a 	mul	r2,r20,r18
   824e8:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   824ec:	00000506 	br	82504 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   824f0:	8c45883a 	add	r2,r17,r17
   824f4:	1405883a 	add	r2,r2,r16
   824f8:	a807883a 	mov	r3,r21
   824fc:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   82500:	8c400044 	addi	r17,r17,1
   82504:	9c7ffa2e 	bgeu	r19,r17,824f0 <__alt_data_end+0xfffb42f0>
   82508:	00001006 	br	8254c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
   8250c:	9485883a 	add	r2,r18,r18
   82510:	1085883a 	add	r2,r2,r2
   82514:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
   82518:	a485383a 	mul	r2,r20,r18
   8251c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   82520:	00000606 	br	8253c <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   82524:	8c45883a 	add	r2,r17,r17
   82528:	1085883a 	add	r2,r2,r2
   8252c:	1405883a 	add	r2,r2,r16
   82530:	a807883a 	mov	r3,r21
   82534:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   82538:	8c400044 	addi	r17,r17,1
   8253c:	9c7ff92e 	bgeu	r19,r17,82524 <__alt_data_end+0xfffb4324>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
   82540:	84a1883a 	add	r16,r16,r18
   82544:	00000106 	br	8254c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   82548:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
   8254c:	e6fff904 	addi	sp,fp,-28
   82550:	df000717 	ldw	fp,28(sp)
   82554:	dd800617 	ldw	r22,24(sp)
   82558:	dd400517 	ldw	r21,20(sp)
   8255c:	dd000417 	ldw	r20,16(sp)
   82560:	dcc00317 	ldw	r19,12(sp)
   82564:	dc800217 	ldw	r18,8(sp)
   82568:	dc400117 	ldw	r17,4(sp)
   8256c:	dc000017 	ldw	r16,0(sp)
   82570:	dec00804 	addi	sp,sp,32
   82574:	f800283a 	ret

00082578 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
   82578:	defff404 	addi	sp,sp,-48
   8257c:	df000b15 	stw	fp,44(sp)
   82580:	dd800a15 	stw	r22,40(sp)
   82584:	dd400915 	stw	r21,36(sp)
   82588:	dd000815 	stw	r20,32(sp)
   8258c:	dcc00715 	stw	r19,28(sp)
   82590:	dc800615 	stw	r18,24(sp)
   82594:	dc400515 	stw	r17,20(sp)
   82598:	dc000415 	stw	r16,16(sp)
   8259c:	df000b04 	addi	fp,sp,44
   825a0:	e13ff515 	stw	r4,-44(fp)
   825a4:	e17ff615 	stw	r5,-40(fp)
   825a8:	e1bff715 	stw	r6,-36(fp)
   825ac:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   825b0:	e0bff517 	ldw	r2,-44(fp)
   825b4:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   825b8:	e0bff517 	ldw	r2,-44(fp)
   825bc:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
   825c0:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
   825c4:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
   825c8:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
   825cc:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
   825d0:	9d00032e 	bgeu	r19,r20,825e0 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
   825d4:	a02b883a 	mov	r21,r20
		t_y = b_y;
   825d8:	9829883a 	mov	r20,r19
		b_y = temp;
   825dc:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   825e0:	94406c2e 	bgeu	r18,r17,82794 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
   825e4:	a4006b2e 	bgeu	r20,r16,82794 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   825e8:	9c000136 	bltu	r19,r16,825f0 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
   825ec:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   825f0:	e0800217 	ldw	r2,8(fp)
   825f4:	10800058 	cmpnei	r2,r2,1
   825f8:	1000031e 	bne	r2,zero,82608 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
   825fc:	e0bff517 	ldw	r2,-44(fp)
   82600:	14000c17 	ldw	r16,48(r2)
   82604:	00000206 	br	82610 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
   82608:	e0bff517 	ldw	r2,-44(fp)
   8260c:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   82610:	e0bff517 	ldw	r2,-44(fp)
   82614:	10800d17 	ldw	r2,52(r2)
   82618:	1000301e 	bne	r2,zero,826dc <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   8261c:	e0bff517 	ldw	r2,-44(fp)
   82620:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
   82624:	a544983a 	sll	r2,r20,r21
   82628:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   8262c:	e0bff517 	ldw	r2,-44(fp)
   82630:	10800e17 	ldw	r2,56(r2)
   82634:	10800058 	cmpnei	r2,r2,1
   82638:	10000b1e 	bne	r2,zero,82668 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
   8263c:	a023883a 	mov	r17,r20
   82640:	00000706 	br	82660 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   82644:	9405883a 	add	r2,r18,r16
   82648:	b007883a 	mov	r3,r22
   8264c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
   82650:	00800044 	movi	r2,1
   82654:	1544983a 	sll	r2,r2,r21
   82658:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   8265c:	8c400044 	addi	r17,r17,1
   82660:	9c7ff82e 	bgeu	r19,r17,82644 <__alt_data_end+0xfffb4444>
   82664:	00004c06 	br	82798 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   82668:	e0bff517 	ldw	r2,-44(fp)
   8266c:	10800e17 	ldw	r2,56(r2)
   82670:	10800098 	cmpnei	r2,r2,2
   82674:	10000c1e 	bne	r2,zero,826a8 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
   82678:	a023883a 	mov	r17,r20
   8267c:	00000806 	br	826a0 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   82680:	9485883a 	add	r2,r18,r18
   82684:	1405883a 	add	r2,r2,r16
   82688:	b007883a 	mov	r3,r22
   8268c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
   82690:	00800044 	movi	r2,1
   82694:	1544983a 	sll	r2,r2,r21
   82698:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   8269c:	8c400044 	addi	r17,r17,1
   826a0:	9c7ff72e 	bgeu	r19,r17,82680 <__alt_data_end+0xfffb4480>
   826a4:	00003c06 	br	82798 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   826a8:	a023883a 	mov	r17,r20
   826ac:	00000906 	br	826d4 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   826b0:	9485883a 	add	r2,r18,r18
   826b4:	1085883a 	add	r2,r2,r2
   826b8:	1405883a 	add	r2,r2,r16
   826bc:	b007883a 	mov	r3,r22
   826c0:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
   826c4:	00800044 	movi	r2,1
   826c8:	1544983a 	sll	r2,r2,r21
   826cc:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   826d0:	8c400044 	addi	r17,r17,1
   826d4:	9c7ff62e 	bgeu	r19,r17,826b0 <__alt_data_end+0xfffb44b0>
   826d8:	00002f06 	br	82798 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   826dc:	e0bff517 	ldw	r2,-44(fp)
   826e0:	10800e17 	ldw	r2,56(r2)
   826e4:	10800058 	cmpnei	r2,r2,1
   826e8:	10000a1e 	bne	r2,zero,82714 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
   826ec:	a445383a 	mul	r2,r20,r17
   826f0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   826f4:	00000506 	br	8270c <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   826f8:	9405883a 	add	r2,r18,r16
   826fc:	b007883a 	mov	r3,r22
   82700:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
   82704:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   82708:	a5000044 	addi	r20,r20,1
   8270c:	9d3ffa2e 	bgeu	r19,r20,826f8 <__alt_data_end+0xfffb44f8>
   82710:	00002106 	br	82798 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   82714:	e0bff517 	ldw	r2,-44(fp)
   82718:	10800e17 	ldw	r2,56(r2)
   8271c:	10800098 	cmpnei	r2,r2,2
   82720:	10000d1e 	bne	r2,zero,82758 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
   82724:	8c45883a 	add	r2,r17,r17
   82728:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
   8272c:	a445383a 	mul	r2,r20,r17
   82730:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   82734:	00000606 	br	82750 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   82738:	9485883a 	add	r2,r18,r18
   8273c:	1405883a 	add	r2,r2,r16
   82740:	b007883a 	mov	r3,r22
   82744:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
   82748:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   8274c:	a5000044 	addi	r20,r20,1
   82750:	9d3ff92e 	bgeu	r19,r20,82738 <__alt_data_end+0xfffb4538>
   82754:	00001006 	br	82798 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   82758:	8c45883a 	add	r2,r17,r17
   8275c:	1085883a 	add	r2,r2,r2
   82760:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
   82764:	a445383a 	mul	r2,r20,r17
   82768:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   8276c:	00000706 	br	8278c <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   82770:	9485883a 	add	r2,r18,r18
   82774:	1085883a 	add	r2,r2,r2
   82778:	1405883a 	add	r2,r2,r16
   8277c:	b007883a 	mov	r3,r22
   82780:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
   82784:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   82788:	a5000044 	addi	r20,r20,1
   8278c:	9d3ff82e 	bgeu	r19,r20,82770 <__alt_data_end+0xfffb4570>
   82790:	00000106 	br	82798 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   82794:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
   82798:	e6fff904 	addi	sp,fp,-28
   8279c:	df000717 	ldw	fp,28(sp)
   827a0:	dd800617 	ldw	r22,24(sp)
   827a4:	dd400517 	ldw	r21,20(sp)
   827a8:	dd000417 	ldw	r20,16(sp)
   827ac:	dcc00317 	ldw	r19,12(sp)
   827b0:	dc800217 	ldw	r18,8(sp)
   827b4:	dc400117 	ldw	r17,4(sp)
   827b8:	dc000017 	ldw	r16,0(sp)
   827bc:	dec00804 	addi	sp,sp,32
   827c0:	f800283a 	ret

000827c4 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   827c4:	defff804 	addi	sp,sp,-32
   827c8:	dfc00715 	stw	ra,28(sp)
   827cc:	df000615 	stw	fp,24(sp)
   827d0:	df000604 	addi	fp,sp,24
   827d4:	e13ffc15 	stw	r4,-16(fp)
   827d8:	e17ffd15 	stw	r5,-12(fp)
   827dc:	e1bffe15 	stw	r6,-8(fp)
   827e0:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   827e4:	e0800417 	ldw	r2,16(fp)
   827e8:	d8800115 	stw	r2,4(sp)
   827ec:	e0800317 	ldw	r2,12(fp)
   827f0:	d8800015 	stw	r2,0(sp)
   827f4:	e1fffe17 	ldw	r7,-8(fp)
   827f8:	e1bfff17 	ldw	r6,-4(fp)
   827fc:	e17ffd17 	ldw	r5,-12(fp)
   82800:	e13ffc17 	ldw	r4,-16(fp)
   82804:	00823680 	call	82368 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   82808:	e0800417 	ldw	r2,16(fp)
   8280c:	d8800115 	stw	r2,4(sp)
   82810:	e0800317 	ldw	r2,12(fp)
   82814:	d8800015 	stw	r2,0(sp)
   82818:	e1c00217 	ldw	r7,8(fp)
   8281c:	e1bfff17 	ldw	r6,-4(fp)
   82820:	e17ffd17 	ldw	r5,-12(fp)
   82824:	e13ffc17 	ldw	r4,-16(fp)
   82828:	00823680 	call	82368 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   8282c:	e0800417 	ldw	r2,16(fp)
   82830:	d8800115 	stw	r2,4(sp)
   82834:	e0800317 	ldw	r2,12(fp)
   82838:	d8800015 	stw	r2,0(sp)
   8283c:	e1c00217 	ldw	r7,8(fp)
   82840:	e1bffe17 	ldw	r6,-8(fp)
   82844:	e17ffd17 	ldw	r5,-12(fp)
   82848:	e13ffc17 	ldw	r4,-16(fp)
   8284c:	00825780 	call	82578 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   82850:	e0800417 	ldw	r2,16(fp)
   82854:	d8800115 	stw	r2,4(sp)
   82858:	e0800317 	ldw	r2,12(fp)
   8285c:	d8800015 	stw	r2,0(sp)
   82860:	e1c00217 	ldw	r7,8(fp)
   82864:	e1bffe17 	ldw	r6,-8(fp)
   82868:	e17fff17 	ldw	r5,-4(fp)
   8286c:	e13ffc17 	ldw	r4,-16(fp)
   82870:	00825780 	call	82578 <alt_up_pixel_buffer_dma_draw_vline>
}
   82874:	0001883a 	nop
   82878:	e037883a 	mov	sp,fp
   8287c:	dfc00117 	ldw	ra,4(sp)
   82880:	df000017 	ldw	fp,0(sp)
   82884:	dec00204 	addi	sp,sp,8
   82888:	f800283a 	ret

0008288c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   8288c:	deffff04 	addi	sp,sp,-4
   82890:	df000015 	stw	fp,0(sp)
   82894:	d839883a 	mov	fp,sp
   82898:	2005883a 	mov	r2,r4
   8289c:	3007883a 	mov	r3,r6
   828a0:	3809883a 	mov	r4,r7
   828a4:	e1800117 	ldw	r6,4(fp)
   828a8:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
   828ac:	3800051e 	bne	r7,zero,828c4 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   828b0:	2909383a 	mul	r4,r5,r4
   828b4:	20c7883a 	add	r3,r4,r3
   828b8:	1885883a 	add	r2,r3,r2
   828bc:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
   828c0:	00000e06 	br	828fc <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
   828c4:	39c00058 	cmpnei	r7,r7,1
   828c8:	3800061e 	bne	r7,zero,828e4 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   828cc:	2909383a 	mul	r4,r5,r4
   828d0:	20c7883a 	add	r3,r4,r3
   828d4:	18c7883a 	add	r3,r3,r3
   828d8:	1885883a 	add	r2,r3,r2
   828dc:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
   828e0:	00000606 	br	828fc <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   828e4:	2909383a 	mul	r4,r5,r4
   828e8:	20c7883a 	add	r3,r4,r3
   828ec:	18c7883a 	add	r3,r3,r3
   828f0:	18c7883a 	add	r3,r3,r3
   828f4:	1885883a 	add	r2,r3,r2
   828f8:	11800035 	stwio	r6,0(r2)
}
   828fc:	0001883a 	nop
   82900:	e037883a 	mov	sp,fp
   82904:	df000017 	ldw	fp,0(sp)
   82908:	dec00104 	addi	sp,sp,4
   8290c:	f800283a 	ret

00082910 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   82910:	deffeb04 	addi	sp,sp,-84
   82914:	dfc01415 	stw	ra,80(sp)
   82918:	df001315 	stw	fp,76(sp)
   8291c:	ddc01215 	stw	r23,72(sp)
   82920:	dd801115 	stw	r22,68(sp)
   82924:	dd401015 	stw	r21,64(sp)
   82928:	dd000f15 	stw	r20,60(sp)
   8292c:	dcc00e15 	stw	r19,56(sp)
   82930:	dc800d15 	stw	r18,52(sp)
   82934:	dc400c15 	stw	r17,48(sp)
   82938:	dc000b15 	stw	r16,44(sp)
   8293c:	df001304 	addi	fp,sp,76
   82940:	e13fef15 	stw	r4,-68(fp)
   82944:	e17ff015 	stw	r5,-64(fp)
   82948:	e1bff115 	stw	r6,-60(fp)
   8294c:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
   82950:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
   82954:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
   82958:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
   8295c:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   82960:	a4c5c83a 	sub	r2,r20,r19
   82964:	1000010e 	bge	r2,zero,8296c <alt_up_pixel_buffer_dma_draw_line+0x5c>
   82968:	0085c83a 	sub	r2,zero,r2
   8296c:	1007883a 	mov	r3,r2
   82970:	9445c83a 	sub	r2,r18,r17
   82974:	1000010e 	bge	r2,zero,8297c <alt_up_pixel_buffer_dma_draw_line+0x6c>
   82978:	0085c83a 	sub	r2,zero,r2
   8297c:	10c4803a 	cmplt	r2,r2,r3
   82980:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
   82984:	e0bfef17 	ldw	r2,-68(fp)
   82988:	10800e17 	ldw	r2,56(r2)
   8298c:	10800060 	cmpeqi	r2,r2,1
   82990:	1000081e 	bne	r2,zero,829b4 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   82994:	e0bfef17 	ldw	r2,-68(fp)
   82998:	10800e17 	ldw	r2,56(r2)
   8299c:	10800098 	cmpnei	r2,r2,2
   829a0:	1000021e 	bne	r2,zero,829ac <alt_up_pixel_buffer_dma_draw_line+0x9c>
   829a4:	00800044 	movi	r2,1
   829a8:	00000306 	br	829b8 <alt_up_pixel_buffer_dma_draw_line+0xa8>
   829ac:	00800084 	movi	r2,2
   829b0:	00000106 	br	829b8 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
   829b4:	0005883a 	mov	r2,zero
   829b8:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
   829bc:	e0800317 	ldw	r2,12(fp)
   829c0:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   829c4:	e0bfef17 	ldw	r2,-68(fp)
   829c8:	10800d17 	ldw	r2,52(r2)
   829cc:	1000071e 	bne	r2,zero,829ec <alt_up_pixel_buffer_dma_draw_line+0xdc>
   829d0:	e0bfef17 	ldw	r2,-68(fp)
   829d4:	10801317 	ldw	r2,76(r2)
   829d8:	e0fff417 	ldw	r3,-48(fp)
   829dc:	10c5c83a 	sub	r2,r2,r3
   829e0:	00c00044 	movi	r3,1
   829e4:	1884983a 	sll	r2,r3,r2
   829e8:	00000206 	br	829f4 <alt_up_pixel_buffer_dma_draw_line+0xe4>
   829ec:	e0bfef17 	ldw	r2,-68(fp)
   829f0:	10800f17 	ldw	r2,60(r2)
   829f4:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
   829f8:	e0800417 	ldw	r2,16(fp)
   829fc:	10800058 	cmpnei	r2,r2,1
   82a00:	1000031e 	bne	r2,zero,82a10 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
   82a04:	e0bfef17 	ldw	r2,-68(fp)
   82a08:	15c00c17 	ldw	r23,48(r2)
   82a0c:	00000206 	br	82a18 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   82a10:	e0bfef17 	ldw	r2,-68(fp)
   82a14:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
   82a18:	e0bff307 	ldb	r2,-52(fp)
   82a1c:	0080060e 	bge	zero,r2,82a38 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
   82a20:	8821883a 	mov	r16,r17
		x_0 = y_0;
   82a24:	9823883a 	mov	r17,r19
		y_0 = error;
   82a28:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
   82a2c:	9021883a 	mov	r16,r18
		x_1 = y_1;
   82a30:	a025883a 	mov	r18,r20
		y_1 = error;
   82a34:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
   82a38:	9440060e 	bge	r18,r17,82a54 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
   82a3c:	8821883a 	mov	r16,r17
		x_0 = x_1;
   82a40:	9023883a 	mov	r17,r18
		x_1 = error;
   82a44:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
   82a48:	9821883a 	mov	r16,r19
		y_0 = y_1;
   82a4c:	a027883a 	mov	r19,r20
		y_1 = error;
   82a50:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   82a54:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
   82a58:	a4c5c83a 	sub	r2,r20,r19
   82a5c:	1000010e 	bge	r2,zero,82a64 <alt_up_pixel_buffer_dma_draw_line+0x154>
   82a60:	0085c83a 	sub	r2,zero,r2
   82a64:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
   82a68:	a804d7fa 	srli	r2,r21,31
   82a6c:	1545883a 	add	r2,r2,r21
   82a70:	1005d07a 	srai	r2,r2,1
   82a74:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
   82a78:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
   82a7c:	9d00020e 	bge	r19,r20,82a88 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
   82a80:	04c00044 	movi	r19,1
   82a84:	00000106 	br	82a8c <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
   82a88:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   82a8c:	e0bff307 	ldb	r2,-52(fp)
   82a90:	10800058 	cmpnei	r2,r2,1
   82a94:	1000211e 	bne	r2,zero,82b1c <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
   82a98:	00000f06 	br	82ad8 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   82a9c:	e0bff417 	ldw	r2,-48(fp)
   82aa0:	d8800115 	stw	r2,4(sp)
   82aa4:	e0bff517 	ldw	r2,-44(fp)
   82aa8:	d8800015 	stw	r2,0(sp)
   82aac:	880f883a 	mov	r7,r17
   82ab0:	b00d883a 	mov	r6,r22
   82ab4:	e17ff617 	ldw	r5,-40(fp)
   82ab8:	b809883a 	mov	r4,r23
   82abc:	008288c0 	call	8288c <helper_plot_pixel>
			error = error + deltay;
   82ac0:	e0bff717 	ldw	r2,-36(fp)
   82ac4:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
   82ac8:	0400020e 	bge	zero,r16,82ad4 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
   82acc:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
   82ad0:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   82ad4:	8c400044 	addi	r17,r17,1
   82ad8:	947ff00e 	bge	r18,r17,82a9c <__alt_data_end+0xfffb489c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   82adc:	00001006 	br	82b20 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   82ae0:	e0bff417 	ldw	r2,-48(fp)
   82ae4:	d8800115 	stw	r2,4(sp)
   82ae8:	e0bff517 	ldw	r2,-44(fp)
   82aec:	d8800015 	stw	r2,0(sp)
   82af0:	b00f883a 	mov	r7,r22
   82af4:	880d883a 	mov	r6,r17
   82af8:	e17ff617 	ldw	r5,-40(fp)
   82afc:	b809883a 	mov	r4,r23
   82b00:	008288c0 	call	8288c <helper_plot_pixel>
			error = error + deltay;
   82b04:	e0bff717 	ldw	r2,-36(fp)
   82b08:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
   82b0c:	0400020e 	bge	zero,r16,82b18 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
   82b10:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
   82b14:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   82b18:	8c400044 	addi	r17,r17,1
   82b1c:	947ff00e 	bge	r18,r17,82ae0 <__alt_data_end+0xfffb48e0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   82b20:	0001883a 	nop
   82b24:	e6fff804 	addi	sp,fp,-32
   82b28:	dfc00917 	ldw	ra,36(sp)
   82b2c:	df000817 	ldw	fp,32(sp)
   82b30:	ddc00717 	ldw	r23,28(sp)
   82b34:	dd800617 	ldw	r22,24(sp)
   82b38:	dd400517 	ldw	r21,20(sp)
   82b3c:	dd000417 	ldw	r20,16(sp)
   82b40:	dcc00317 	ldw	r19,12(sp)
   82b44:	dc800217 	ldw	r18,8(sp)
   82b48:	dc400117 	ldw	r17,4(sp)
   82b4c:	dc000017 	ldw	r16,0(sp)
   82b50:	dec00a04 	addi	sp,sp,40
   82b54:	f800283a 	ret

00082b58 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   82b58:	defff504 	addi	sp,sp,-44
   82b5c:	df000a15 	stw	fp,40(sp)
   82b60:	df000a04 	addi	fp,sp,40
   82b64:	e13ffc15 	stw	r4,-16(fp)
   82b68:	e17ffd15 	stw	r5,-12(fp)
   82b6c:	e1bffe15 	stw	r6,-8(fp)
   82b70:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   82b74:	e03ff615 	stw	zero,-40(fp)
   82b78:	00800234 	movhi	r2,8
   82b7c:	10994a04 	addi	r2,r2,25896
   82b80:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   82b84:	10003f26 	beq	r2,zero,82c84 <alt_alarm_start+0x12c>
  {
    if (alarm)
   82b88:	e0bffc17 	ldw	r2,-16(fp)
   82b8c:	10003b26 	beq	r2,zero,82c7c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   82b90:	e0bffc17 	ldw	r2,-16(fp)
   82b94:	e0fffe17 	ldw	r3,-8(fp)
   82b98:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   82b9c:	e0bffc17 	ldw	r2,-16(fp)
   82ba0:	e0ffff17 	ldw	r3,-4(fp)
   82ba4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82ba8:	0005303a 	rdctl	r2,status
   82bac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82bb0:	e0fff917 	ldw	r3,-28(fp)
   82bb4:	00bfff84 	movi	r2,-2
   82bb8:	1884703a 	and	r2,r3,r2
   82bbc:	1001703a 	wrctl	status,r2
  
  return context;
   82bc0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   82bc4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   82bc8:	00800234 	movhi	r2,8
   82bcc:	10994b04 	addi	r2,r2,25900
   82bd0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   82bd4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   82bd8:	e0fffd17 	ldw	r3,-12(fp)
   82bdc:	e0bff617 	ldw	r2,-40(fp)
   82be0:	1885883a 	add	r2,r3,r2
   82be4:	10c00044 	addi	r3,r2,1
   82be8:	e0bffc17 	ldw	r2,-16(fp)
   82bec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   82bf0:	e0bffc17 	ldw	r2,-16(fp)
   82bf4:	10c00217 	ldw	r3,8(r2)
   82bf8:	e0bff617 	ldw	r2,-40(fp)
   82bfc:	1880042e 	bgeu	r3,r2,82c10 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   82c00:	e0bffc17 	ldw	r2,-16(fp)
   82c04:	00c00044 	movi	r3,1
   82c08:	10c00405 	stb	r3,16(r2)
   82c0c:	00000206 	br	82c18 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   82c10:	e0bffc17 	ldw	r2,-16(fp)
   82c14:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   82c18:	e0fffc17 	ldw	r3,-16(fp)
   82c1c:	00800234 	movhi	r2,8
   82c20:	10945104 	addi	r2,r2,20804
   82c24:	e0bffa15 	stw	r2,-24(fp)
   82c28:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   82c2c:	e0bffb17 	ldw	r2,-20(fp)
   82c30:	e0fffa17 	ldw	r3,-24(fp)
   82c34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   82c38:	e0bffa17 	ldw	r2,-24(fp)
   82c3c:	10c00017 	ldw	r3,0(r2)
   82c40:	e0bffb17 	ldw	r2,-20(fp)
   82c44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   82c48:	e0bffa17 	ldw	r2,-24(fp)
   82c4c:	10800017 	ldw	r2,0(r2)
   82c50:	e0fffb17 	ldw	r3,-20(fp)
   82c54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   82c58:	e0bffa17 	ldw	r2,-24(fp)
   82c5c:	e0fffb17 	ldw	r3,-20(fp)
   82c60:	10c00015 	stw	r3,0(r2)
   82c64:	e0bff817 	ldw	r2,-32(fp)
   82c68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82c6c:	e0bff717 	ldw	r2,-36(fp)
   82c70:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   82c74:	0005883a 	mov	r2,zero
   82c78:	00000306 	br	82c88 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   82c7c:	00bffa84 	movi	r2,-22
   82c80:	00000106 	br	82c88 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   82c84:	00bfde84 	movi	r2,-134
  }
}
   82c88:	e037883a 	mov	sp,fp
   82c8c:	df000017 	ldw	fp,0(sp)
   82c90:	dec00104 	addi	sp,sp,4
   82c94:	f800283a 	ret

00082c98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82c98:	defffe04 	addi	sp,sp,-8
   82c9c:	dfc00115 	stw	ra,4(sp)
   82ca0:	df000015 	stw	fp,0(sp)
   82ca4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82ca8:	00800234 	movhi	r2,8
   82cac:	10944f04 	addi	r2,r2,20796
   82cb0:	10800017 	ldw	r2,0(r2)
   82cb4:	10000526 	beq	r2,zero,82ccc <alt_get_errno+0x34>
   82cb8:	00800234 	movhi	r2,8
   82cbc:	10944f04 	addi	r2,r2,20796
   82cc0:	10800017 	ldw	r2,0(r2)
   82cc4:	103ee83a 	callr	r2
   82cc8:	00000206 	br	82cd4 <alt_get_errno+0x3c>
   82ccc:	00800234 	movhi	r2,8
   82cd0:	10994504 	addi	r2,r2,25876
}
   82cd4:	e037883a 	mov	sp,fp
   82cd8:	dfc00117 	ldw	ra,4(sp)
   82cdc:	df000017 	ldw	fp,0(sp)
   82ce0:	dec00204 	addi	sp,sp,8
   82ce4:	f800283a 	ret

00082ce8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   82ce8:	defffb04 	addi	sp,sp,-20
   82cec:	dfc00415 	stw	ra,16(sp)
   82cf0:	df000315 	stw	fp,12(sp)
   82cf4:	df000304 	addi	fp,sp,12
   82cf8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   82cfc:	e0bfff17 	ldw	r2,-4(fp)
   82d00:	10000616 	blt	r2,zero,82d1c <close+0x34>
   82d04:	e0bfff17 	ldw	r2,-4(fp)
   82d08:	10c00324 	muli	r3,r2,12
   82d0c:	00800234 	movhi	r2,8
   82d10:	1093e804 	addi	r2,r2,20384
   82d14:	1885883a 	add	r2,r3,r2
   82d18:	00000106 	br	82d20 <close+0x38>
   82d1c:	0005883a 	mov	r2,zero
   82d20:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   82d24:	e0bffd17 	ldw	r2,-12(fp)
   82d28:	10001926 	beq	r2,zero,82d90 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   82d2c:	e0bffd17 	ldw	r2,-12(fp)
   82d30:	10800017 	ldw	r2,0(r2)
   82d34:	10800417 	ldw	r2,16(r2)
   82d38:	10000626 	beq	r2,zero,82d54 <close+0x6c>
   82d3c:	e0bffd17 	ldw	r2,-12(fp)
   82d40:	10800017 	ldw	r2,0(r2)
   82d44:	10800417 	ldw	r2,16(r2)
   82d48:	e13ffd17 	ldw	r4,-12(fp)
   82d4c:	103ee83a 	callr	r2
   82d50:	00000106 	br	82d58 <close+0x70>
   82d54:	0005883a 	mov	r2,zero
   82d58:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   82d5c:	e13fff17 	ldw	r4,-4(fp)
   82d60:	00835480 	call	83548 <alt_release_fd>
    if (rval < 0)
   82d64:	e0bffe17 	ldw	r2,-8(fp)
   82d68:	1000070e 	bge	r2,zero,82d88 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   82d6c:	0082c980 	call	82c98 <alt_get_errno>
   82d70:	1007883a 	mov	r3,r2
   82d74:	e0bffe17 	ldw	r2,-8(fp)
   82d78:	0085c83a 	sub	r2,zero,r2
   82d7c:	18800015 	stw	r2,0(r3)
      return -1;
   82d80:	00bfffc4 	movi	r2,-1
   82d84:	00000706 	br	82da4 <close+0xbc>
    }
    return 0;
   82d88:	0005883a 	mov	r2,zero
   82d8c:	00000506 	br	82da4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   82d90:	0082c980 	call	82c98 <alt_get_errno>
   82d94:	1007883a 	mov	r3,r2
   82d98:	00801444 	movi	r2,81
   82d9c:	18800015 	stw	r2,0(r3)
    return -1;
   82da0:	00bfffc4 	movi	r2,-1
  }
}
   82da4:	e037883a 	mov	sp,fp
   82da8:	dfc00117 	ldw	ra,4(sp)
   82dac:	df000017 	ldw	fp,0(sp)
   82db0:	dec00204 	addi	sp,sp,8
   82db4:	f800283a 	ret

00082db8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   82db8:	defffe04 	addi	sp,sp,-8
   82dbc:	df000115 	stw	fp,4(sp)
   82dc0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   82dc4:	e03fff15 	stw	zero,-4(fp)
   82dc8:	00000506 	br	82de0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   82dcc:	e0bfff17 	ldw	r2,-4(fp)
   82dd0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   82dd4:	e0bfff17 	ldw	r2,-4(fp)
   82dd8:	10800804 	addi	r2,r2,32
   82ddc:	e0bfff15 	stw	r2,-4(fp)
   82de0:	e0bfff17 	ldw	r2,-4(fp)
   82de4:	10820030 	cmpltui	r2,r2,2048
   82de8:	103ff81e 	bne	r2,zero,82dcc <__alt_data_end+0xfffb4bcc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   82dec:	0001883a 	nop
   82df0:	e037883a 	mov	sp,fp
   82df4:	df000017 	ldw	fp,0(sp)
   82df8:	dec00104 	addi	sp,sp,4
   82dfc:	f800283a 	ret

00082e00 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   82e00:	defffc04 	addi	sp,sp,-16
   82e04:	df000315 	stw	fp,12(sp)
   82e08:	df000304 	addi	fp,sp,12
   82e0c:	e13ffd15 	stw	r4,-12(fp)
   82e10:	e17ffe15 	stw	r5,-8(fp)
   82e14:	e1bfff15 	stw	r6,-4(fp)
  return len;
   82e18:	e0bfff17 	ldw	r2,-4(fp)
}
   82e1c:	e037883a 	mov	sp,fp
   82e20:	df000017 	ldw	fp,0(sp)
   82e24:	dec00104 	addi	sp,sp,4
   82e28:	f800283a 	ret

00082e2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82e2c:	defffe04 	addi	sp,sp,-8
   82e30:	dfc00115 	stw	ra,4(sp)
   82e34:	df000015 	stw	fp,0(sp)
   82e38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82e3c:	00800234 	movhi	r2,8
   82e40:	10944f04 	addi	r2,r2,20796
   82e44:	10800017 	ldw	r2,0(r2)
   82e48:	10000526 	beq	r2,zero,82e60 <alt_get_errno+0x34>
   82e4c:	00800234 	movhi	r2,8
   82e50:	10944f04 	addi	r2,r2,20796
   82e54:	10800017 	ldw	r2,0(r2)
   82e58:	103ee83a 	callr	r2
   82e5c:	00000206 	br	82e68 <alt_get_errno+0x3c>
   82e60:	00800234 	movhi	r2,8
   82e64:	10994504 	addi	r2,r2,25876
}
   82e68:	e037883a 	mov	sp,fp
   82e6c:	dfc00117 	ldw	ra,4(sp)
   82e70:	df000017 	ldw	fp,0(sp)
   82e74:	dec00204 	addi	sp,sp,8
   82e78:	f800283a 	ret

00082e7c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   82e7c:	defffa04 	addi	sp,sp,-24
   82e80:	dfc00515 	stw	ra,20(sp)
   82e84:	df000415 	stw	fp,16(sp)
   82e88:	df000404 	addi	fp,sp,16
   82e8c:	e13ffe15 	stw	r4,-8(fp)
   82e90:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   82e94:	e0bffe17 	ldw	r2,-8(fp)
   82e98:	10000326 	beq	r2,zero,82ea8 <alt_dev_llist_insert+0x2c>
   82e9c:	e0bffe17 	ldw	r2,-8(fp)
   82ea0:	10800217 	ldw	r2,8(r2)
   82ea4:	1000061e 	bne	r2,zero,82ec0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   82ea8:	0082e2c0 	call	82e2c <alt_get_errno>
   82eac:	1007883a 	mov	r3,r2
   82eb0:	00800584 	movi	r2,22
   82eb4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   82eb8:	00bffa84 	movi	r2,-22
   82ebc:	00001306 	br	82f0c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   82ec0:	e0bffe17 	ldw	r2,-8(fp)
   82ec4:	e0ffff17 	ldw	r3,-4(fp)
   82ec8:	e0fffc15 	stw	r3,-16(fp)
   82ecc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   82ed0:	e0bffd17 	ldw	r2,-12(fp)
   82ed4:	e0fffc17 	ldw	r3,-16(fp)
   82ed8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   82edc:	e0bffc17 	ldw	r2,-16(fp)
   82ee0:	10c00017 	ldw	r3,0(r2)
   82ee4:	e0bffd17 	ldw	r2,-12(fp)
   82ee8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   82eec:	e0bffc17 	ldw	r2,-16(fp)
   82ef0:	10800017 	ldw	r2,0(r2)
   82ef4:	e0fffd17 	ldw	r3,-12(fp)
   82ef8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   82efc:	e0bffc17 	ldw	r2,-16(fp)
   82f00:	e0fffd17 	ldw	r3,-12(fp)
   82f04:	10c00015 	stw	r3,0(r2)

  return 0;  
   82f08:	0005883a 	mov	r2,zero
}
   82f0c:	e037883a 	mov	sp,fp
   82f10:	dfc00117 	ldw	ra,4(sp)
   82f14:	df000017 	ldw	fp,0(sp)
   82f18:	dec00204 	addi	sp,sp,8
   82f1c:	f800283a 	ret

00082f20 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   82f20:	defffa04 	addi	sp,sp,-24
   82f24:	dfc00515 	stw	ra,20(sp)
   82f28:	df000415 	stw	fp,16(sp)
   82f2c:	df000404 	addi	fp,sp,16
   82f30:	e13ffe15 	stw	r4,-8(fp)
   82f34:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   82f38:	e0bfff17 	ldw	r2,-4(fp)
   82f3c:	10800017 	ldw	r2,0(r2)
   82f40:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   82f44:	e13ffe17 	ldw	r4,-8(fp)
   82f48:	00804540 	call	80454 <strlen>
   82f4c:	10800044 	addi	r2,r2,1
   82f50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   82f54:	00000d06 	br	82f8c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   82f58:	e0bffc17 	ldw	r2,-16(fp)
   82f5c:	10800217 	ldw	r2,8(r2)
   82f60:	e0fffd17 	ldw	r3,-12(fp)
   82f64:	180d883a 	mov	r6,r3
   82f68:	e17ffe17 	ldw	r5,-8(fp)
   82f6c:	1009883a 	mov	r4,r2
   82f70:	0083a880 	call	83a88 <memcmp>
   82f74:	1000021e 	bne	r2,zero,82f80 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   82f78:	e0bffc17 	ldw	r2,-16(fp)
   82f7c:	00000706 	br	82f9c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   82f80:	e0bffc17 	ldw	r2,-16(fp)
   82f84:	10800017 	ldw	r2,0(r2)
   82f88:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   82f8c:	e0fffc17 	ldw	r3,-16(fp)
   82f90:	e0bfff17 	ldw	r2,-4(fp)
   82f94:	18bff01e 	bne	r3,r2,82f58 <__alt_data_end+0xfffb4d58>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   82f98:	0005883a 	mov	r2,zero
}
   82f9c:	e037883a 	mov	sp,fp
   82fa0:	dfc00117 	ldw	ra,4(sp)
   82fa4:	df000017 	ldw	fp,0(sp)
   82fa8:	dec00204 	addi	sp,sp,8
   82fac:	f800283a 	ret

00082fb0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   82fb0:	defffe04 	addi	sp,sp,-8
   82fb4:	dfc00115 	stw	ra,4(sp)
   82fb8:	df000015 	stw	fp,0(sp)
   82fbc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   82fc0:	01440004 	movi	r5,4096
   82fc4:	0009883a 	mov	r4,zero
   82fc8:	008393c0 	call	8393c <alt_icache_flush>
#endif
}
   82fcc:	0001883a 	nop
   82fd0:	e037883a 	mov	sp,fp
   82fd4:	dfc00117 	ldw	ra,4(sp)
   82fd8:	df000017 	ldw	fp,0(sp)
   82fdc:	dec00204 	addi	sp,sp,8
   82fe0:	f800283a 	ret

00082fe4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   82fe4:	defff904 	addi	sp,sp,-28
   82fe8:	dfc00615 	stw	ra,24(sp)
   82fec:	df000515 	stw	fp,20(sp)
   82ff0:	df000504 	addi	fp,sp,20
   82ff4:	e13ffc15 	stw	r4,-16(fp)
   82ff8:	e17ffd15 	stw	r5,-12(fp)
   82ffc:	e1bffe15 	stw	r6,-8(fp)
   83000:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   83004:	e1bfff17 	ldw	r6,-4(fp)
   83008:	e17ffe17 	ldw	r5,-8(fp)
   8300c:	e13ffd17 	ldw	r4,-12(fp)
   83010:	00833f00 	call	833f0 <open>
   83014:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   83018:	e0bffb17 	ldw	r2,-20(fp)
   8301c:	10001c16 	blt	r2,zero,83090 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   83020:	00800234 	movhi	r2,8
   83024:	1093e804 	addi	r2,r2,20384
   83028:	e0fffb17 	ldw	r3,-20(fp)
   8302c:	18c00324 	muli	r3,r3,12
   83030:	10c5883a 	add	r2,r2,r3
   83034:	10c00017 	ldw	r3,0(r2)
   83038:	e0bffc17 	ldw	r2,-16(fp)
   8303c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   83040:	00800234 	movhi	r2,8
   83044:	1093e804 	addi	r2,r2,20384
   83048:	e0fffb17 	ldw	r3,-20(fp)
   8304c:	18c00324 	muli	r3,r3,12
   83050:	10c5883a 	add	r2,r2,r3
   83054:	10800104 	addi	r2,r2,4
   83058:	10c00017 	ldw	r3,0(r2)
   8305c:	e0bffc17 	ldw	r2,-16(fp)
   83060:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   83064:	00800234 	movhi	r2,8
   83068:	1093e804 	addi	r2,r2,20384
   8306c:	e0fffb17 	ldw	r3,-20(fp)
   83070:	18c00324 	muli	r3,r3,12
   83074:	10c5883a 	add	r2,r2,r3
   83078:	10800204 	addi	r2,r2,8
   8307c:	10c00017 	ldw	r3,0(r2)
   83080:	e0bffc17 	ldw	r2,-16(fp)
   83084:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   83088:	e13ffb17 	ldw	r4,-20(fp)
   8308c:	00835480 	call	83548 <alt_release_fd>
  }
} 
   83090:	0001883a 	nop
   83094:	e037883a 	mov	sp,fp
   83098:	dfc00117 	ldw	ra,4(sp)
   8309c:	df000017 	ldw	fp,0(sp)
   830a0:	dec00204 	addi	sp,sp,8
   830a4:	f800283a 	ret

000830a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   830a8:	defffb04 	addi	sp,sp,-20
   830ac:	dfc00415 	stw	ra,16(sp)
   830b0:	df000315 	stw	fp,12(sp)
   830b4:	df000304 	addi	fp,sp,12
   830b8:	e13ffd15 	stw	r4,-12(fp)
   830bc:	e17ffe15 	stw	r5,-8(fp)
   830c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   830c4:	01c07fc4 	movi	r7,511
   830c8:	01800044 	movi	r6,1
   830cc:	e17ffd17 	ldw	r5,-12(fp)
   830d0:	01000234 	movhi	r4,8
   830d4:	2113eb04 	addi	r4,r4,20396
   830d8:	0082fe40 	call	82fe4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   830dc:	01c07fc4 	movi	r7,511
   830e0:	000d883a 	mov	r6,zero
   830e4:	e17ffe17 	ldw	r5,-8(fp)
   830e8:	01000234 	movhi	r4,8
   830ec:	2113e804 	addi	r4,r4,20384
   830f0:	0082fe40 	call	82fe4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   830f4:	01c07fc4 	movi	r7,511
   830f8:	01800044 	movi	r6,1
   830fc:	e17fff17 	ldw	r5,-4(fp)
   83100:	01000234 	movhi	r4,8
   83104:	2113ee04 	addi	r4,r4,20408
   83108:	0082fe40 	call	82fe4 <alt_open_fd>
}  
   8310c:	0001883a 	nop
   83110:	e037883a 	mov	sp,fp
   83114:	dfc00117 	ldw	ra,4(sp)
   83118:	df000017 	ldw	fp,0(sp)
   8311c:	dec00204 	addi	sp,sp,8
   83120:	f800283a 	ret

00083124 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   83124:	defff004 	addi	sp,sp,-64
   83128:	df000f15 	stw	fp,60(sp)
   8312c:	df000f04 	addi	fp,sp,60
   83130:	e13ffd15 	stw	r4,-12(fp)
   83134:	e17ffe15 	stw	r5,-8(fp)
   83138:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   8313c:	00bffa84 	movi	r2,-22
   83140:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   83144:	e0bffd17 	ldw	r2,-12(fp)
   83148:	10800828 	cmpgeui	r2,r2,32
   8314c:	10005c1e 	bne	r2,zero,832c0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83150:	0005303a 	rdctl	r2,status
   83154:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83158:	e0fff617 	ldw	r3,-40(fp)
   8315c:	00bfff84 	movi	r2,-2
   83160:	1884703a 	and	r2,r3,r2
   83164:	1001703a 	wrctl	status,r2
  
  return context;
   83168:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8316c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   83170:	00800234 	movhi	r2,8
   83174:	10994d04 	addi	r2,r2,25908
   83178:	e0fffd17 	ldw	r3,-12(fp)
   8317c:	180690fa 	slli	r3,r3,3
   83180:	10c5883a 	add	r2,r2,r3
   83184:	e0ffff17 	ldw	r3,-4(fp)
   83188:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   8318c:	00800234 	movhi	r2,8
   83190:	10994d04 	addi	r2,r2,25908
   83194:	e0fffd17 	ldw	r3,-12(fp)
   83198:	180690fa 	slli	r3,r3,3
   8319c:	10c5883a 	add	r2,r2,r3
   831a0:	10800104 	addi	r2,r2,4
   831a4:	e0fffe17 	ldw	r3,-8(fp)
   831a8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   831ac:	e0bfff17 	ldw	r2,-4(fp)
   831b0:	10001f26 	beq	r2,zero,83230 <alt_irq_register+0x10c>
   831b4:	e0bffd17 	ldw	r2,-12(fp)
   831b8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   831bc:	0005303a 	rdctl	r2,status
   831c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   831c4:	e0fff717 	ldw	r3,-36(fp)
   831c8:	00bfff84 	movi	r2,-2
   831cc:	1884703a 	and	r2,r3,r2
   831d0:	1001703a 	wrctl	status,r2
  
  return context;
   831d4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   831d8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   831dc:	00c00044 	movi	r3,1
   831e0:	e0bff217 	ldw	r2,-56(fp)
   831e4:	1884983a 	sll	r2,r3,r2
   831e8:	1007883a 	mov	r3,r2
   831ec:	00800234 	movhi	r2,8
   831f0:	10994904 	addi	r2,r2,25892
   831f4:	10800017 	ldw	r2,0(r2)
   831f8:	1886b03a 	or	r3,r3,r2
   831fc:	00800234 	movhi	r2,8
   83200:	10994904 	addi	r2,r2,25892
   83204:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   83208:	00800234 	movhi	r2,8
   8320c:	10994904 	addi	r2,r2,25892
   83210:	10800017 	ldw	r2,0(r2)
   83214:	100170fa 	wrctl	ienable,r2
   83218:	e0bff817 	ldw	r2,-32(fp)
   8321c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83220:	e0bff917 	ldw	r2,-28(fp)
   83224:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   83228:	0005883a 	mov	r2,zero
   8322c:	00001f06 	br	832ac <alt_irq_register+0x188>
   83230:	e0bffd17 	ldw	r2,-12(fp)
   83234:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83238:	0005303a 	rdctl	r2,status
   8323c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83240:	e0fffa17 	ldw	r3,-24(fp)
   83244:	00bfff84 	movi	r2,-2
   83248:	1884703a 	and	r2,r3,r2
   8324c:	1001703a 	wrctl	status,r2
  
  return context;
   83250:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   83254:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   83258:	00c00044 	movi	r3,1
   8325c:	e0bff417 	ldw	r2,-48(fp)
   83260:	1884983a 	sll	r2,r3,r2
   83264:	0084303a 	nor	r2,zero,r2
   83268:	1007883a 	mov	r3,r2
   8326c:	00800234 	movhi	r2,8
   83270:	10994904 	addi	r2,r2,25892
   83274:	10800017 	ldw	r2,0(r2)
   83278:	1886703a 	and	r3,r3,r2
   8327c:	00800234 	movhi	r2,8
   83280:	10994904 	addi	r2,r2,25892
   83284:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   83288:	00800234 	movhi	r2,8
   8328c:	10994904 	addi	r2,r2,25892
   83290:	10800017 	ldw	r2,0(r2)
   83294:	100170fa 	wrctl	ienable,r2
   83298:	e0bffb17 	ldw	r2,-20(fp)
   8329c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   832a0:	e0bffc17 	ldw	r2,-16(fp)
   832a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   832a8:	0005883a 	mov	r2,zero
   832ac:	e0bff115 	stw	r2,-60(fp)
   832b0:	e0bff317 	ldw	r2,-52(fp)
   832b4:	e0bff515 	stw	r2,-44(fp)
   832b8:	e0bff517 	ldw	r2,-44(fp)
   832bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   832c0:	e0bff117 	ldw	r2,-60(fp)
}
   832c4:	e037883a 	mov	sp,fp
   832c8:	df000017 	ldw	fp,0(sp)
   832cc:	dec00104 	addi	sp,sp,4
   832d0:	f800283a 	ret

000832d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   832d4:	defffe04 	addi	sp,sp,-8
   832d8:	dfc00115 	stw	ra,4(sp)
   832dc:	df000015 	stw	fp,0(sp)
   832e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   832e4:	00800234 	movhi	r2,8
   832e8:	10944f04 	addi	r2,r2,20796
   832ec:	10800017 	ldw	r2,0(r2)
   832f0:	10000526 	beq	r2,zero,83308 <alt_get_errno+0x34>
   832f4:	00800234 	movhi	r2,8
   832f8:	10944f04 	addi	r2,r2,20796
   832fc:	10800017 	ldw	r2,0(r2)
   83300:	103ee83a 	callr	r2
   83304:	00000206 	br	83310 <alt_get_errno+0x3c>
   83308:	00800234 	movhi	r2,8
   8330c:	10994504 	addi	r2,r2,25876
}
   83310:	e037883a 	mov	sp,fp
   83314:	dfc00117 	ldw	ra,4(sp)
   83318:	df000017 	ldw	fp,0(sp)
   8331c:	dec00204 	addi	sp,sp,8
   83320:	f800283a 	ret

00083324 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   83324:	defffd04 	addi	sp,sp,-12
   83328:	df000215 	stw	fp,8(sp)
   8332c:	df000204 	addi	fp,sp,8
   83330:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   83334:	e0bfff17 	ldw	r2,-4(fp)
   83338:	10800217 	ldw	r2,8(r2)
   8333c:	10d00034 	orhi	r3,r2,16384
   83340:	e0bfff17 	ldw	r2,-4(fp)
   83344:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   83348:	e03ffe15 	stw	zero,-8(fp)
   8334c:	00001d06 	br	833c4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   83350:	00800234 	movhi	r2,8
   83354:	1093e804 	addi	r2,r2,20384
   83358:	e0fffe17 	ldw	r3,-8(fp)
   8335c:	18c00324 	muli	r3,r3,12
   83360:	10c5883a 	add	r2,r2,r3
   83364:	10c00017 	ldw	r3,0(r2)
   83368:	e0bfff17 	ldw	r2,-4(fp)
   8336c:	10800017 	ldw	r2,0(r2)
   83370:	1880111e 	bne	r3,r2,833b8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   83374:	00800234 	movhi	r2,8
   83378:	1093e804 	addi	r2,r2,20384
   8337c:	e0fffe17 	ldw	r3,-8(fp)
   83380:	18c00324 	muli	r3,r3,12
   83384:	10c5883a 	add	r2,r2,r3
   83388:	10800204 	addi	r2,r2,8
   8338c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   83390:	1000090e 	bge	r2,zero,833b8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   83394:	e0bffe17 	ldw	r2,-8(fp)
   83398:	10c00324 	muli	r3,r2,12
   8339c:	00800234 	movhi	r2,8
   833a0:	1093e804 	addi	r2,r2,20384
   833a4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   833a8:	e0bfff17 	ldw	r2,-4(fp)
   833ac:	18800226 	beq	r3,r2,833b8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   833b0:	00bffcc4 	movi	r2,-13
   833b4:	00000a06 	br	833e0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   833b8:	e0bffe17 	ldw	r2,-8(fp)
   833bc:	10800044 	addi	r2,r2,1
   833c0:	e0bffe15 	stw	r2,-8(fp)
   833c4:	00800234 	movhi	r2,8
   833c8:	10944e04 	addi	r2,r2,20792
   833cc:	10800017 	ldw	r2,0(r2)
   833d0:	1007883a 	mov	r3,r2
   833d4:	e0bffe17 	ldw	r2,-8(fp)
   833d8:	18bfdd2e 	bgeu	r3,r2,83350 <__alt_data_end+0xfffb5150>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   833dc:	0005883a 	mov	r2,zero
}
   833e0:	e037883a 	mov	sp,fp
   833e4:	df000017 	ldw	fp,0(sp)
   833e8:	dec00104 	addi	sp,sp,4
   833ec:	f800283a 	ret

000833f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   833f0:	defff604 	addi	sp,sp,-40
   833f4:	dfc00915 	stw	ra,36(sp)
   833f8:	df000815 	stw	fp,32(sp)
   833fc:	df000804 	addi	fp,sp,32
   83400:	e13ffd15 	stw	r4,-12(fp)
   83404:	e17ffe15 	stw	r5,-8(fp)
   83408:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8340c:	00bfffc4 	movi	r2,-1
   83410:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   83414:	00bffb44 	movi	r2,-19
   83418:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   8341c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   83420:	01400234 	movhi	r5,8
   83424:	29544c04 	addi	r5,r5,20784
   83428:	e13ffd17 	ldw	r4,-12(fp)
   8342c:	0082f200 	call	82f20 <alt_find_dev>
   83430:	e0bff815 	stw	r2,-32(fp)
   83434:	e0bff817 	ldw	r2,-32(fp)
   83438:	1000051e 	bne	r2,zero,83450 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8343c:	e13ffd17 	ldw	r4,-12(fp)
   83440:	00837740 	call	83774 <alt_find_file>
   83444:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   83448:	00800044 	movi	r2,1
   8344c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   83450:	e0bff817 	ldw	r2,-32(fp)
   83454:	10002926 	beq	r2,zero,834fc <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   83458:	e13ff817 	ldw	r4,-32(fp)
   8345c:	00838880 	call	83888 <alt_get_fd>
   83460:	e0bff915 	stw	r2,-28(fp)
   83464:	e0bff917 	ldw	r2,-28(fp)
   83468:	1000030e 	bge	r2,zero,83478 <open+0x88>
    {
      status = index;
   8346c:	e0bff917 	ldw	r2,-28(fp)
   83470:	e0bffa15 	stw	r2,-24(fp)
   83474:	00002306 	br	83504 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   83478:	e0bff917 	ldw	r2,-28(fp)
   8347c:	10c00324 	muli	r3,r2,12
   83480:	00800234 	movhi	r2,8
   83484:	1093e804 	addi	r2,r2,20384
   83488:	1885883a 	add	r2,r3,r2
   8348c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   83490:	e0fffe17 	ldw	r3,-8(fp)
   83494:	00900034 	movhi	r2,16384
   83498:	10bfffc4 	addi	r2,r2,-1
   8349c:	1886703a 	and	r3,r3,r2
   834a0:	e0bffc17 	ldw	r2,-16(fp)
   834a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   834a8:	e0bffb17 	ldw	r2,-20(fp)
   834ac:	1000051e 	bne	r2,zero,834c4 <open+0xd4>
   834b0:	e13ffc17 	ldw	r4,-16(fp)
   834b4:	00833240 	call	83324 <alt_file_locked>
   834b8:	e0bffa15 	stw	r2,-24(fp)
   834bc:	e0bffa17 	ldw	r2,-24(fp)
   834c0:	10001016 	blt	r2,zero,83504 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   834c4:	e0bff817 	ldw	r2,-32(fp)
   834c8:	10800317 	ldw	r2,12(r2)
   834cc:	10000826 	beq	r2,zero,834f0 <open+0x100>
   834d0:	e0bff817 	ldw	r2,-32(fp)
   834d4:	10800317 	ldw	r2,12(r2)
   834d8:	e1ffff17 	ldw	r7,-4(fp)
   834dc:	e1bffe17 	ldw	r6,-8(fp)
   834e0:	e17ffd17 	ldw	r5,-12(fp)
   834e4:	e13ffc17 	ldw	r4,-16(fp)
   834e8:	103ee83a 	callr	r2
   834ec:	00000106 	br	834f4 <open+0x104>
   834f0:	0005883a 	mov	r2,zero
   834f4:	e0bffa15 	stw	r2,-24(fp)
   834f8:	00000206 	br	83504 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   834fc:	00bffb44 	movi	r2,-19
   83500:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   83504:	e0bffa17 	ldw	r2,-24(fp)
   83508:	1000090e 	bge	r2,zero,83530 <open+0x140>
  {
    alt_release_fd (index);  
   8350c:	e13ff917 	ldw	r4,-28(fp)
   83510:	00835480 	call	83548 <alt_release_fd>
    ALT_ERRNO = -status;
   83514:	00832d40 	call	832d4 <alt_get_errno>
   83518:	1007883a 	mov	r3,r2
   8351c:	e0bffa17 	ldw	r2,-24(fp)
   83520:	0085c83a 	sub	r2,zero,r2
   83524:	18800015 	stw	r2,0(r3)
    return -1;
   83528:	00bfffc4 	movi	r2,-1
   8352c:	00000106 	br	83534 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   83530:	e0bff917 	ldw	r2,-28(fp)
}
   83534:	e037883a 	mov	sp,fp
   83538:	dfc00117 	ldw	ra,4(sp)
   8353c:	df000017 	ldw	fp,0(sp)
   83540:	dec00204 	addi	sp,sp,8
   83544:	f800283a 	ret

00083548 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   83548:	defffe04 	addi	sp,sp,-8
   8354c:	df000115 	stw	fp,4(sp)
   83550:	df000104 	addi	fp,sp,4
   83554:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   83558:	e0bfff17 	ldw	r2,-4(fp)
   8355c:	108000d0 	cmplti	r2,r2,3
   83560:	10000d1e 	bne	r2,zero,83598 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   83564:	00800234 	movhi	r2,8
   83568:	1093e804 	addi	r2,r2,20384
   8356c:	e0ffff17 	ldw	r3,-4(fp)
   83570:	18c00324 	muli	r3,r3,12
   83574:	10c5883a 	add	r2,r2,r3
   83578:	10800204 	addi	r2,r2,8
   8357c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   83580:	00800234 	movhi	r2,8
   83584:	1093e804 	addi	r2,r2,20384
   83588:	e0ffff17 	ldw	r3,-4(fp)
   8358c:	18c00324 	muli	r3,r3,12
   83590:	10c5883a 	add	r2,r2,r3
   83594:	10000015 	stw	zero,0(r2)
  }
}
   83598:	0001883a 	nop
   8359c:	e037883a 	mov	sp,fp
   835a0:	df000017 	ldw	fp,0(sp)
   835a4:	dec00104 	addi	sp,sp,4
   835a8:	f800283a 	ret

000835ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   835ac:	defffa04 	addi	sp,sp,-24
   835b0:	df000515 	stw	fp,20(sp)
   835b4:	df000504 	addi	fp,sp,20
   835b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   835bc:	0005303a 	rdctl	r2,status
   835c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   835c4:	e0fffc17 	ldw	r3,-16(fp)
   835c8:	00bfff84 	movi	r2,-2
   835cc:	1884703a 	and	r2,r3,r2
   835d0:	1001703a 	wrctl	status,r2
  
  return context;
   835d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   835d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   835dc:	e0bfff17 	ldw	r2,-4(fp)
   835e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   835e4:	e0bffd17 	ldw	r2,-12(fp)
   835e8:	10800017 	ldw	r2,0(r2)
   835ec:	e0fffd17 	ldw	r3,-12(fp)
   835f0:	18c00117 	ldw	r3,4(r3)
   835f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   835f8:	e0bffd17 	ldw	r2,-12(fp)
   835fc:	10800117 	ldw	r2,4(r2)
   83600:	e0fffd17 	ldw	r3,-12(fp)
   83604:	18c00017 	ldw	r3,0(r3)
   83608:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8360c:	e0bffd17 	ldw	r2,-12(fp)
   83610:	e0fffd17 	ldw	r3,-12(fp)
   83614:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   83618:	e0bffd17 	ldw	r2,-12(fp)
   8361c:	e0fffd17 	ldw	r3,-12(fp)
   83620:	10c00015 	stw	r3,0(r2)
   83624:	e0bffb17 	ldw	r2,-20(fp)
   83628:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8362c:	e0bffe17 	ldw	r2,-8(fp)
   83630:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   83634:	0001883a 	nop
   83638:	e037883a 	mov	sp,fp
   8363c:	df000017 	ldw	fp,0(sp)
   83640:	dec00104 	addi	sp,sp,4
   83644:	f800283a 	ret

00083648 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   83648:	defffb04 	addi	sp,sp,-20
   8364c:	dfc00415 	stw	ra,16(sp)
   83650:	df000315 	stw	fp,12(sp)
   83654:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   83658:	d0a00917 	ldw	r2,-32732(gp)
   8365c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   83660:	d0a50317 	ldw	r2,-27636(gp)
   83664:	10800044 	addi	r2,r2,1
   83668:	d0a50315 	stw	r2,-27636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8366c:	00002e06 	br	83728 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   83670:	e0bffd17 	ldw	r2,-12(fp)
   83674:	10800017 	ldw	r2,0(r2)
   83678:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8367c:	e0bffd17 	ldw	r2,-12(fp)
   83680:	10800403 	ldbu	r2,16(r2)
   83684:	10803fcc 	andi	r2,r2,255
   83688:	10000426 	beq	r2,zero,8369c <alt_tick+0x54>
   8368c:	d0a50317 	ldw	r2,-27636(gp)
   83690:	1000021e 	bne	r2,zero,8369c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   83694:	e0bffd17 	ldw	r2,-12(fp)
   83698:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8369c:	e0bffd17 	ldw	r2,-12(fp)
   836a0:	10800217 	ldw	r2,8(r2)
   836a4:	d0e50317 	ldw	r3,-27636(gp)
   836a8:	18801d36 	bltu	r3,r2,83720 <alt_tick+0xd8>
   836ac:	e0bffd17 	ldw	r2,-12(fp)
   836b0:	10800403 	ldbu	r2,16(r2)
   836b4:	10803fcc 	andi	r2,r2,255
   836b8:	1000191e 	bne	r2,zero,83720 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   836bc:	e0bffd17 	ldw	r2,-12(fp)
   836c0:	10800317 	ldw	r2,12(r2)
   836c4:	e0fffd17 	ldw	r3,-12(fp)
   836c8:	18c00517 	ldw	r3,20(r3)
   836cc:	1809883a 	mov	r4,r3
   836d0:	103ee83a 	callr	r2
   836d4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   836d8:	e0bfff17 	ldw	r2,-4(fp)
   836dc:	1000031e 	bne	r2,zero,836ec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   836e0:	e13ffd17 	ldw	r4,-12(fp)
   836e4:	00835ac0 	call	835ac <alt_alarm_stop>
   836e8:	00000d06 	br	83720 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   836ec:	e0bffd17 	ldw	r2,-12(fp)
   836f0:	10c00217 	ldw	r3,8(r2)
   836f4:	e0bfff17 	ldw	r2,-4(fp)
   836f8:	1887883a 	add	r3,r3,r2
   836fc:	e0bffd17 	ldw	r2,-12(fp)
   83700:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   83704:	e0bffd17 	ldw	r2,-12(fp)
   83708:	10c00217 	ldw	r3,8(r2)
   8370c:	d0a50317 	ldw	r2,-27636(gp)
   83710:	1880032e 	bgeu	r3,r2,83720 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   83714:	e0bffd17 	ldw	r2,-12(fp)
   83718:	00c00044 	movi	r3,1
   8371c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   83720:	e0bffe17 	ldw	r2,-8(fp)
   83724:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   83728:	e0fffd17 	ldw	r3,-12(fp)
   8372c:	d0a00904 	addi	r2,gp,-32732
   83730:	18bfcf1e 	bne	r3,r2,83670 <__alt_data_end+0xfffb5470>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   83734:	0001883a 	nop
}
   83738:	0001883a 	nop
   8373c:	e037883a 	mov	sp,fp
   83740:	dfc00117 	ldw	ra,4(sp)
   83744:	df000017 	ldw	fp,0(sp)
   83748:	dec00204 	addi	sp,sp,8
   8374c:	f800283a 	ret

00083750 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   83750:	deffff04 	addi	sp,sp,-4
   83754:	df000015 	stw	fp,0(sp)
   83758:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8375c:	000170fa 	wrctl	ienable,zero
}
   83760:	0001883a 	nop
   83764:	e037883a 	mov	sp,fp
   83768:	df000017 	ldw	fp,0(sp)
   8376c:	dec00104 	addi	sp,sp,4
   83770:	f800283a 	ret

00083774 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   83774:	defffb04 	addi	sp,sp,-20
   83778:	dfc00415 	stw	ra,16(sp)
   8377c:	df000315 	stw	fp,12(sp)
   83780:	df000304 	addi	fp,sp,12
   83784:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   83788:	00800234 	movhi	r2,8
   8378c:	10944a04 	addi	r2,r2,20776
   83790:	10800017 	ldw	r2,0(r2)
   83794:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   83798:	00003106 	br	83860 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   8379c:	e0bffd17 	ldw	r2,-12(fp)
   837a0:	10800217 	ldw	r2,8(r2)
   837a4:	1009883a 	mov	r4,r2
   837a8:	00804540 	call	80454 <strlen>
   837ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   837b0:	e0bffd17 	ldw	r2,-12(fp)
   837b4:	10c00217 	ldw	r3,8(r2)
   837b8:	e0bffe17 	ldw	r2,-8(fp)
   837bc:	10bfffc4 	addi	r2,r2,-1
   837c0:	1885883a 	add	r2,r3,r2
   837c4:	10800003 	ldbu	r2,0(r2)
   837c8:	10803fcc 	andi	r2,r2,255
   837cc:	1080201c 	xori	r2,r2,128
   837d0:	10bfe004 	addi	r2,r2,-128
   837d4:	10800bd8 	cmpnei	r2,r2,47
   837d8:	1000031e 	bne	r2,zero,837e8 <alt_find_file+0x74>
    {
      len -= 1;
   837dc:	e0bffe17 	ldw	r2,-8(fp)
   837e0:	10bfffc4 	addi	r2,r2,-1
   837e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   837e8:	e0bffe17 	ldw	r2,-8(fp)
   837ec:	e0ffff17 	ldw	r3,-4(fp)
   837f0:	1885883a 	add	r2,r3,r2
   837f4:	10800003 	ldbu	r2,0(r2)
   837f8:	10803fcc 	andi	r2,r2,255
   837fc:	1080201c 	xori	r2,r2,128
   83800:	10bfe004 	addi	r2,r2,-128
   83804:	10800be0 	cmpeqi	r2,r2,47
   83808:	1000081e 	bne	r2,zero,8382c <alt_find_file+0xb8>
   8380c:	e0bffe17 	ldw	r2,-8(fp)
   83810:	e0ffff17 	ldw	r3,-4(fp)
   83814:	1885883a 	add	r2,r3,r2
   83818:	10800003 	ldbu	r2,0(r2)
   8381c:	10803fcc 	andi	r2,r2,255
   83820:	1080201c 	xori	r2,r2,128
   83824:	10bfe004 	addi	r2,r2,-128
   83828:	10000a1e 	bne	r2,zero,83854 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   8382c:	e0bffd17 	ldw	r2,-12(fp)
   83830:	10800217 	ldw	r2,8(r2)
   83834:	e0fffe17 	ldw	r3,-8(fp)
   83838:	180d883a 	mov	r6,r3
   8383c:	e17fff17 	ldw	r5,-4(fp)
   83840:	1009883a 	mov	r4,r2
   83844:	0083a880 	call	83a88 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   83848:	1000021e 	bne	r2,zero,83854 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8384c:	e0bffd17 	ldw	r2,-12(fp)
   83850:	00000806 	br	83874 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   83854:	e0bffd17 	ldw	r2,-12(fp)
   83858:	10800017 	ldw	r2,0(r2)
   8385c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   83860:	e0fffd17 	ldw	r3,-12(fp)
   83864:	00800234 	movhi	r2,8
   83868:	10944a04 	addi	r2,r2,20776
   8386c:	18bfcb1e 	bne	r3,r2,8379c <__alt_data_end+0xfffb559c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   83870:	0005883a 	mov	r2,zero
}
   83874:	e037883a 	mov	sp,fp
   83878:	dfc00117 	ldw	ra,4(sp)
   8387c:	df000017 	ldw	fp,0(sp)
   83880:	dec00204 	addi	sp,sp,8
   83884:	f800283a 	ret

00083888 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   83888:	defffc04 	addi	sp,sp,-16
   8388c:	df000315 	stw	fp,12(sp)
   83890:	df000304 	addi	fp,sp,12
   83894:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   83898:	00bffa04 	movi	r2,-24
   8389c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   838a0:	e03ffd15 	stw	zero,-12(fp)
   838a4:	00001d06 	br	8391c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   838a8:	00800234 	movhi	r2,8
   838ac:	1093e804 	addi	r2,r2,20384
   838b0:	e0fffd17 	ldw	r3,-12(fp)
   838b4:	18c00324 	muli	r3,r3,12
   838b8:	10c5883a 	add	r2,r2,r3
   838bc:	10800017 	ldw	r2,0(r2)
   838c0:	1000131e 	bne	r2,zero,83910 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   838c4:	00800234 	movhi	r2,8
   838c8:	1093e804 	addi	r2,r2,20384
   838cc:	e0fffd17 	ldw	r3,-12(fp)
   838d0:	18c00324 	muli	r3,r3,12
   838d4:	10c5883a 	add	r2,r2,r3
   838d8:	e0ffff17 	ldw	r3,-4(fp)
   838dc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   838e0:	00800234 	movhi	r2,8
   838e4:	10944e04 	addi	r2,r2,20792
   838e8:	10c00017 	ldw	r3,0(r2)
   838ec:	e0bffd17 	ldw	r2,-12(fp)
   838f0:	1880040e 	bge	r3,r2,83904 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   838f4:	00800234 	movhi	r2,8
   838f8:	10944e04 	addi	r2,r2,20792
   838fc:	e0fffd17 	ldw	r3,-12(fp)
   83900:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   83904:	e0bffd17 	ldw	r2,-12(fp)
   83908:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   8390c:	00000606 	br	83928 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   83910:	e0bffd17 	ldw	r2,-12(fp)
   83914:	10800044 	addi	r2,r2,1
   83918:	e0bffd15 	stw	r2,-12(fp)
   8391c:	e0bffd17 	ldw	r2,-12(fp)
   83920:	10800810 	cmplti	r2,r2,32
   83924:	103fe01e 	bne	r2,zero,838a8 <__alt_data_end+0xfffb56a8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   83928:	e0bffe17 	ldw	r2,-8(fp)
}
   8392c:	e037883a 	mov	sp,fp
   83930:	df000017 	ldw	fp,0(sp)
   83934:	dec00104 	addi	sp,sp,4
   83938:	f800283a 	ret

0008393c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   8393c:	defffb04 	addi	sp,sp,-20
   83940:	df000415 	stw	fp,16(sp)
   83944:	df000404 	addi	fp,sp,16
   83948:	e13ffe15 	stw	r4,-8(fp)
   8394c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   83950:	e0bfff17 	ldw	r2,-4(fp)
   83954:	10840070 	cmpltui	r2,r2,4097
   83958:	1000021e 	bne	r2,zero,83964 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   8395c:	00840004 	movi	r2,4096
   83960:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   83964:	e0fffe17 	ldw	r3,-8(fp)
   83968:	e0bfff17 	ldw	r2,-4(fp)
   8396c:	1885883a 	add	r2,r3,r2
   83970:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   83974:	e0bffe17 	ldw	r2,-8(fp)
   83978:	e0bffc15 	stw	r2,-16(fp)
   8397c:	00000506 	br	83994 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   83980:	e0bffc17 	ldw	r2,-16(fp)
   83984:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   83988:	e0bffc17 	ldw	r2,-16(fp)
   8398c:	10800804 	addi	r2,r2,32
   83990:	e0bffc15 	stw	r2,-16(fp)
   83994:	e0fffc17 	ldw	r3,-16(fp)
   83998:	e0bffd17 	ldw	r2,-12(fp)
   8399c:	18bff836 	bltu	r3,r2,83980 <__alt_data_end+0xfffb5780>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   839a0:	e0bffe17 	ldw	r2,-8(fp)
   839a4:	108007cc 	andi	r2,r2,31
   839a8:	10000226 	beq	r2,zero,839b4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   839ac:	e0bffc17 	ldw	r2,-16(fp)
   839b0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   839b4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   839b8:	0001883a 	nop
   839bc:	e037883a 	mov	sp,fp
   839c0:	df000017 	ldw	fp,0(sp)
   839c4:	dec00104 	addi	sp,sp,4
   839c8:	f800283a 	ret

000839cc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   839cc:	defffe04 	addi	sp,sp,-8
   839d0:	df000115 	stw	fp,4(sp)
   839d4:	df000104 	addi	fp,sp,4
   839d8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   839dc:	e0bfff17 	ldw	r2,-4(fp)
   839e0:	10bffe84 	addi	r2,r2,-6
   839e4:	10c00428 	cmpgeui	r3,r2,16
   839e8:	18001a1e 	bne	r3,zero,83a54 <alt_exception_cause_generated_bad_addr+0x88>
   839ec:	100690ba 	slli	r3,r2,2
   839f0:	00800234 	movhi	r2,8
   839f4:	108e8104 	addi	r2,r2,14852
   839f8:	1885883a 	add	r2,r3,r2
   839fc:	10800017 	ldw	r2,0(r2)
   83a00:	1000683a 	jmp	r2
   83a04:	00083a44 	movi	zero,8425
   83a08:	00083a44 	movi	zero,8425
   83a0c:	00083a54 	movui	zero,8425
   83a10:	00083a54 	movui	zero,8425
   83a14:	00083a54 	movui	zero,8425
   83a18:	00083a44 	movi	zero,8425
   83a1c:	00083a4c 	andi	zero,zero,8425
   83a20:	00083a54 	movui	zero,8425
   83a24:	00083a44 	movi	zero,8425
   83a28:	00083a44 	movi	zero,8425
   83a2c:	00083a54 	movui	zero,8425
   83a30:	00083a44 	movi	zero,8425
   83a34:	00083a4c 	andi	zero,zero,8425
   83a38:	00083a54 	movui	zero,8425
   83a3c:	00083a54 	movui	zero,8425
   83a40:	00083a44 	movi	zero,8425
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   83a44:	00800044 	movi	r2,1
   83a48:	00000306 	br	83a58 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   83a4c:	0005883a 	mov	r2,zero
   83a50:	00000106 	br	83a58 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   83a54:	0005883a 	mov	r2,zero
  }
}
   83a58:	e037883a 	mov	sp,fp
   83a5c:	df000017 	ldw	fp,0(sp)
   83a60:	dec00104 	addi	sp,sp,4
   83a64:	f800283a 	ret

00083a68 <exit>:
   83a68:	defffe04 	addi	sp,sp,-8
   83a6c:	000b883a 	mov	r5,zero
   83a70:	dc000015 	stw	r16,0(sp)
   83a74:	dfc00115 	stw	ra,4(sp)
   83a78:	2021883a 	mov	r16,r4
   83a7c:	0083ae00 	call	83ae0 <__call_exitprocs>
   83a80:	8009883a 	mov	r4,r16
   83a84:	0083c700 	call	83c70 <_exit>

00083a88 <memcmp>:
   83a88:	218d883a 	add	r6,r4,r6
   83a8c:	21800826 	beq	r4,r6,83ab0 <memcmp+0x28>
   83a90:	20800003 	ldbu	r2,0(r4)
   83a94:	28c00003 	ldbu	r3,0(r5)
   83a98:	10c00226 	beq	r2,r3,83aa4 <memcmp+0x1c>
   83a9c:	10c5c83a 	sub	r2,r2,r3
   83aa0:	f800283a 	ret
   83aa4:	21000044 	addi	r4,r4,1
   83aa8:	29400044 	addi	r5,r5,1
   83aac:	003ff706 	br	83a8c <__alt_data_end+0xfffb588c>
   83ab0:	0005883a 	mov	r2,zero
   83ab4:	f800283a 	ret

00083ab8 <memcpy>:
   83ab8:	2005883a 	mov	r2,r4
   83abc:	2007883a 	mov	r3,r4
   83ac0:	218d883a 	add	r6,r4,r6
   83ac4:	19800526 	beq	r3,r6,83adc <memcpy+0x24>
   83ac8:	29000003 	ldbu	r4,0(r5)
   83acc:	18c00044 	addi	r3,r3,1
   83ad0:	29400044 	addi	r5,r5,1
   83ad4:	193fffc5 	stb	r4,-1(r3)
   83ad8:	003ffa06 	br	83ac4 <__alt_data_end+0xfffb58c4>
   83adc:	f800283a 	ret

00083ae0 <__call_exitprocs>:
   83ae0:	defff504 	addi	sp,sp,-44
   83ae4:	dd000515 	stw	r20,20(sp)
   83ae8:	05000234 	movhi	r20,8
   83aec:	dc800315 	stw	r18,12(sp)
   83af0:	dfc00a15 	stw	ra,40(sp)
   83af4:	df000915 	stw	fp,36(sp)
   83af8:	ddc00815 	stw	r23,32(sp)
   83afc:	dd800715 	stw	r22,28(sp)
   83b00:	dd400615 	stw	r21,24(sp)
   83b04:	dcc00415 	stw	r19,16(sp)
   83b08:	dc400215 	stw	r17,8(sp)
   83b0c:	dc000115 	stw	r16,4(sp)
   83b10:	d9000015 	stw	r4,0(sp)
   83b14:	2825883a 	mov	r18,r5
   83b18:	a5144804 	addi	r20,r20,20768
   83b1c:	a4400017 	ldw	r17,0(r20)
   83b20:	8cc00c17 	ldw	r19,48(r17)
   83b24:	8c400c04 	addi	r17,r17,48
   83b28:	98004526 	beq	r19,zero,83c40 <__call_exitprocs+0x160>
   83b2c:	9c000117 	ldw	r16,4(r19)
   83b30:	00900034 	movhi	r2,16384
   83b34:	10bfffc4 	addi	r2,r2,-1
   83b38:	9d402217 	ldw	r21,136(r19)
   83b3c:	85bfffc4 	addi	r22,r16,-1
   83b40:	80a1883a 	add	r16,r16,r2
   83b44:	8421883a 	add	r16,r16,r16
   83b48:	8421883a 	add	r16,r16,r16
   83b4c:	ac2f883a 	add	r23,r21,r16
   83b50:	84000204 	addi	r16,r16,8
   83b54:	9c21883a 	add	r16,r19,r16
   83b58:	b0002716 	blt	r22,zero,83bf8 <__call_exitprocs+0x118>
   83b5c:	90000726 	beq	r18,zero,83b7c <__call_exitprocs+0x9c>
   83b60:	a800041e 	bne	r21,zero,83b74 <__call_exitprocs+0x94>
   83b64:	b5bfffc4 	addi	r22,r22,-1
   83b68:	bdffff04 	addi	r23,r23,-4
   83b6c:	843fff04 	addi	r16,r16,-4
   83b70:	003ff906 	br	83b58 <__alt_data_end+0xfffb5958>
   83b74:	b9002017 	ldw	r4,128(r23)
   83b78:	913ffa1e 	bne	r18,r4,83b64 <__alt_data_end+0xfffb5964>
   83b7c:	99000117 	ldw	r4,4(r19)
   83b80:	82000017 	ldw	r8,0(r16)
   83b84:	213fffc4 	addi	r4,r4,-1
   83b88:	b100021e 	bne	r22,r4,83b94 <__call_exitprocs+0xb4>
   83b8c:	9d800115 	stw	r22,4(r19)
   83b90:	00000106 	br	83b98 <__call_exitprocs+0xb8>
   83b94:	80000015 	stw	zero,0(r16)
   83b98:	403ff226 	beq	r8,zero,83b64 <__alt_data_end+0xfffb5964>
   83b9c:	9f000117 	ldw	fp,4(r19)
   83ba0:	a8000526 	beq	r21,zero,83bb8 <__call_exitprocs+0xd8>
   83ba4:	00800044 	movi	r2,1
   83ba8:	1592983a 	sll	r9,r2,r22
   83bac:	a9404017 	ldw	r5,256(r21)
   83bb0:	494a703a 	and	r5,r9,r5
   83bb4:	2800021e 	bne	r5,zero,83bc0 <__call_exitprocs+0xe0>
   83bb8:	403ee83a 	callr	r8
   83bbc:	00000906 	br	83be4 <__call_exitprocs+0x104>
   83bc0:	a9004117 	ldw	r4,260(r21)
   83bc4:	4908703a 	and	r4,r9,r4
   83bc8:	2000041e 	bne	r4,zero,83bdc <__call_exitprocs+0xfc>
   83bcc:	b9400017 	ldw	r5,0(r23)
   83bd0:	d9000017 	ldw	r4,0(sp)
   83bd4:	403ee83a 	callr	r8
   83bd8:	00000206 	br	83be4 <__call_exitprocs+0x104>
   83bdc:	b9000017 	ldw	r4,0(r23)
   83be0:	403ee83a 	callr	r8
   83be4:	99000117 	ldw	r4,4(r19)
   83be8:	e13fcc1e 	bne	fp,r4,83b1c <__alt_data_end+0xfffb591c>
   83bec:	89000017 	ldw	r4,0(r17)
   83bf0:	993fdc26 	beq	r19,r4,83b64 <__alt_data_end+0xfffb5964>
   83bf4:	003fc906 	br	83b1c <__alt_data_end+0xfffb591c>
   83bf8:	00800034 	movhi	r2,0
   83bfc:	10800004 	addi	r2,r2,0
   83c00:	10000f26 	beq	r2,zero,83c40 <__call_exitprocs+0x160>
   83c04:	99400117 	ldw	r5,4(r19)
   83c08:	99000017 	ldw	r4,0(r19)
   83c0c:	2800091e 	bne	r5,zero,83c34 <__call_exitprocs+0x154>
   83c10:	20000826 	beq	r4,zero,83c34 <__call_exitprocs+0x154>
   83c14:	89000015 	stw	r4,0(r17)
   83c18:	a8000226 	beq	r21,zero,83c24 <__call_exitprocs+0x144>
   83c1c:	a809883a 	mov	r4,r21
   83c20:	00000000 	call	0 <__alt_mem_onchip_memory-0x80000>
   83c24:	9809883a 	mov	r4,r19
   83c28:	00000000 	call	0 <__alt_mem_onchip_memory-0x80000>
   83c2c:	8cc00017 	ldw	r19,0(r17)
   83c30:	003fbd06 	br	83b28 <__alt_data_end+0xfffb5928>
   83c34:	9823883a 	mov	r17,r19
   83c38:	2027883a 	mov	r19,r4
   83c3c:	003fba06 	br	83b28 <__alt_data_end+0xfffb5928>
   83c40:	dfc00a17 	ldw	ra,40(sp)
   83c44:	df000917 	ldw	fp,36(sp)
   83c48:	ddc00817 	ldw	r23,32(sp)
   83c4c:	dd800717 	ldw	r22,28(sp)
   83c50:	dd400617 	ldw	r21,24(sp)
   83c54:	dd000517 	ldw	r20,20(sp)
   83c58:	dcc00417 	ldw	r19,16(sp)
   83c5c:	dc800317 	ldw	r18,12(sp)
   83c60:	dc400217 	ldw	r17,8(sp)
   83c64:	dc000117 	ldw	r16,4(sp)
   83c68:	dec00b04 	addi	sp,sp,44
   83c6c:	f800283a 	ret

00083c70 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   83c70:	defffd04 	addi	sp,sp,-12
   83c74:	df000215 	stw	fp,8(sp)
   83c78:	df000204 	addi	fp,sp,8
   83c7c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   83c80:	0001883a 	nop
   83c84:	e0bfff17 	ldw	r2,-4(fp)
   83c88:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   83c8c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   83c90:	10000226 	beq	r2,zero,83c9c <_exit+0x2c>
    ALT_SIM_FAIL();
   83c94:	002af070 	cmpltui	zero,zero,43969
   83c98:	00000106 	br	83ca0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   83c9c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   83ca0:	003fff06 	br	83ca0 <__alt_data_end+0xfffb5aa0>
