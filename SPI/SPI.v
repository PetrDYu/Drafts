
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module SPI(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================

//реализация SPI

wire done, ss, sck, sdin, sdout;
reg [7:0] tdata;
reg rstb;

assign ss = GPIO[3];
assign sck = GPIO[1];
assign sdin = GPIO[5];
assign GPIO[7] = sdout;

/*if (done == 1)
begin

	rstb = 1'b0

end*/

/*initial
begin
	rstb = 1'b0;
end*/

/*always @(GPIO[3])
begin
	
	//rstb = rstb + 1'b1;
	
	if (GPIO[3] == 0)
		tdata = 8'd152;
	else
		tdata = 8'b0;
	
end*/

wire [3:0] i;
//reg [9:0][3:0] freq_mem;


always @(posedge done)
begin
	
	tdata = 8'd131;
	
end

Counter count_n_freq
 (
	
	.clock(done),
	.q(i),
	.aload(1'b0),
	.data(data4),
	.aclr(1'b0),
	.sclr(1'b0)
	
 );

//assign LEDR[1] = ~GPIO[3];
//assign LEDR[2] = GPIO[1];
//assign LEDR[3] = rstb;

spi_slave spi
(
	
	.rstb(1'b1),
	.ten(1'b1),
	.tdata(tdata),
	.mlb(1'b1),
	.ss(ss),
	.sck(sck),
	.sdin(sdin),
	.sdout(sdout),
	.done(done)
	
);

endmodule
